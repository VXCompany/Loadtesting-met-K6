{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2021-03-29T12:21:36.435Z",
        "id": "page_1",
        "title": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/",
        "pageTimings": {
          "onContentLoad": 632.5170000018261,
          "onLoad": 647.2370000010415
        }
      }
    ],
    "entries": [
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "upgrade-insecure-requests",
              "value": "1"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
            },
            {
              "name": "sec-fetch-site",
              "value": "none"
            },
            {
              "name": "sec-fetch-mode",
              "value": "navigate"
            },
            {
              "name": "sec-fetch-user",
              "value": "?1"
            },
            {
              "name": "sec-fetch-dest",
              "value": "document"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:21:37 GMT"
            },
            {
              "name": "content-type",
              "value": "text/html"
            },
            {
              "name": "content-length",
              "value": "9470"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:53 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db9-24fe\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 9470,
            "mimeType": "text/html",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\"/>\n    <title>Darling wherefore art thou my love</title>\n    <base href=\"/\"/>\n\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n    <link rel=\"icon\" type=\"image/png\" href=\"/assets/favicon-32x32.png\"/>\n    <style type=\"text/css\">@font-face{font-family:'Alegreya';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/alegreya/v19/4UacrEBBsBhlBjvfkQjt71kZfyBzPgNG9hU49qqlkySFrt1919Q.woff) format('woff');unicode-range:U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;}@font-face{font-family:'Alegreya';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/alegreya/v19/4UacrEBBsBhlBjvfkQjt71kZfyBzPgNG9hU4_6qlkySFrt1919Q.woff) format('woff');unicode-range:U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;}@font-face{font-family:'Alegreya';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/alegreya/v19/4UacrEBBsBhlBjvfkQjt71kZfyBzPgNG9hU496qlkySFrt1919Q.woff) format('woff');unicode-range:U+1F00-1FFF;}@font-face{font-family:'Alegreya';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/alegreya/v19/4UacrEBBsBhlBjvfkQjt71kZfyBzPgNG9hU4-KqlkySFrt1919Q.woff) format('woff');unicode-range:U+0370-03FF;}@font-face{font-family:'Alegreya';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/alegreya/v19/4UacrEBBsBhlBjvfkQjt71kZfyBzPgNG9hU49KqlkySFrt1919Q.woff) format('woff');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Alegreya';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/alegreya/v19/4UacrEBBsBhlBjvfkQjt71kZfyBzPgNG9hU49aqlkySFrt1919Q.woff) format('woff');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Alegreya';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/alegreya/v19/4UacrEBBsBhlBjvfkQjt71kZfyBzPgNG9hU4-6qlkySFrt19.woff) format('woff');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}</style>\n    <style type=\"text/css\">@font-face{font-family:'Material Icons';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/materialicons/v77/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2) format('woff2');}.material-icons{font-family:'Material Icons';font-weight:normal;font-style:normal;font-size:24px;line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-feature-settings:'liga';-webkit-font-smoothing:antialiased;}</style>\n      <style type=\"text/css\">@font-face{font-family:'Roboto';font-style:normal;font-weight:300;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmSU5fCRc4AMP6lbBP.woff2) format('woff2');unicode-range:U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;}@font-face{font-family:'Roboto';font-style:normal;font-weight:300;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmSU5fABc4AMP6lbBP.woff2) format('woff2');unicode-range:U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;}@font-face{font-family:'Roboto';font-style:normal;font-weight:300;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmSU5fCBc4AMP6lbBP.woff2) format('woff2');unicode-range:U+1F00-1FFF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:300;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmSU5fBxc4AMP6lbBP.woff2) format('woff2');unicode-range:U+0370-03FF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:300;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmSU5fCxc4AMP6lbBP.woff2) format('woff2');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Roboto';font-style:normal;font-weight:300;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmSU5fChc4AMP6lbBP.woff2) format('woff2');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:300;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmSU5fBBc4AMP6lQ.woff2) format('woff2');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu72xKKTU1Kvnz.woff2) format('woff2');unicode-range:U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu5mxKKTU1Kvnz.woff2) format('woff2');unicode-range:U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7mxKKTU1Kvnz.woff2) format('woff2');unicode-range:U+1F00-1FFF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4WxKKTU1Kvnz.woff2) format('woff2');unicode-range:U+0370-03FF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7WxKKTU1Kvnz.woff2) format('woff2');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7GxKKTU1Kvnz.woff2) format('woff2');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2) format('woff2');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fCRc4AMP6lbBP.woff2) format('woff2');unicode-range:U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fABc4AMP6lbBP.woff2) format('woff2');unicode-range:U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fCBc4AMP6lbBP.woff2) format('woff2');unicode-range:U+1F00-1FFF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fBxc4AMP6lbBP.woff2) format('woff2');unicode-range:U+0370-03FF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fCxc4AMP6lbBP.woff2) format('woff2');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fChc4AMP6lbBP.woff2) format('woff2');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Roboto';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fBBc4AMP6lQ.woff2) format('woff2');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}</style>\n    <style type=\"text/css\">@font-face{font-family:'Material Icons';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/materialicons/v77/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2) format('woff2');}.material-icons{font-family:'Material Icons';font-weight:normal;font-style:normal;font-size:24px;line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-feature-settings:'liga';-webkit-font-smoothing:antialiased;}</style>\n<link rel=\"stylesheet\" href=\"styles.ee04d1000c72ad3f51f4.css\"></head>\n  <body>\n    <app-root></app-root>\n  <script src=\"runtime.0e49e2b53282f40c8925.js\" defer=\"\"></script><script src=\"polyfills.8c151b8375e767ff858f.js\" defer=\"\"></script><script src=\"main.cdef7c3db3985a301fc9.js\" defer=\"\"></script></body>\n</html>"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 9670,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:21:36.428Z",
        "time": 119.49899999925843,
        "timings": {
          "blocked": 37.13099999754456,
          "dns": 0.013999999999999346,
          "ssl": 32.513000000000005,
          "connect": 49.467,
          "send": 0.7060000000000031,
          "wait": 17.548999999547846,
          "receive": 14.632000002166023,
          "_blocked_queueing": 6.375999997544568
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/",
          "lineNumber": 13
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/styles.ee04d1000c72ad3f51f4.css",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/styles.ee04d1000c72ad3f51f4.css"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "no-cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "style"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:21:37 GMT"
            },
            {
              "name": "content-type",
              "value": "text/css"
            },
            {
              "name": "content-length",
              "value": "71434"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:52 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db8-1170a\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 71434,
            "mimeType": "text/css",
            "text": ".mat-badge-content{font-weight:600;font-size:12px;font-family:Roboto,Helvetica Neue,sans-serif}.mat-badge-small .mat-badge-content{font-size:9px}.mat-badge-large .mat-badge-content{font-size:24px}.mat-h1,.mat-headline,.mat-typography h1{font:400 24px/32px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal;margin:0 0 16px}.mat-h2,.mat-title,.mat-typography h2{font:500 20px/32px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal;margin:0 0 16px}.mat-h3,.mat-subheading-2,.mat-typography h3{font:400 16px/28px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal;margin:0 0 16px}.mat-h4,.mat-subheading-1,.mat-typography h4{font:400 15px/24px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal;margin:0 0 16px}.mat-h5,.mat-typography h5{font:400 calc(14px * .83)/20px Roboto,Helvetica Neue,sans-serif;margin:0 0 12px}.mat-h6,.mat-typography h6{font:400 calc(14px * .67)/20px Roboto,Helvetica Neue,sans-serif;margin:0 0 12px}.mat-body-2,.mat-body-strong{font:500 14px/24px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal}.mat-body,.mat-body-1,.mat-typography{font:400 14px/20px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal}.mat-body-1 p,.mat-body p,.mat-typography p{margin:0 0 12px}.mat-caption,.mat-small{font:400 12px/20px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal}.mat-display-4,.mat-typography .mat-display-4{font:300 112px/112px Roboto,Helvetica Neue,sans-serif;letter-spacing:-.05em;margin:0 0 56px}.mat-display-3,.mat-typography .mat-display-3{font:400 56px/56px Roboto,Helvetica Neue,sans-serif;letter-spacing:-.02em;margin:0 0 64px}.mat-display-2,.mat-typography .mat-display-2{font:400 45px/48px Roboto,Helvetica Neue,sans-serif;letter-spacing:-.005em;margin:0 0 64px}.mat-display-1,.mat-typography .mat-display-1{font:400 34px/40px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal;margin:0 0 64px}.mat-bottom-sheet-container{font:400 14px/20px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal}.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button,.mat-stroked-button{font-family:Roboto,Helvetica Neue,sans-serif;font-size:14px;font-weight:500}.mat-button-toggle,.mat-card{font-family:Roboto,Helvetica Neue,sans-serif}.mat-card-title{font-size:24px;font-weight:500}.mat-card-header .mat-card-title{font-size:20px}.mat-card-content,.mat-card-subtitle{font-size:14px}.mat-checkbox{font-family:Roboto,Helvetica Neue,sans-serif}.mat-checkbox-layout .mat-checkbox-label{line-height:24px}.mat-chip{font-size:14px;font-weight:500}.mat-chip .mat-chip-remove.mat-icon,.mat-chip .mat-chip-trailing-icon.mat-icon{font-size:18px}.mat-table{font-family:Roboto,Helvetica Neue,sans-serif}.mat-header-cell{font-size:12px;font-weight:500}.mat-cell,.mat-footer-cell{font-size:14px}.mat-calendar{font-family:Roboto,Helvetica Neue,sans-serif}.mat-calendar-body{font-size:13px}.mat-calendar-body-label,.mat-calendar-period-button{font-size:14px;font-weight:500}.mat-calendar-table-header th{font-size:11px;font-weight:400}.mat-dialog-title{font:500 20px/32px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal}.mat-expansion-panel-header{font-family:Roboto,Helvetica Neue,sans-serif;font-size:15px;font-weight:400}.mat-expansion-panel-content{font:400 14px/20px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal}.mat-form-field{font-size:inherit;font-weight:400;line-height:1.125;font-family:Roboto,Helvetica Neue,sans-serif;letter-spacing:normal}.mat-form-field-wrapper{padding-bottom:1.34375em}.mat-form-field-prefix .mat-icon,.mat-form-field-suffix .mat-icon{font-size:150%;line-height:1.125}.mat-form-field-prefix .mat-icon-button,.mat-form-field-suffix .mat-icon-button{height:1.5em;width:1.5em}.mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-suffix .mat-icon-button .mat-icon{height:1.125em;line-height:1.125}.mat-form-field-infix{padding:.5em 0;border-top:.84375em solid transparent}.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-1.34375em) scale(.75);width:133.3333333333%}.mat-form-field-can-float .mat-input-server[label]:not(:label-shown)+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-1.34374em) scale(.75);width:133.3333433333%}.mat-form-field-label-wrapper{top:-.84375em;padding-top:.84375em}.mat-form-field-label{top:1.34375em}.mat-form-field-underline{bottom:1.34375em}.mat-form-field-subscript-wrapper{font-size:75%;margin-top:.6666666667em;top:calc(100% - 1.7916666667em)}.mat-form-field-appearance-legacy .mat-form-field-wrapper{padding-bottom:1.25em}.mat-form-field-appearance-legacy .mat-form-field-infix{padding:.4375em 0}.mat-form-field-appearance-legacy.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-1.28125em) scale(.75) perspective(100px) translateZ(.001px);-ms-transform:translateY(-1.28125em) scale(.75);width:133.3333333333%}.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-1.28125em) scale(.75) perspective(100px) translateZ(.00101px);-ms-transform:translateY(-1.28124em) scale(.75);width:133.3333433333%}.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server[label]:not(:label-shown)+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-1.28125em) scale(.75) perspective(100px) translateZ(.00102px);-ms-transform:translateY(-1.28123em) scale(.75);width:133.3333533333%}.mat-form-field-appearance-legacy .mat-form-field-label{top:1.28125em}.mat-form-field-appearance-legacy .mat-form-field-underline{bottom:1.25em}.mat-form-field-appearance-legacy .mat-form-field-subscript-wrapper{margin-top:.5416666667em;top:calc(100% - 1.6666666667em)}@media print{.mat-form-field-appearance-legacy.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-1.28122em) scale(.75)}.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-1.28121em) scale(.75)}.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server[label]:not(:label-shown)+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-1.2812em) scale(.75)}}.mat-form-field-appearance-fill .mat-form-field-infix{padding:.25em 0 .75em}.mat-form-field-appearance-fill .mat-form-field-label{top:1.09375em;margin-top:-.5em}.mat-form-field-appearance-fill.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-appearance-fill.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-.59375em) scale(.75);width:133.3333333333%}.mat-form-field-appearance-fill.mat-form-field-can-float .mat-input-server[label]:not(:label-shown)+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-.59374em) scale(.75);width:133.3333433333%}.mat-form-field-appearance-outline .mat-form-field-infix{padding:1em 0}.mat-form-field-appearance-outline .mat-form-field-label{top:1.84375em;margin-top:-.25em}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-appearance-outline.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-1.59375em) scale(.75);width:133.3333333333%}.mat-form-field-appearance-outline.mat-form-field-can-float .mat-input-server[label]:not(:label-shown)+.mat-form-field-label-wrapper .mat-form-field-label{transform:translateY(-1.59374em) scale(.75);width:133.3333433333%}.mat-grid-tile-footer,.mat-grid-tile-header{font-size:14px}.mat-grid-tile-footer .mat-line,.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2),.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:12px}input.mat-input-element{margin-top:-.0625em}.mat-menu-item{font-family:Roboto,Helvetica Neue,sans-serif;font-size:14px;font-weight:400}.mat-paginator,.mat-paginator-page-size .mat-select-trigger{font-family:Roboto,Helvetica Neue,sans-serif;font-size:12px}.mat-radio-button,.mat-select{font-family:Roboto,Helvetica Neue,sans-serif}.mat-select-trigger{height:1.125em}.mat-slide-toggle-content,.mat-slider-thumb-label-text{font-family:Roboto,Helvetica Neue,sans-serif}.mat-slider-thumb-label-text{font-size:12px;font-weight:500}.mat-stepper-horizontal,.mat-stepper-vertical{font-family:Roboto,Helvetica Neue,sans-serif}.mat-step-label{font-size:14px;font-weight:400}.mat-step-sub-label-error{font-weight:400}.mat-step-label-error{font-size:14px}.mat-step-label-selected{font-size:14px;font-weight:500}.mat-tab-group,.mat-tab-label,.mat-tab-link{font-family:Roboto,Helvetica Neue,sans-serif}.mat-tab-label,.mat-tab-link{font-size:14px;font-weight:500}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font:500 20px/32px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal;margin:0}.mat-tooltip{font-family:Roboto,Helvetica Neue,sans-serif;font-size:10px;padding-top:6px;padding-bottom:6px}.mat-tooltip-handset{font-size:14px;padding-top:8px;padding-bottom:8px}.mat-list-item,.mat-list-option{font-family:Roboto,Helvetica Neue,sans-serif}.mat-list-base .mat-list-item{font-size:16px}.mat-list-base .mat-list-item .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list-base .mat-list-item .mat-line:nth-child(n+2){font-size:14px}.mat-list-base .mat-list-option{font-size:16px}.mat-list-base .mat-list-option .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list-base .mat-list-option .mat-line:nth-child(n+2){font-size:14px}.mat-list-base .mat-subheader{font-family:Roboto,Helvetica Neue,sans-serif;font-size:14px;font-weight:500}.mat-list-base[dense] .mat-list-item{font-size:12px}.mat-list-base[dense] .mat-list-item .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list-base[dense] .mat-list-item .mat-line:nth-child(n+2),.mat-list-base[dense] .mat-list-option{font-size:12px}.mat-list-base[dense] .mat-list-option .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list-base[dense] .mat-list-option .mat-line:nth-child(n+2){font-size:12px}.mat-list-base[dense] .mat-subheader{font-family:Roboto,Helvetica Neue,sans-serif;font-size:12px;font-weight:500}.mat-option{font-family:Roboto,Helvetica Neue,sans-serif;font-size:16px}.mat-optgroup-label{font:500 14px/24px Roboto,Helvetica Neue,sans-serif;letter-spacing:normal}.mat-simple-snackbar{font-family:Roboto,Helvetica Neue,sans-serif;font-size:14px}.mat-simple-snackbar-action{line-height:1;font-family:inherit;font-size:inherit;font-weight:500}.mat-tree{font-family:Roboto,Helvetica Neue,sans-serif}.mat-nested-tree-node,.mat-tree-node{font-weight:400;font-size:14px}.mat-ripple{overflow:hidden;position:relative}.mat-ripple:not(:empty){transform:translateZ(0)}.mat-ripple.mat-ripple-unbounded{overflow:visible}.mat-ripple-element{position:absolute;border-radius:50%;pointer-events:none;transition:opacity,transform 0ms cubic-bezier(0,0,.2,1);transform:scale(0)}.cdk-high-contrast-active .mat-ripple-element{display:none}.cdk-visually-hidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;outline:0;-webkit-appearance:none;-moz-appearance:none}.cdk-global-overlay-wrapper,.cdk-overlay-container{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{position:fixed;z-index:1000}.cdk-overlay-container:empty{display:none}.cdk-global-overlay-wrapper,.cdk-overlay-pane{display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{pointer-events:auto;box-sizing:border-box;max-width:100%;max-height:100%}.cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;-webkit-tap-highlight-color:transparent;transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:1}@media screen and (-ms-high-contrast:active){.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.6}}.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.32)}.cdk-overlay-transparent-backdrop,.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{opacity:0}.cdk-overlay-connected-position-bounding-box{position:absolute;z-index:1000;display:flex;flex-direction:column;min-width:1px;min-height:1px}.cdk-global-scrollblock{position:fixed;width:100%;overflow-y:scroll}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0!important;box-sizing:initial!important;height:auto!important;overflow:hidden!important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0!important;box-sizing:initial!important;height:0!important}.mat-focus-indicator,.mat-mdc-focus-indicator{position:relative}.mat-ripple-element{background-color:rgba(0,0,0,.1)}.mat-option{color:rgba(0,0,0,.87)}.mat-option.mat-active,.mat-option.mat-selected:not(.mat-option-multiple):not(.mat-option-disabled),.mat-option:focus:not(.mat-option-disabled),.mat-option:hover:not(.mat-option-disabled){background:rgba(0,0,0,.04)}.mat-option.mat-active{color:rgba(0,0,0,.87)}.mat-option.mat-option-disabled{color:rgba(0,0,0,.38)}.mat-primary .mat-option.mat-selected:not(.mat-option-disabled){color:#673ab7}.mat-accent .mat-option.mat-selected:not(.mat-option-disabled){color:#ffd740}.mat-warn .mat-option.mat-selected:not(.mat-option-disabled){color:#f44336}.mat-optgroup-label{color:rgba(0,0,0,.54)}.mat-optgroup-disabled .mat-optgroup-label{color:rgba(0,0,0,.38)}.mat-pseudo-checkbox{color:rgba(0,0,0,.54)}.mat-pseudo-checkbox:after{color:#fafafa}.mat-pseudo-checkbox-disabled{color:#b0b0b0}.mat-primary .mat-pseudo-checkbox-checked,.mat-primary .mat-pseudo-checkbox-indeterminate{background:#673ab7}.mat-accent .mat-pseudo-checkbox-checked,.mat-accent .mat-pseudo-checkbox-indeterminate,.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-indeterminate{background:#ffd740}.mat-warn .mat-pseudo-checkbox-checked,.mat-warn .mat-pseudo-checkbox-indeterminate{background:#f44336}.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background:#b0b0b0}.mat-app-background{background-color:#fafafa;color:rgba(0,0,0,.87)}.mat-elevation-z0{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-elevation-z1{box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}.mat-elevation-z2{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-elevation-z3{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}.mat-elevation-z4{box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.mat-elevation-z5{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 5px 8px 0 rgba(0,0,0,.14),0 1px 14px 0 rgba(0,0,0,.12)}.mat-elevation-z6{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-elevation-z7{box-shadow:0 4px 5px -2px rgba(0,0,0,.2),0 7px 10px 1px rgba(0,0,0,.14),0 2px 16px 1px rgba(0,0,0,.12)}.mat-elevation-z8{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-elevation-z9{box-shadow:0 5px 6px -3px rgba(0,0,0,.2),0 9px 12px 1px rgba(0,0,0,.14),0 3px 16px 2px rgba(0,0,0,.12)}.mat-elevation-z10{box-shadow:0 6px 6px -3px rgba(0,0,0,.2),0 10px 14px 1px rgba(0,0,0,.14),0 4px 18px 3px rgba(0,0,0,.12)}.mat-elevation-z11{box-shadow:0 6px 7px -4px rgba(0,0,0,.2),0 11px 15px 1px rgba(0,0,0,.14),0 4px 20px 3px rgba(0,0,0,.12)}.mat-elevation-z12{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-elevation-z13{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 13px 19px 2px rgba(0,0,0,.14),0 5px 24px 4px rgba(0,0,0,.12)}.mat-elevation-z14{box-shadow:0 7px 9px -4px rgba(0,0,0,.2),0 14px 21px 2px rgba(0,0,0,.14),0 5px 26px 4px rgba(0,0,0,.12)}.mat-elevation-z15{box-shadow:0 8px 9px -5px rgba(0,0,0,.2),0 15px 22px 2px rgba(0,0,0,.14),0 6px 28px 5px rgba(0,0,0,.12)}.mat-elevation-z16{box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.mat-elevation-z17{box-shadow:0 8px 11px -5px rgba(0,0,0,.2),0 17px 26px 2px rgba(0,0,0,.14),0 6px 32px 5px rgba(0,0,0,.12)}.mat-elevation-z18{box-shadow:0 9px 11px -5px rgba(0,0,0,.2),0 18px 28px 2px rgba(0,0,0,.14),0 7px 34px 6px rgba(0,0,0,.12)}.mat-elevation-z19{box-shadow:0 9px 12px -6px rgba(0,0,0,.2),0 19px 29px 2px rgba(0,0,0,.14),0 7px 36px 6px rgba(0,0,0,.12)}.mat-elevation-z20{box-shadow:0 10px 13px -6px rgba(0,0,0,.2),0 20px 31px 3px rgba(0,0,0,.14),0 8px 38px 7px rgba(0,0,0,.12)}.mat-elevation-z21{box-shadow:0 10px 13px -6px rgba(0,0,0,.2),0 21px 33px 3px rgba(0,0,0,.14),0 8px 40px 7px rgba(0,0,0,.12)}.mat-elevation-z22{box-shadow:0 10px 14px -6px rgba(0,0,0,.2),0 22px 35px 3px rgba(0,0,0,.14),0 8px 42px 7px rgba(0,0,0,.12)}.mat-elevation-z23{box-shadow:0 11px 14px -7px rgba(0,0,0,.2),0 23px 36px 3px rgba(0,0,0,.14),0 9px 44px 8px rgba(0,0,0,.12)}.mat-elevation-z24{box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12)}.mat-theme-loaded-marker{display:none}.mat-autocomplete-panel{background:#fff;color:rgba(0,0,0,.87)}.mat-autocomplete-panel:not([class*=mat-elevation-z]){box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.mat-autocomplete-panel .mat-option.mat-selected:not(.mat-active):not(:hover){background:#fff}.mat-autocomplete-panel .mat-option.mat-selected:not(.mat-active):not(:hover):not(.mat-option-disabled){color:rgba(0,0,0,.87)}.mat-badge-content{color:#fff;background:#673ab7}.cdk-high-contrast-active .mat-badge-content{outline:1px solid;border-radius:0}.mat-badge-accent .mat-badge-content{background:#ffd740;color:rgba(0,0,0,.87)}.mat-badge-warn .mat-badge-content{color:#fff;background:#f44336}.mat-badge{position:relative}.mat-badge-hidden .mat-badge-content{display:none}.mat-badge-disabled .mat-badge-content{background:#b9b9b9;color:rgba(0,0,0,.38)}.mat-badge-content{position:absolute;text-align:center;display:inline-block;border-radius:50%;transition:transform .2s ease-in-out;transform:scale(.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;pointer-events:none}.mat-badge-content._mat-animation-noopable,.ng-animate-disabled .mat-badge-content{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:16px;height:16px;line-height:16px}.mat-badge-small.mat-badge-above .mat-badge-content{top:-8px}.mat-badge-small.mat-badge-below .mat-badge-content{bottom:-8px}.mat-badge-small.mat-badge-before .mat-badge-content{left:-16px}[dir=rtl] .mat-badge-small.mat-badge-before .mat-badge-content{left:auto;right:-16px}.mat-badge-small.mat-badge-after .mat-badge-content{right:-16px}[dir=rtl] .mat-badge-small.mat-badge-after .mat-badge-content{right:auto;left:-16px}.mat-badge-small.mat-badge-overlap.mat-badge-before .mat-badge-content{left:-8px}[dir=rtl] .mat-badge-small.mat-badge-overlap.mat-badge-before .mat-badge-content{left:auto;right:-8px}.mat-badge-small.mat-badge-overlap.mat-badge-after .mat-badge-content{right:-8px}[dir=rtl] .mat-badge-small.mat-badge-overlap.mat-badge-after .mat-badge-content{right:auto;left:-8px}.mat-badge-medium .mat-badge-content{width:22px;height:22px;line-height:22px}.mat-badge-medium.mat-badge-above .mat-badge-content{top:-11px}.mat-badge-medium.mat-badge-below .mat-badge-content{bottom:-11px}.mat-badge-medium.mat-badge-before .mat-badge-content{left:-22px}[dir=rtl] .mat-badge-medium.mat-badge-before .mat-badge-content{left:auto;right:-22px}.mat-badge-medium.mat-badge-after .mat-badge-content{right:-22px}[dir=rtl] .mat-badge-medium.mat-badge-after .mat-badge-content{right:auto;left:-22px}.mat-badge-medium.mat-badge-overlap.mat-badge-before .mat-badge-content{left:-11px}[dir=rtl] .mat-badge-medium.mat-badge-overlap.mat-badge-before .mat-badge-content{left:auto;right:-11px}.mat-badge-medium.mat-badge-overlap.mat-badge-after .mat-badge-content{right:-11px}[dir=rtl] .mat-badge-medium.mat-badge-overlap.mat-badge-after .mat-badge-content{right:auto;left:-11px}.mat-badge-large .mat-badge-content{width:28px;height:28px;line-height:28px}.mat-badge-large.mat-badge-above .mat-badge-content{top:-14px}.mat-badge-large.mat-badge-below .mat-badge-content{bottom:-14px}.mat-badge-large.mat-badge-before .mat-badge-content{left:-28px}[dir=rtl] .mat-badge-large.mat-badge-before .mat-badge-content{left:auto;right:-28px}.mat-badge-large.mat-badge-after .mat-badge-content{right:-28px}[dir=rtl] .mat-badge-large.mat-badge-after .mat-badge-content{right:auto;left:-28px}.mat-badge-large.mat-badge-overlap.mat-badge-before .mat-badge-content{left:-14px}[dir=rtl] .mat-badge-large.mat-badge-overlap.mat-badge-before .mat-badge-content{left:auto;right:-14px}.mat-badge-large.mat-badge-overlap.mat-badge-after .mat-badge-content{right:-14px}[dir=rtl] .mat-badge-large.mat-badge-overlap.mat-badge-after .mat-badge-content{right:auto;left:-14px}.mat-bottom-sheet-container{box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12);background:#fff;color:rgba(0,0,0,.87)}.mat-button,.mat-icon-button,.mat-stroked-button{color:inherit;background:transparent}.mat-button.mat-primary,.mat-icon-button.mat-primary,.mat-stroked-button.mat-primary{color:#673ab7}.mat-button.mat-accent,.mat-icon-button.mat-accent,.mat-stroked-button.mat-accent{color:#ffd740}.mat-button.mat-warn,.mat-icon-button.mat-warn,.mat-stroked-button.mat-warn{color:#f44336}.mat-button.mat-accent.mat-button-disabled,.mat-button.mat-button-disabled.mat-button-disabled,.mat-button.mat-primary.mat-button-disabled,.mat-button.mat-warn.mat-button-disabled,.mat-icon-button.mat-accent.mat-button-disabled,.mat-icon-button.mat-button-disabled.mat-button-disabled,.mat-icon-button.mat-primary.mat-button-disabled,.mat-icon-button.mat-warn.mat-button-disabled,.mat-stroked-button.mat-accent.mat-button-disabled,.mat-stroked-button.mat-button-disabled.mat-button-disabled,.mat-stroked-button.mat-primary.mat-button-disabled,.mat-stroked-button.mat-warn.mat-button-disabled{color:rgba(0,0,0,.26)}.mat-button.mat-primary .mat-button-focus-overlay,.mat-icon-button.mat-primary .mat-button-focus-overlay,.mat-stroked-button.mat-primary .mat-button-focus-overlay{background-color:#673ab7}.mat-button.mat-accent .mat-button-focus-overlay,.mat-icon-button.mat-accent .mat-button-focus-overlay,.mat-stroked-button.mat-accent .mat-button-focus-overlay{background-color:#ffd740}.mat-button.mat-warn .mat-button-focus-overlay,.mat-icon-button.mat-warn .mat-button-focus-overlay,.mat-stroked-button.mat-warn .mat-button-focus-overlay{background-color:#f44336}.mat-button.mat-button-disabled .mat-button-focus-overlay,.mat-icon-button.mat-button-disabled .mat-button-focus-overlay,.mat-stroked-button.mat-button-disabled .mat-button-focus-overlay{background-color:initial}.mat-button .mat-ripple-element,.mat-icon-button .mat-ripple-element,.mat-stroked-button .mat-ripple-element{opacity:.1;background-color:currentColor}.mat-button-focus-overlay{background:#000}.mat-stroked-button:not(.mat-button-disabled){border-color:rgba(0,0,0,.12)}.mat-fab,.mat-flat-button,.mat-mini-fab,.mat-raised-button{color:rgba(0,0,0,.87);background-color:#fff}.mat-fab.mat-primary,.mat-flat-button.mat-primary,.mat-mini-fab.mat-primary,.mat-raised-button.mat-primary{color:#fff}.mat-fab.mat-accent,.mat-flat-button.mat-accent,.mat-mini-fab.mat-accent,.mat-raised-button.mat-accent{color:rgba(0,0,0,.87)}.mat-fab.mat-warn,.mat-flat-button.mat-warn,.mat-mini-fab.mat-warn,.mat-raised-button.mat-warn{color:#fff}.mat-fab.mat-accent.mat-button-disabled,.mat-fab.mat-button-disabled.mat-button-disabled,.mat-fab.mat-primary.mat-button-disabled,.mat-fab.mat-warn.mat-button-disabled,.mat-flat-button.mat-accent.mat-button-disabled,.mat-flat-button.mat-button-disabled.mat-button-disabled,.mat-flat-button.mat-primary.mat-button-disabled,.mat-flat-button.mat-warn.mat-button-disabled,.mat-mini-fab.mat-accent.mat-button-disabled,.mat-mini-fab.mat-button-disabled.mat-button-disabled,.mat-mini-fab.mat-primary.mat-button-disabled,.mat-mini-fab.mat-warn.mat-button-disabled,.mat-raised-button.mat-accent.mat-button-disabled,.mat-raised-button.mat-button-disabled.mat-button-disabled,.mat-raised-button.mat-primary.mat-button-disabled,.mat-raised-button.mat-warn.mat-button-disabled{color:rgba(0,0,0,.26)}.mat-fab.mat-primary,.mat-flat-button.mat-primary,.mat-mini-fab.mat-primary,.mat-raised-button.mat-primary{background-color:#673ab7}.mat-fab.mat-accent,.mat-flat-button.mat-accent,.mat-mini-fab.mat-accent,.mat-raised-button.mat-accent{background-color:#ffd740}.mat-fab.mat-warn,.mat-flat-button.mat-warn,.mat-mini-fab.mat-warn,.mat-raised-button.mat-warn{background-color:#f44336}.mat-fab.mat-accent.mat-button-disabled,.mat-fab.mat-button-disabled.mat-button-disabled,.mat-fab.mat-primary.mat-button-disabled,.mat-fab.mat-warn.mat-button-disabled,.mat-flat-button.mat-accent.mat-button-disabled,.mat-flat-button.mat-button-disabled.mat-button-disabled,.mat-flat-button.mat-primary.mat-button-disabled,.mat-flat-button.mat-warn.mat-button-disabled,.mat-mini-fab.mat-accent.mat-button-disabled,.mat-mini-fab.mat-button-disabled.mat-button-disabled,.mat-mini-fab.mat-primary.mat-button-disabled,.mat-mini-fab.mat-warn.mat-button-disabled,.mat-raised-button.mat-accent.mat-button-disabled,.mat-raised-button.mat-button-disabled.mat-button-disabled,.mat-raised-button.mat-primary.mat-button-disabled,.mat-raised-button.mat-warn.mat-button-disabled{background-color:rgba(0,0,0,.12)}.mat-fab.mat-primary .mat-ripple-element,.mat-flat-button.mat-primary .mat-ripple-element,.mat-mini-fab.mat-primary .mat-ripple-element,.mat-raised-button.mat-primary .mat-ripple-element{background-color:hsla(0,0%,100%,.1)}.mat-fab.mat-accent .mat-ripple-element,.mat-flat-button.mat-accent .mat-ripple-element,.mat-mini-fab.mat-accent .mat-ripple-element,.mat-raised-button.mat-accent .mat-ripple-element{background-color:rgba(0,0,0,.1)}.mat-fab.mat-warn .mat-ripple-element,.mat-flat-button.mat-warn .mat-ripple-element,.mat-mini-fab.mat-warn .mat-ripple-element,.mat-raised-button.mat-warn .mat-ripple-element{background-color:hsla(0,0%,100%,.1)}.mat-flat-button:not([class*=mat-elevation-z]),.mat-stroked-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-raised-button:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-raised-button:not(.mat-button-disabled):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-raised-button.mat-button-disabled:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-fab:not([class*=mat-elevation-z]),.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-fab:not(.mat-button-disabled):active:not([class*=mat-elevation-z]),.mat-mini-fab:not(.mat-button-disabled):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab.mat-button-disabled:not([class*=mat-elevation-z]),.mat-mini-fab.mat-button-disabled:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-button-toggle-group,.mat-button-toggle-standalone{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{box-shadow:none}.mat-button-toggle{color:rgba(0,0,0,.38)}.mat-button-toggle .mat-button-toggle-focus-overlay{background-color:rgba(0,0,0,.12)}.mat-button-toggle-appearance-standard{color:rgba(0,0,0,.87);background:#fff}.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{background-color:#000}.mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle{border-left:1px solid rgba(0,0,0,.12)}[dir=rtl] .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle{border-left:none;border-right:1px solid rgba(0,0,0,.12)}.mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical .mat-button-toggle+.mat-button-toggle{border-left:none;border-right:none;border-top:1px solid rgba(0,0,0,.12)}.mat-button-toggle-checked{background-color:#e0e0e0;color:rgba(0,0,0,.54)}.mat-button-toggle-checked.mat-button-toggle-appearance-standard{color:rgba(0,0,0,.87)}.mat-button-toggle-disabled{color:rgba(0,0,0,.26);background-color:#eee}.mat-button-toggle-disabled.mat-button-toggle-appearance-standard{background:#fff}.mat-button-toggle-disabled.mat-button-toggle-checked{background-color:#bdbdbd}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border:1px solid rgba(0,0,0,.12)}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px}.mat-card{background:#fff;color:rgba(0,0,0,.87)}.mat-card:not([class*=mat-elevation-z]){box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}.mat-card.mat-card-flat:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-card-subtitle{color:rgba(0,0,0,.54)}.mat-checkbox-frame{border-color:rgba(0,0,0,.54)}.mat-checkbox-checkmark{fill:#fafafa}.mat-checkbox-checkmark-path{stroke:#fafafa!important}.mat-checkbox-mixedmark{background-color:#fafafa}.mat-checkbox-checked.mat-primary .mat-checkbox-background,.mat-checkbox-indeterminate.mat-primary .mat-checkbox-background{background-color:#673ab7}.mat-checkbox-checked.mat-accent .mat-checkbox-background,.mat-checkbox-indeterminate.mat-accent .mat-checkbox-background{background-color:#ffd740}.mat-checkbox-checked.mat-warn .mat-checkbox-background,.mat-checkbox-indeterminate.mat-warn .mat-checkbox-background{background-color:#f44336}.mat-checkbox-disabled.mat-checkbox-checked .mat-checkbox-background,.mat-checkbox-disabled.mat-checkbox-indeterminate .mat-checkbox-background{background-color:#b0b0b0}.mat-checkbox-disabled:not(.mat-checkbox-checked) .mat-checkbox-frame{border-color:#b0b0b0}.mat-checkbox-disabled .mat-checkbox-label{color:rgba(0,0,0,.54)}.mat-checkbox .mat-ripple-element{background-color:#000}.mat-checkbox-checked:not(.mat-checkbox-disabled).mat-primary .mat-ripple-element,.mat-checkbox:active:not(.mat-checkbox-disabled).mat-primary .mat-ripple-element{background:#673ab7}.mat-checkbox-checked:not(.mat-checkbox-disabled).mat-accent .mat-ripple-element,.mat-checkbox:active:not(.mat-checkbox-disabled).mat-accent .mat-ripple-element{background:#ffd740}.mat-checkbox-checked:not(.mat-checkbox-disabled).mat-warn .mat-ripple-element,.mat-checkbox:active:not(.mat-checkbox-disabled).mat-warn .mat-ripple-element{background:#f44336}.mat-chip.mat-standard-chip{background-color:#e0e0e0;color:rgba(0,0,0,.87)}.mat-chip.mat-standard-chip .mat-chip-remove{color:rgba(0,0,0,.87);opacity:.4}.mat-chip.mat-standard-chip:not(.mat-chip-disabled):active{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}.mat-chip.mat-standard-chip:not(.mat-chip-disabled) .mat-chip-remove:hover{opacity:.54}.mat-chip.mat-standard-chip.mat-chip-disabled{opacity:.4}.mat-chip.mat-standard-chip:after{background:#000}.mat-chip.mat-standard-chip.mat-chip-selected.mat-primary{background-color:#673ab7;color:#fff}.mat-chip.mat-standard-chip.mat-chip-selected.mat-primary .mat-chip-remove{color:#fff;opacity:.4}.mat-chip.mat-standard-chip.mat-chip-selected.mat-primary .mat-ripple-element{background-color:hsla(0,0%,100%,.1)}.mat-chip.mat-standard-chip.mat-chip-selected.mat-warn{background-color:#f44336;color:#fff}.mat-chip.mat-standard-chip.mat-chip-selected.mat-warn .mat-chip-remove{color:#fff;opacity:.4}.mat-chip.mat-standard-chip.mat-chip-selected.mat-warn .mat-ripple-element{background-color:hsla(0,0%,100%,.1)}.mat-chip.mat-standard-chip.mat-chip-selected.mat-accent{background-color:#ffd740;color:rgba(0,0,0,.87)}.mat-chip.mat-standard-chip.mat-chip-selected.mat-accent .mat-chip-remove{color:rgba(0,0,0,.87);opacity:.4}.mat-chip.mat-standard-chip.mat-chip-selected.mat-accent .mat-ripple-element{background-color:rgba(0,0,0,.1)}.mat-table{background:#fff}.mat-table-sticky,.mat-table tbody,.mat-table tfoot,.mat-table thead,[mat-footer-row],[mat-header-row],[mat-row],mat-footer-row,mat-header-row,mat-row{background:inherit}mat-footer-row,mat-header-row,mat-row,td.mat-cell,td.mat-footer-cell,th.mat-header-cell{border-bottom-color:rgba(0,0,0,.12)}.mat-header-cell{color:rgba(0,0,0,.54)}.mat-cell,.mat-footer-cell{color:rgba(0,0,0,.87)}.mat-calendar-arrow{border-top-color:rgba(0,0,0,.54)}.mat-datepicker-content .mat-calendar-next-button,.mat-datepicker-content .mat-calendar-previous-button,.mat-datepicker-toggle{color:rgba(0,0,0,.54)}.mat-calendar-table-header{color:rgba(0,0,0,.38)}.mat-calendar-table-header-divider:after{background:rgba(0,0,0,.12)}.mat-calendar-body-label{color:rgba(0,0,0,.54)}.mat-calendar-body-cell-content,.mat-date-range-input-separator{color:rgba(0,0,0,.87);border-color:transparent}.mat-calendar-body-disabled>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical),.mat-form-field-disabled .mat-date-range-input-separator{color:rgba(0,0,0,.38)}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical),.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:rgba(0,0,0,.04)}.mat-calendar-body-in-preview{color:rgba(0,0,0,.24)}.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:rgba(0,0,0,.38)}.mat-calendar-body-disabled>.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:rgba(0,0,0,.18)}.mat-calendar-body-in-range:before{background:rgba(103,58,183,.2)}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range:before{background:rgba(249,171,0,.2)}.mat-calendar-body-comparison-bridge-start:before,[dir=rtl] .mat-calendar-body-comparison-bridge-end:before{background:linear-gradient(90deg,rgba(103,58,183,.2) 50%,rgba(249,171,0,.2) 0)}.mat-calendar-body-comparison-bridge-end:before,[dir=rtl] .mat-calendar-body-comparison-bridge-start:before{background:linear-gradient(270deg,rgba(103,58,183,.2) 50%,rgba(249,171,0,.2) 0)}.mat-calendar-body-in-comparison-range.mat-calendar-body-in-range:after,.mat-calendar-body-in-range>.mat-calendar-body-comparison-identical{background:#a8dab5}.mat-calendar-body-comparison-identical.mat-calendar-body-selected,.mat-calendar-body-in-comparison-range>.mat-calendar-body-selected{background:#46a35e}.mat-calendar-body-selected{background-color:#673ab7;color:#fff}.mat-calendar-body-disabled>.mat-calendar-body-selected{background-color:rgba(103,58,183,.4)}.mat-calendar-body-today.mat-calendar-body-selected{box-shadow:inset 0 0 0 1px #fff}.mat-datepicker-content{box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12);background-color:#fff;color:rgba(0,0,0,.87)}.mat-datepicker-content.mat-accent .mat-calendar-body-in-range:before{background:rgba(255,215,64,.2)}.mat-datepicker-content.mat-accent .mat-calendar-body-comparison-identical,.mat-datepicker-content.mat-accent .mat-calendar-body-in-comparison-range:before{background:rgba(249,171,0,.2)}.mat-datepicker-content.mat-accent .mat-calendar-body-comparison-bridge-start:before,.mat-datepicker-content.mat-accent [dir=rtl] .mat-calendar-body-comparison-bridge-end:before{background:linear-gradient(90deg,rgba(255,215,64,.2) 50%,rgba(249,171,0,.2) 0)}.mat-datepicker-content.mat-accent .mat-calendar-body-comparison-bridge-end:before,.mat-datepicker-content.mat-accent [dir=rtl] .mat-calendar-body-comparison-bridge-start:before{background:linear-gradient(270deg,rgba(255,215,64,.2) 50%,rgba(249,171,0,.2) 0)}.mat-datepicker-content.mat-accent .mat-calendar-body-in-comparison-range.mat-calendar-body-in-range:after,.mat-datepicker-content.mat-accent .mat-calendar-body-in-range>.mat-calendar-body-comparison-identical{background:#a8dab5}.mat-datepicker-content.mat-accent .mat-calendar-body-comparison-identical.mat-calendar-body-selected,.mat-datepicker-content.mat-accent .mat-calendar-body-in-comparison-range>.mat-calendar-body-selected{background:#46a35e}.mat-datepicker-content.mat-accent .mat-calendar-body-selected{background-color:#ffd740;color:rgba(0,0,0,.87)}.mat-datepicker-content.mat-accent .mat-calendar-body-disabled>.mat-calendar-body-selected{background-color:rgba(255,215,64,.4)}.mat-datepicker-content.mat-accent .mat-calendar-body-today.mat-calendar-body-selected{box-shadow:inset 0 0 0 1px rgba(0,0,0,.87)}.mat-datepicker-content.mat-warn .mat-calendar-body-in-range:before{background:rgba(244,67,54,.2)}.mat-datepicker-content.mat-warn .mat-calendar-body-comparison-identical,.mat-datepicker-content.mat-warn .mat-calendar-body-in-comparison-range:before{background:rgba(249,171,0,.2)}.mat-datepicker-content.mat-warn .mat-calendar-body-comparison-bridge-start:before,.mat-datepicker-content.mat-warn [dir=rtl] .mat-calendar-body-comparison-bridge-end:before{background:linear-gradient(90deg,rgba(244,67,54,.2) 50%,rgba(249,171,0,.2) 0)}.mat-datepicker-content.mat-warn .mat-calendar-body-comparison-bridge-end:before,.mat-datepicker-content.mat-warn [dir=rtl] .mat-calendar-body-comparison-bridge-start:before{background:linear-gradient(270deg,rgba(244,67,54,.2) 50%,rgba(249,171,0,.2) 0)}.mat-datepicker-content.mat-warn .mat-calendar-body-in-comparison-range.mat-calendar-body-in-range:after,.mat-datepicker-content.mat-warn .mat-calendar-body-in-range>.mat-calendar-body-comparison-identical{background:#a8dab5}.mat-datepicker-content.mat-warn .mat-calendar-body-comparison-identical.mat-calendar-body-selected,.mat-datepicker-content.mat-warn .mat-calendar-body-in-comparison-range>.mat-calendar-body-selected{background:#46a35e}.mat-datepicker-content.mat-warn .mat-calendar-body-selected{background-color:#f44336;color:#fff}.mat-datepicker-content.mat-warn .mat-calendar-body-disabled>.mat-calendar-body-selected{background-color:rgba(244,67,54,.4)}.mat-datepicker-content.mat-warn .mat-calendar-body-today.mat-calendar-body-selected{box-shadow:inset 0 0 0 1px #fff}.mat-datepicker-content-touch{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-datepicker-toggle-active{color:#673ab7}.mat-datepicker-toggle-active.mat-accent{color:#ffd740}.mat-datepicker-toggle-active.mat-warn{color:#f44336}.mat-date-range-input-inner[disabled]{color:rgba(0,0,0,.38)}.mat-dialog-container{box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);background:#fff;color:rgba(0,0,0,.87)}.mat-divider{border-top-color:rgba(0,0,0,.12)}.mat-divider-vertical{border-right-color:rgba(0,0,0,.12)}.mat-expansion-panel{background:#fff;color:rgba(0,0,0,.87)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-action-row{border-top-color:rgba(0,0,0,.12)}.mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true]),.mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true]),.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true]){background:rgba(0,0,0,.04)}@media(hover:none){.mat-expansion-panel:not(.mat-expanded):not([aria-disabled=true]) .mat-expansion-panel-header:hover{background:#fff}}.mat-expansion-panel-header-title{color:rgba(0,0,0,.87)}.mat-expansion-indicator:after,.mat-expansion-panel-header-description{color:rgba(0,0,0,.54)}.mat-expansion-panel-header[aria-disabled=true]{color:rgba(0,0,0,.26)}.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description,.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title{color:inherit}.mat-expansion-panel-header{height:48px}.mat-expansion-panel-header.mat-expanded{height:64px}.mat-form-field-label,.mat-hint{color:rgba(0,0,0,.6)}.mat-form-field.mat-focused .mat-form-field-label{color:#673ab7}.mat-form-field.mat-focused .mat-form-field-label.mat-accent{color:#ffd740}.mat-form-field.mat-focused .mat-form-field-label.mat-warn{color:#f44336}.mat-focused .mat-form-field-required-marker{color:#ffd740}.mat-form-field-ripple{background-color:rgba(0,0,0,.87)}.mat-form-field.mat-focused .mat-form-field-ripple{background-color:#673ab7}.mat-form-field.mat-focused .mat-form-field-ripple.mat-accent{background-color:#ffd740}.mat-form-field.mat-focused .mat-form-field-ripple.mat-warn{background-color:#f44336}.mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid) .mat-form-field-infix:after{color:#673ab7}.mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid).mat-accent .mat-form-field-infix:after{color:#ffd740}.mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid).mat-warn .mat-form-field-infix:after,.mat-form-field.mat-form-field-invalid .mat-form-field-label,.mat-form-field.mat-form-field-invalid .mat-form-field-label.mat-accent,.mat-form-field.mat-form-field-invalid .mat-form-field-label .mat-form-field-required-marker{color:#f44336}.mat-form-field.mat-form-field-invalid .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple.mat-accent{background-color:#f44336}.mat-error{color:#f44336}.mat-form-field-appearance-legacy .mat-form-field-label,.mat-form-field-appearance-legacy .mat-hint{color:rgba(0,0,0,.54)}.mat-form-field-appearance-legacy .mat-form-field-underline{background-color:rgba(0,0,0,.42)}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-image:linear-gradient(90deg,rgba(0,0,0,.42) 0,rgba(0,0,0,.42) 33%,transparent 0);background-size:4px 100%;background-repeat:repeat-x}.mat-form-field-appearance-standard .mat-form-field-underline{background-color:rgba(0,0,0,.42)}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-image:linear-gradient(90deg,rgba(0,0,0,.42) 0,rgba(0,0,0,.42) 33%,transparent 0);background-size:4px 100%;background-repeat:repeat-x}.mat-form-field-appearance-fill .mat-form-field-flex{background-color:rgba(0,0,0,.04)}.mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-flex{background-color:rgba(0,0,0,.02)}.mat-form-field-appearance-fill .mat-form-field-underline:before{background-color:rgba(0,0,0,.42)}.mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-label{color:rgba(0,0,0,.38)}.mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-underline:before{background-color:initial}.mat-form-field-appearance-outline .mat-form-field-outline{color:rgba(0,0,0,.12)}.mat-form-field-appearance-outline .mat-form-field-outline-thick{color:rgba(0,0,0,.87)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick{color:#673ab7}.mat-form-field-appearance-outline.mat-focused.mat-accent .mat-form-field-outline-thick{color:#ffd740}.mat-form-field-appearance-outline.mat-focused.mat-warn .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid.mat-form-field-invalid .mat-form-field-outline-thick{color:#f44336}.mat-form-field-appearance-outline.mat-form-field-disabled .mat-form-field-label{color:rgba(0,0,0,.38)}.mat-form-field-appearance-outline.mat-form-field-disabled .mat-form-field-outline{color:rgba(0,0,0,.06)}.mat-icon.mat-primary{color:#673ab7}.mat-icon.mat-accent{color:#ffd740}.mat-icon.mat-warn{color:#f44336}.mat-form-field-type-mat-native-select .mat-form-field-infix:after{color:rgba(0,0,0,.54)}.mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix:after,.mat-input-element:disabled{color:rgba(0,0,0,.38)}.mat-input-element{caret-color:#673ab7}.mat-input-element::placeholder{color:rgba(0,0,0,.42)}.mat-input-element::-moz-placeholder{color:rgba(0,0,0,.42)}.mat-input-element::-webkit-input-placeholder{color:rgba(0,0,0,.42)}.mat-input-element:-ms-input-placeholder{color:rgba(0,0,0,.42)}.mat-form-field.mat-accent .mat-input-element{caret-color:#ffd740}.mat-form-field-invalid .mat-input-element,.mat-form-field.mat-warn .mat-input-element{caret-color:#f44336}.mat-form-field-type-mat-native-select.mat-form-field-invalid .mat-form-field-infix:after{color:#f44336}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{color:rgba(0,0,0,.87)}.mat-list-base .mat-subheader{color:rgba(0,0,0,.54)}.mat-list-item-disabled{background-color:#eee}.mat-action-list .mat-list-item:focus,.mat-action-list .mat-list-item:hover,.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover{background:rgba(0,0,0,.04)}.mat-list-single-selected-option,.mat-list-single-selected-option:focus,.mat-list-single-selected-option:hover{background:rgba(0,0,0,.12)}.mat-menu-panel{background:#fff}.mat-menu-panel:not([class*=mat-elevation-z]){box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.mat-menu-item{background:transparent;color:rgba(0,0,0,.87)}.mat-menu-item[disabled],.mat-menu-item[disabled] .mat-icon-no-color,.mat-menu-item[disabled]:after{color:rgba(0,0,0,.38)}.mat-menu-item-submenu-trigger:after,.mat-menu-item .mat-icon-no-color{color:rgba(0,0,0,.54)}.mat-menu-item-highlighted:not([disabled]),.mat-menu-item.cdk-keyboard-focused:not([disabled]),.mat-menu-item.cdk-program-focused:not([disabled]),.mat-menu-item:hover:not([disabled]){background:rgba(0,0,0,.04)}.mat-paginator{background:#fff}.mat-paginator,.mat-paginator-page-size .mat-select-trigger{color:rgba(0,0,0,.54)}.mat-paginator-decrement,.mat-paginator-increment{border-top:2px solid rgba(0,0,0,.54);border-right:2px solid rgba(0,0,0,.54)}.mat-paginator-first,.mat-paginator-last{border-top:2px solid rgba(0,0,0,.54)}.mat-icon-button[disabled] .mat-paginator-decrement,.mat-icon-button[disabled] .mat-paginator-first,.mat-icon-button[disabled] .mat-paginator-increment,.mat-icon-button[disabled] .mat-paginator-last{border-color:rgba(0,0,0,.38)}.mat-paginator-container{min-height:56px}.mat-progress-bar-background{fill:#d1c4e9}.mat-progress-bar-buffer{background-color:#d1c4e9}.mat-progress-bar-fill:after{background-color:#673ab7}.mat-progress-bar.mat-accent .mat-progress-bar-background{fill:#ffe57f}.mat-progress-bar.mat-accent .mat-progress-bar-buffer{background-color:#ffe57f}.mat-progress-bar.mat-accent .mat-progress-bar-fill:after{background-color:#ffd740}.mat-progress-bar.mat-warn .mat-progress-bar-background{fill:#ffcdd2}.mat-progress-bar.mat-warn .mat-progress-bar-buffer{background-color:#ffcdd2}.mat-progress-bar.mat-warn .mat-progress-bar-fill:after{background-color:#f44336}.mat-progress-spinner circle,.mat-spinner circle{stroke:#673ab7}.mat-progress-spinner.mat-accent circle,.mat-spinner.mat-accent circle{stroke:#ffd740}.mat-progress-spinner.mat-warn circle,.mat-spinner.mat-warn circle{stroke:#f44336}.mat-radio-outer-circle{border-color:rgba(0,0,0,.54)}.mat-radio-button.mat-primary.mat-radio-checked .mat-radio-outer-circle{border-color:#673ab7}.mat-radio-button.mat-primary.mat-radio-checked .mat-radio-persistent-ripple,.mat-radio-button.mat-primary .mat-radio-inner-circle,.mat-radio-button.mat-primary .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),.mat-radio-button.mat-primary:active .mat-radio-persistent-ripple{background-color:#673ab7}.mat-radio-button.mat-accent.mat-radio-checked .mat-radio-outer-circle{border-color:#ffd740}.mat-radio-button.mat-accent.mat-radio-checked .mat-radio-persistent-ripple,.mat-radio-button.mat-accent .mat-radio-inner-circle,.mat-radio-button.mat-accent .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),.mat-radio-button.mat-accent:active .mat-radio-persistent-ripple{background-color:#ffd740}.mat-radio-button.mat-warn.mat-radio-checked .mat-radio-outer-circle{border-color:#f44336}.mat-radio-button.mat-warn.mat-radio-checked .mat-radio-persistent-ripple,.mat-radio-button.mat-warn .mat-radio-inner-circle,.mat-radio-button.mat-warn .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),.mat-radio-button.mat-warn:active .mat-radio-persistent-ripple{background-color:#f44336}.mat-radio-button.mat-radio-disabled.mat-radio-checked .mat-radio-outer-circle,.mat-radio-button.mat-radio-disabled .mat-radio-outer-circle{border-color:rgba(0,0,0,.38)}.mat-radio-button.mat-radio-disabled .mat-radio-inner-circle,.mat-radio-button.mat-radio-disabled .mat-radio-ripple .mat-ripple-element{background-color:rgba(0,0,0,.38)}.mat-radio-button.mat-radio-disabled .mat-radio-label-content{color:rgba(0,0,0,.38)}.mat-radio-button .mat-ripple-element{background-color:#000}.mat-select-value{color:rgba(0,0,0,.87)}.mat-select-placeholder{color:rgba(0,0,0,.42)}.mat-select-disabled .mat-select-value{color:rgba(0,0,0,.38)}.mat-select-arrow{color:rgba(0,0,0,.54)}.mat-select-panel{background:#fff}.mat-select-panel:not([class*=mat-elevation-z]){box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.mat-select-panel .mat-option.mat-selected:not(.mat-option-multiple){background:rgba(0,0,0,.12)}.mat-form-field.mat-focused.mat-primary .mat-select-arrow{color:#673ab7}.mat-form-field.mat-focused.mat-accent .mat-select-arrow{color:#ffd740}.mat-form-field.mat-focused.mat-warn .mat-select-arrow,.mat-form-field .mat-select.mat-select-invalid .mat-select-arrow{color:#f44336}.mat-form-field .mat-select.mat-select-disabled .mat-select-arrow{color:rgba(0,0,0,.38)}.mat-drawer-container{background-color:#fafafa;color:rgba(0,0,0,.87)}.mat-drawer{color:rgba(0,0,0,.87)}.mat-drawer,.mat-drawer.mat-drawer-push{background-color:#fff}.mat-drawer:not(.mat-drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.mat-drawer-side{border-right:1px solid rgba(0,0,0,.12)}.mat-drawer-side.mat-drawer-end,[dir=rtl] .mat-drawer-side{border-left:1px solid rgba(0,0,0,.12);border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-left:none;border-right:1px solid rgba(0,0,0,.12)}.mat-drawer-backdrop.mat-drawer-shown{background-color:rgba(0,0,0,.6)}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background-color:#ffd740}.mat-slide-toggle.mat-checked .mat-slide-toggle-bar{background-color:rgba(255,215,64,.54)}.mat-slide-toggle.mat-checked .mat-ripple-element{background-color:#ffd740}.mat-slide-toggle.mat-primary.mat-checked .mat-slide-toggle-thumb{background-color:#673ab7}.mat-slide-toggle.mat-primary.mat-checked .mat-slide-toggle-bar{background-color:rgba(103,58,183,.54)}.mat-slide-toggle.mat-primary.mat-checked .mat-ripple-element{background-color:#673ab7}.mat-slide-toggle.mat-warn.mat-checked .mat-slide-toggle-thumb{background-color:#f44336}.mat-slide-toggle.mat-warn.mat-checked .mat-slide-toggle-bar{background-color:rgba(244,67,54,.54)}.mat-slide-toggle.mat-warn.mat-checked .mat-ripple-element{background-color:#f44336}.mat-slide-toggle:not(.mat-checked) .mat-ripple-element{background-color:#000}.mat-slide-toggle-thumb{box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12);background-color:#fafafa}.mat-slide-toggle-bar{background-color:rgba(0,0,0,.38)}.mat-slider-track-background{background-color:rgba(0,0,0,.26)}.mat-primary .mat-slider-thumb,.mat-primary .mat-slider-thumb-label,.mat-primary .mat-slider-track-fill{background-color:#673ab7}.mat-primary .mat-slider-thumb-label-text{color:#fff}.mat-primary .mat-slider-focus-ring{background-color:rgba(103,58,183,.2)}.mat-accent .mat-slider-thumb,.mat-accent .mat-slider-thumb-label,.mat-accent .mat-slider-track-fill{background-color:#ffd740}.mat-accent .mat-slider-thumb-label-text{color:rgba(0,0,0,.87)}.mat-accent .mat-slider-focus-ring{background-color:rgba(255,215,64,.2)}.mat-warn .mat-slider-thumb,.mat-warn .mat-slider-thumb-label,.mat-warn .mat-slider-track-fill{background-color:#f44336}.mat-warn .mat-slider-thumb-label-text{color:#fff}.mat-warn .mat-slider-focus-ring{background-color:rgba(244,67,54,.2)}.cdk-focused .mat-slider-track-background,.mat-slider:hover .mat-slider-track-background{background-color:rgba(0,0,0,.38)}.mat-slider-disabled .mat-slider-thumb,.mat-slider-disabled .mat-slider-track-background,.mat-slider-disabled .mat-slider-track-fill,.mat-slider-disabled:hover .mat-slider-track-background{background-color:rgba(0,0,0,.26)}.mat-slider-min-value .mat-slider-focus-ring{background-color:rgba(0,0,0,.12)}.mat-slider-min-value.mat-slider-thumb-label-showing .mat-slider-thumb,.mat-slider-min-value.mat-slider-thumb-label-showing .mat-slider-thumb-label{background-color:rgba(0,0,0,.87)}.mat-slider-min-value.mat-slider-thumb-label-showing.cdk-focused .mat-slider-thumb,.mat-slider-min-value.mat-slider-thumb-label-showing.cdk-focused .mat-slider-thumb-label{background-color:rgba(0,0,0,.26)}.mat-slider-min-value:not(.mat-slider-thumb-label-showing) .mat-slider-thumb{border-color:rgba(0,0,0,.26);background-color:initial}.mat-slider-min-value:not(.mat-slider-thumb-label-showing).cdk-focused .mat-slider-thumb,.mat-slider-min-value:not(.mat-slider-thumb-label-showing):hover .mat-slider-thumb{border-color:rgba(0,0,0,.38)}.mat-slider-min-value:not(.mat-slider-thumb-label-showing).cdk-focused.mat-slider-disabled .mat-slider-thumb,.mat-slider-min-value:not(.mat-slider-thumb-label-showing):hover.mat-slider-disabled .mat-slider-thumb{border-color:rgba(0,0,0,.26)}.mat-slider-has-ticks .mat-slider-wrapper:after{border-color:rgba(0,0,0,.7)}.mat-slider-horizontal .mat-slider-ticks{background-image:repeating-linear-gradient(90deg,rgba(0,0,0,.7),rgba(0,0,0,.7) 2px,transparent 0,transparent);background-image:-moz-repeating-linear-gradient(.0001deg,rgba(0,0,0,.7),rgba(0,0,0,.7) 2px,transparent 0,transparent)}.mat-slider-vertical .mat-slider-ticks{background-image:repeating-linear-gradient(180deg,rgba(0,0,0,.7),rgba(0,0,0,.7) 2px,transparent 0,transparent)}.mat-step-header.cdk-keyboard-focused,.mat-step-header.cdk-program-focused,.mat-step-header:hover{background-color:rgba(0,0,0,.04)}@media(hover:none){.mat-step-header:hover{background:none}}.mat-step-header .mat-step-label,.mat-step-header .mat-step-optional{color:rgba(0,0,0,.54)}.mat-step-header .mat-step-icon{background-color:rgba(0,0,0,.54);color:#fff}.mat-step-header .mat-step-icon-selected,.mat-step-header .mat-step-icon-state-done,.mat-step-header .mat-step-icon-state-edit{background-color:#673ab7;color:#fff}.mat-step-header.mat-accent .mat-step-icon{color:rgba(0,0,0,.87)}.mat-step-header.mat-accent .mat-step-icon-selected,.mat-step-header.mat-accent .mat-step-icon-state-done,.mat-step-header.mat-accent .mat-step-icon-state-edit{background-color:#ffd740;color:rgba(0,0,0,.87)}.mat-step-header.mat-warn .mat-step-icon{color:#fff}.mat-step-header.mat-warn .mat-step-icon-selected,.mat-step-header.mat-warn .mat-step-icon-state-done,.mat-step-header.mat-warn .mat-step-icon-state-edit{background-color:#f44336;color:#fff}.mat-step-header .mat-step-icon-state-error{background-color:initial;color:#f44336}.mat-step-header .mat-step-label.mat-step-label-active{color:rgba(0,0,0,.87)}.mat-step-header .mat-step-label.mat-step-label-error{color:#f44336}.mat-stepper-horizontal,.mat-stepper-vertical{background-color:#fff}.mat-stepper-vertical-line:before{border-left-color:rgba(0,0,0,.12)}.mat-horizontal-stepper-header:after,.mat-horizontal-stepper-header:before,.mat-stepper-horizontal-line{border-top-color:rgba(0,0,0,.12)}.mat-horizontal-stepper-header{height:72px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header,.mat-vertical-stepper-header{padding:24px}.mat-stepper-vertical-line:before{top:-16px;bottom:-16px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:after,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:before,.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{top:36px}.mat-sort-header-arrow{color:#757575}.mat-tab-header,.mat-tab-nav-bar{border-bottom:1px solid rgba(0,0,0,.12)}.mat-tab-group-inverted-header .mat-tab-header,.mat-tab-group-inverted-header .mat-tab-nav-bar{border-top:1px solid rgba(0,0,0,.12);border-bottom:none}.mat-tab-label,.mat-tab-link{color:rgba(0,0,0,.87)}.mat-tab-label.mat-tab-disabled,.mat-tab-link.mat-tab-disabled{color:rgba(0,0,0,.38)}.mat-tab-header-pagination-chevron{border-color:rgba(0,0,0,.87)}.mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron{border-color:rgba(0,0,0,.38)}.mat-tab-group[class*=mat-background-] .mat-tab-header,.mat-tab-nav-bar[class*=mat-background-]{border-bottom:none;border-top:none}.mat-tab-group.mat-primary .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-primary .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-group.mat-primary .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-primary .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-primary .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-primary .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-primary .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-primary .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled){background-color:rgba(209,196,233,.3)}.mat-tab-group.mat-primary .mat-ink-bar,.mat-tab-nav-bar.mat-primary .mat-ink-bar{background-color:#673ab7}.mat-tab-group.mat-primary.mat-background-primary .mat-ink-bar,.mat-tab-nav-bar.mat-primary.mat-background-primary .mat-ink-bar{background-color:#fff}.mat-tab-group.mat-accent .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-accent .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-group.mat-accent .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-accent .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-accent .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-accent .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-accent .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-accent .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled){background-color:rgba(255,229,127,.3)}.mat-tab-group.mat-accent .mat-ink-bar,.mat-tab-nav-bar.mat-accent .mat-ink-bar{background-color:#ffd740}.mat-tab-group.mat-accent.mat-background-accent .mat-ink-bar,.mat-tab-nav-bar.mat-accent.mat-background-accent .mat-ink-bar{background-color:rgba(0,0,0,.87)}.mat-tab-group.mat-warn .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-warn .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-group.mat-warn .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-warn .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-warn .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-warn .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-warn .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-warn .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled){background-color:rgba(255,205,210,.3)}.mat-tab-group.mat-warn .mat-ink-bar,.mat-tab-nav-bar.mat-warn .mat-ink-bar{background-color:#f44336}.mat-tab-group.mat-warn.mat-background-warn .mat-ink-bar,.mat-tab-nav-bar.mat-warn.mat-background-warn .mat-ink-bar{background-color:#fff}.mat-tab-group.mat-background-primary .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-background-primary .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-group.mat-background-primary .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-background-primary .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-primary .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-primary .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-primary .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-primary .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled){background-color:rgba(209,196,233,.3)}.mat-tab-group.mat-background-primary .mat-tab-header,.mat-tab-group.mat-background-primary .mat-tab-header-pagination,.mat-tab-group.mat-background-primary .mat-tab-links,.mat-tab-nav-bar.mat-background-primary .mat-tab-header,.mat-tab-nav-bar.mat-background-primary .mat-tab-header-pagination,.mat-tab-nav-bar.mat-background-primary .mat-tab-links{background-color:#673ab7}.mat-tab-group.mat-background-primary .mat-tab-label,.mat-tab-group.mat-background-primary .mat-tab-link,.mat-tab-nav-bar.mat-background-primary .mat-tab-label,.mat-tab-nav-bar.mat-background-primary .mat-tab-link{color:#fff}.mat-tab-group.mat-background-primary .mat-tab-label.mat-tab-disabled,.mat-tab-group.mat-background-primary .mat-tab-link.mat-tab-disabled,.mat-tab-nav-bar.mat-background-primary .mat-tab-label.mat-tab-disabled,.mat-tab-nav-bar.mat-background-primary .mat-tab-link.mat-tab-disabled{color:hsla(0,0%,100%,.4)}.mat-tab-group.mat-background-primary .mat-tab-header-pagination-chevron,.mat-tab-nav-bar.mat-background-primary .mat-tab-header-pagination-chevron{border-color:#fff}.mat-tab-group.mat-background-primary .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron,.mat-tab-nav-bar.mat-background-primary .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron{border-color:hsla(0,0%,100%,.4)}.mat-tab-group.mat-background-primary .mat-ripple-element,.mat-tab-nav-bar.mat-background-primary .mat-ripple-element{background-color:hsla(0,0%,100%,.12)}.mat-tab-group.mat-background-accent .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-background-accent .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-group.mat-background-accent .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-background-accent .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-accent .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-accent .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-accent .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-accent .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled){background-color:rgba(255,229,127,.3)}.mat-tab-group.mat-background-accent .mat-tab-header,.mat-tab-group.mat-background-accent .mat-tab-header-pagination,.mat-tab-group.mat-background-accent .mat-tab-links,.mat-tab-nav-bar.mat-background-accent .mat-tab-header,.mat-tab-nav-bar.mat-background-accent .mat-tab-header-pagination,.mat-tab-nav-bar.mat-background-accent .mat-tab-links{background-color:#ffd740}.mat-tab-group.mat-background-accent .mat-tab-label,.mat-tab-group.mat-background-accent .mat-tab-link,.mat-tab-nav-bar.mat-background-accent .mat-tab-label,.mat-tab-nav-bar.mat-background-accent .mat-tab-link{color:rgba(0,0,0,.87)}.mat-tab-group.mat-background-accent .mat-tab-label.mat-tab-disabled,.mat-tab-group.mat-background-accent .mat-tab-link.mat-tab-disabled,.mat-tab-nav-bar.mat-background-accent .mat-tab-label.mat-tab-disabled,.mat-tab-nav-bar.mat-background-accent .mat-tab-link.mat-tab-disabled{color:rgba(0,0,0,.4)}.mat-tab-group.mat-background-accent .mat-tab-header-pagination-chevron,.mat-tab-nav-bar.mat-background-accent .mat-tab-header-pagination-chevron{border-color:rgba(0,0,0,.87)}.mat-tab-group.mat-background-accent .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron,.mat-tab-nav-bar.mat-background-accent .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron{border-color:rgba(0,0,0,.4)}.mat-tab-group.mat-background-accent .mat-ripple-element,.mat-tab-nav-bar.mat-background-accent .mat-ripple-element{background-color:rgba(0,0,0,.12)}.mat-tab-group.mat-background-warn .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-background-warn .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-group.mat-background-warn .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-group.mat-background-warn .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-warn .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-warn .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-warn .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),.mat-tab-nav-bar.mat-background-warn .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled){background-color:rgba(255,205,210,.3)}.mat-tab-group.mat-background-warn .mat-tab-header,.mat-tab-group.mat-background-warn .mat-tab-header-pagination,.mat-tab-group.mat-background-warn .mat-tab-links,.mat-tab-nav-bar.mat-background-warn .mat-tab-header,.mat-tab-nav-bar.mat-background-warn .mat-tab-header-pagination,.mat-tab-nav-bar.mat-background-warn .mat-tab-links{background-color:#f44336}.mat-tab-group.mat-background-warn .mat-tab-label,.mat-tab-group.mat-background-warn .mat-tab-link,.mat-tab-nav-bar.mat-background-warn .mat-tab-label,.mat-tab-nav-bar.mat-background-warn .mat-tab-link{color:#fff}.mat-tab-group.mat-background-warn .mat-tab-label.mat-tab-disabled,.mat-tab-group.mat-background-warn .mat-tab-link.mat-tab-disabled,.mat-tab-nav-bar.mat-background-warn .mat-tab-label.mat-tab-disabled,.mat-tab-nav-bar.mat-background-warn .mat-tab-link.mat-tab-disabled{color:hsla(0,0%,100%,.4)}.mat-tab-group.mat-background-warn .mat-tab-header-pagination-chevron,.mat-tab-nav-bar.mat-background-warn .mat-tab-header-pagination-chevron{border-color:#fff}.mat-tab-group.mat-background-warn .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron,.mat-tab-nav-bar.mat-background-warn .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron{border-color:hsla(0,0%,100%,.4)}.mat-tab-group.mat-background-warn .mat-ripple-element,.mat-tab-nav-bar.mat-background-warn .mat-ripple-element{background-color:hsla(0,0%,100%,.12)}.mat-toolbar{background:#f5f5f5;color:rgba(0,0,0,.87)}.mat-toolbar.mat-primary{background:#673ab7;color:#fff}.mat-toolbar.mat-accent{background:#ffd740;color:rgba(0,0,0,.87)}.mat-toolbar.mat-warn{background:#f44336;color:#fff}.mat-toolbar .mat-focused .mat-form-field-ripple,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-form-field-underline{background-color:currentColor}.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-select-value{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media(max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}.mat-tooltip{background:rgba(97,97,97,.9)}.mat-tree{background:#fff}.mat-nested-tree-node,.mat-tree-node{color:rgba(0,0,0,.87)}.mat-tree-node{min-height:48px}.mat-snack-bar-container{color:hsla(0,0%,100%,.7);background:#323232;box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-simple-snackbar-action{color:#ffd740}body,html{margin:0;padding:0}body{background-image:url(/assets/background.jpg);background-position:50%;background-size:cover;background-repeat:no-repeat;min-height:100vh;font-family:Alegreya,serif;font-size:20px}.app-header{justify-content:space-between;position:fixed;top:0;left:0;right:0;z-index:2;box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.login-wrapper{height:100%}.techorama{text-decoration:none;color:#fff}.box{position:relative;top:0;opacity:1;float:left;padding:60px 50px 40px;width:100%;background:#fff;border-radius:10px;transform:scale(1);-webkit-transform:scale(1);-ms-transform:scale(1);z-index:5;max-width:330px;margin-right:25px}.box.back{top:-20px;opacity:.8}.box.back,.box:before{transform:scale(.95);-webkit-transform:scale(.95);-ms-transform:scale(.95);z-index:-1}.box:before{content:\"\";width:100%;height:30px;border-radius:10px;position:absolute;top:-10px;background:hsla(0,0%,100%,.6);left:0}.login-wrapper .example-form{min-width:100%;max-width:300px;width:100%}.login-wrapper .btn-block,.login-wrapper .example-full-width{width:100%}.login-wrapper .mat-card{padding:40px 70px 50px}.login-wrapper .mat-stroked-button{border:1px solid;line-height:54px;background:#fff7fa}.login-wrapper .mat-form-field-appearance-legacy .mat-form-field-infix{padding:.8375em 0}.mat-card{font-family:Alegreya,serif}.mat-card-content{font-size:20px}.mat-card-avatar{height:70px;width:70px;border-radius:50%;flex-shrink:0;object-fit:cover;border-style:dashed;border-width:thin}.actions button{margin-right:15px}.heart{fill:red;position:relative;top:5px;width:50px;animation:pulse 1s ease infinite}@keyframes pulse{0%{transform:scale(1)}50%{transform:scale(1.3)}to{transform:scale(1)}}.matchmade{text-align:center}body,html{height:100%}body{margin:0;font-family:Roboto,Helvetica Neue,sans-serif}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 71769,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:21:36.591Z",
        "time": 92.62800000215066,
        "timings": {
          "blocked": 3.803000000888249,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.52,
          "wait": 17.482999999763443,
          "receive": 70.82200000149896,
          "_blocked_queueing": 2.485000000888249
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/",
          "lineNumber": 16
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/runtime.0e49e2b53282f40c8925.js",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/runtime.0e49e2b53282f40c8925.js"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "no-cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "script"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:21:37 GMT"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "content-length",
              "value": "1485"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:52 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db8-5cd\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1485,
            "mimeType": "application/javascript",
            "text": "!function(e){function r(r){for(var n,l,f=r[0],i=r[1],p=r[2],c=0,s=[];c<f.length;c++)l=f[c],Object.prototype.hasOwnProperty.call(o,l)&&o[l]&&s.push(o[l][0]),o[l]=0;for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n]);for(a&&a(r);s.length;)s.shift()();return u.push.apply(u,p||[]),t()}function t(){for(var e,r=0;r<u.length;r++){for(var t=u[r],n=!0,f=1;f<t.length;f++)0!==o[t[f]]&&(n=!1);n&&(u.splice(r--,1),e=l(l.s=t[0]))}return e}var n={},o={0:0},u=[];function l(r){if(n[r])return n[r].exports;var t=n[r]={i:r,l:!1,exports:{}};return e[r].call(t.exports,t,t.exports,l),t.l=!0,t.exports}l.m=e,l.c=n,l.d=function(e,r,t){l.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},l.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},l.t=function(e,r){if(1&r&&(e=l(e)),8&r)return e;if(4&r&&\"object\"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(l.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:e}),2&r&&\"string\"!=typeof e)for(var n in e)l.d(t,n,(function(r){return e[r]}).bind(null,n));return t},l.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(r,\"a\",r),r},l.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},l.p=\"\";var f=window.webpackJsonp=window.webpackJsonp||[],i=f.push.bind(f);f.push=r,f=f.slice();for(var p=0;p<f.length;p++)r(f[p]);var a=i;t()}([]);"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 1675,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:21:36.592Z",
        "time": 94.17000000030384,
        "timings": {
          "blocked": 4.0109999981236175,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.40700000000000003,
          "wait": 89.01800000107754,
          "receive": 0.7340000011026859,
          "_blocked_queueing": 2.003999998123618
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/",
          "lineNumber": 16
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/polyfills.8c151b8375e767ff858f.js"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "no-cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "script"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:21:37 GMT"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "content-length",
              "value": "36864"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:52 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db8-9000\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 36864,
            "mimeType": "application/javascript",
            "text": "(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{1:function(e,t,n){e.exports=n(\"hN/g\")},\"hN/g\":function(e,t,n){\"use strict\";n.r(t),n(\"pDpN\")},pDpN:function(e,t,n){var o,r;void 0===(r=\"function\"==typeof(o=function(){\"use strict\";!function(e){const t=e.performance;function n(e){t&&t.mark&&t.mark(e)}function o(e,n){t&&t.measure&&t.measure(e,n)}n(\"Zone\");const r=e.__Zone_symbol_prefix||\"__zone_symbol__\";function s(e){return r+e}const i=!0===e[s(\"forceDuplicateZoneCheck\")];if(e.Zone){if(i||\"function\"!=typeof e.Zone.__symbol__)throw new Error(\"Zone already loaded.\");return e.Zone}class a{constructor(e,t){this._parent=e,this._name=t?t.name||\"unnamed\":\"<root>\",this._properties=t&&t.properties||{},this._zoneDelegate=new l(this,this._parent&&this._parent._zoneDelegate,t)}static assertZonePatched(){if(e.Promise!==C.ZoneAwarePromise)throw new Error(\"Zone.js has detected that ZoneAwarePromise `(window|global).Promise` has been overwritten.\\nMost likely cause is that a Promise polyfill has been loaded after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. If you must load one, do so before loading zone.js.)\")}static get root(){let e=a.current;for(;e.parent;)e=e.parent;return e}static get current(){return z.zone}static get currentTask(){return j}static __load_patch(t,r){if(C.hasOwnProperty(t)){if(i)throw Error(\"Already loaded patch: \"+t)}else if(!e[\"__Zone_disable_\"+t]){const s=\"Zone:\"+t;n(s),C[t]=r(e,a,O),o(s,s)}}get parent(){return this._parent}get name(){return this._name}get(e){const t=this.getZoneWith(e);if(t)return t._properties[e]}getZoneWith(e){let t=this;for(;t;){if(t._properties.hasOwnProperty(e))return t;t=t._parent}return null}fork(e){if(!e)throw new Error(\"ZoneSpec required!\");return this._zoneDelegate.fork(this,e)}wrap(e,t){if(\"function\"!=typeof e)throw new Error(\"Expecting function got: \"+e);const n=this._zoneDelegate.intercept(this,e,t),o=this;return function(){return o.runGuarded(n,this,arguments,t)}}run(e,t,n,o){z={parent:z,zone:this};try{return this._zoneDelegate.invoke(this,e,t,n,o)}finally{z=z.parent}}runGuarded(e,t=null,n,o){z={parent:z,zone:this};try{try{return this._zoneDelegate.invoke(this,e,t,n,o)}catch(r){if(this._zoneDelegate.handleError(this,r))throw r}}finally{z=z.parent}}runTask(e,t,n){if(e.zone!=this)throw new Error(\"A task can only be run in the zone of creation! (Creation: \"+(e.zone||y).name+\"; Execution: \"+this.name+\")\");if(e.state===v&&(e.type===P||e.type===D))return;const o=e.state!=E;o&&e._transitionTo(E,T),e.runCount++;const r=j;j=e,z={parent:z,zone:this};try{e.type==D&&e.data&&!e.data.isPeriodic&&(e.cancelFn=void 0);try{return this._zoneDelegate.invokeTask(this,e,t,n)}catch(s){if(this._zoneDelegate.handleError(this,s))throw s}}finally{e.state!==v&&e.state!==Z&&(e.type==P||e.data&&e.data.isPeriodic?o&&e._transitionTo(T,E):(e.runCount=0,this._updateTaskCount(e,-1),o&&e._transitionTo(v,E,v))),z=z.parent,j=r}}scheduleTask(e){if(e.zone&&e.zone!==this){let t=this;for(;t;){if(t===e.zone)throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${e.zone.name}`);t=t.parent}}e._transitionTo(b,v);const t=[];e._zoneDelegates=t,e._zone=this;try{e=this._zoneDelegate.scheduleTask(this,e)}catch(n){throw e._transitionTo(Z,b,v),this._zoneDelegate.handleError(this,n),n}return e._zoneDelegates===t&&this._updateTaskCount(e,1),e.state==b&&e._transitionTo(T,b),e}scheduleMicroTask(e,t,n,o){return this.scheduleTask(new u(S,e,t,n,o,void 0))}scheduleMacroTask(e,t,n,o,r){return this.scheduleTask(new u(D,e,t,n,o,r))}scheduleEventTask(e,t,n,o,r){return this.scheduleTask(new u(P,e,t,n,o,r))}cancelTask(e){if(e.zone!=this)throw new Error(\"A task can only be cancelled in the zone of creation! (Creation: \"+(e.zone||y).name+\"; Execution: \"+this.name+\")\");e._transitionTo(w,T,E);try{this._zoneDelegate.cancelTask(this,e)}catch(t){throw e._transitionTo(Z,w),this._zoneDelegate.handleError(this,t),t}return this._updateTaskCount(e,-1),e._transitionTo(v,w),e.runCount=0,e}_updateTaskCount(e,t){const n=e._zoneDelegates;-1==t&&(e._zoneDelegates=null);for(let o=0;o<n.length;o++)n[o]._updateTaskCount(e.type,t)}}a.__symbol__=s;const c={name:\"\",onHasTask:(e,t,n,o)=>e.hasTask(n,o),onScheduleTask:(e,t,n,o)=>e.scheduleTask(n,o),onInvokeTask:(e,t,n,o,r,s)=>e.invokeTask(n,o,r,s),onCancelTask:(e,t,n,o)=>e.cancelTask(n,o)};class l{constructor(e,t,n){this._taskCounts={microTask:0,macroTask:0,eventTask:0},this.zone=e,this._parentDelegate=t,this._forkZS=n&&(n&&n.onFork?n:t._forkZS),this._forkDlgt=n&&(n.onFork?t:t._forkDlgt),this._forkCurrZone=n&&(n.onFork?this.zone:t._forkCurrZone),this._interceptZS=n&&(n.onIntercept?n:t._interceptZS),this._interceptDlgt=n&&(n.onIntercept?t:t._interceptDlgt),this._interceptCurrZone=n&&(n.onIntercept?this.zone:t._interceptCurrZone),this._invokeZS=n&&(n.onInvoke?n:t._invokeZS),this._invokeDlgt=n&&(n.onInvoke?t:t._invokeDlgt),this._invokeCurrZone=n&&(n.onInvoke?this.zone:t._invokeCurrZone),this._handleErrorZS=n&&(n.onHandleError?n:t._handleErrorZS),this._handleErrorDlgt=n&&(n.onHandleError?t:t._handleErrorDlgt),this._handleErrorCurrZone=n&&(n.onHandleError?this.zone:t._handleErrorCurrZone),this._scheduleTaskZS=n&&(n.onScheduleTask?n:t._scheduleTaskZS),this._scheduleTaskDlgt=n&&(n.onScheduleTask?t:t._scheduleTaskDlgt),this._scheduleTaskCurrZone=n&&(n.onScheduleTask?this.zone:t._scheduleTaskCurrZone),this._invokeTaskZS=n&&(n.onInvokeTask?n:t._invokeTaskZS),this._invokeTaskDlgt=n&&(n.onInvokeTask?t:t._invokeTaskDlgt),this._invokeTaskCurrZone=n&&(n.onInvokeTask?this.zone:t._invokeTaskCurrZone),this._cancelTaskZS=n&&(n.onCancelTask?n:t._cancelTaskZS),this._cancelTaskDlgt=n&&(n.onCancelTask?t:t._cancelTaskDlgt),this._cancelTaskCurrZone=n&&(n.onCancelTask?this.zone:t._cancelTaskCurrZone),this._hasTaskZS=null,this._hasTaskDlgt=null,this._hasTaskDlgtOwner=null,this._hasTaskCurrZone=null;const o=n&&n.onHasTask;(o||t&&t._hasTaskZS)&&(this._hasTaskZS=o?n:c,this._hasTaskDlgt=t,this._hasTaskDlgtOwner=this,this._hasTaskCurrZone=e,n.onScheduleTask||(this._scheduleTaskZS=c,this._scheduleTaskDlgt=t,this._scheduleTaskCurrZone=this.zone),n.onInvokeTask||(this._invokeTaskZS=c,this._invokeTaskDlgt=t,this._invokeTaskCurrZone=this.zone),n.onCancelTask||(this._cancelTaskZS=c,this._cancelTaskDlgt=t,this._cancelTaskCurrZone=this.zone))}fork(e,t){return this._forkZS?this._forkZS.onFork(this._forkDlgt,this.zone,e,t):new a(e,t)}intercept(e,t,n){return this._interceptZS?this._interceptZS.onIntercept(this._interceptDlgt,this._interceptCurrZone,e,t,n):t}invoke(e,t,n,o,r){return this._invokeZS?this._invokeZS.onInvoke(this._invokeDlgt,this._invokeCurrZone,e,t,n,o,r):t.apply(n,o)}handleError(e,t){return!this._handleErrorZS||this._handleErrorZS.onHandleError(this._handleErrorDlgt,this._handleErrorCurrZone,e,t)}scheduleTask(e,t){let n=t;if(this._scheduleTaskZS)this._hasTaskZS&&n._zoneDelegates.push(this._hasTaskDlgtOwner),n=this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt,this._scheduleTaskCurrZone,e,t),n||(n=t);else if(t.scheduleFn)t.scheduleFn(t);else{if(t.type!=S)throw new Error(\"Task is missing scheduleFn.\");k(t)}return n}invokeTask(e,t,n,o){return this._invokeTaskZS?this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt,this._invokeTaskCurrZone,e,t,n,o):t.callback.apply(n,o)}cancelTask(e,t){let n;if(this._cancelTaskZS)n=this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt,this._cancelTaskCurrZone,e,t);else{if(!t.cancelFn)throw Error(\"Task is not cancelable\");n=t.cancelFn(t)}return n}hasTask(e,t){try{this._hasTaskZS&&this._hasTaskZS.onHasTask(this._hasTaskDlgt,this._hasTaskCurrZone,e,t)}catch(n){this.handleError(e,n)}}_updateTaskCount(e,t){const n=this._taskCounts,o=n[e],r=n[e]=o+t;if(r<0)throw new Error(\"More tasks executed then were scheduled.\");0!=o&&0!=r||this.hasTask(this.zone,{microTask:n.microTask>0,macroTask:n.macroTask>0,eventTask:n.eventTask>0,change:e})}}class u{constructor(t,n,o,r,s,i){if(this._zone=null,this.runCount=0,this._zoneDelegates=null,this._state=\"notScheduled\",this.type=t,this.source=n,this.data=r,this.scheduleFn=s,this.cancelFn=i,!o)throw new Error(\"callback is not defined\");this.callback=o;const a=this;this.invoke=t===P&&r&&r.useG?u.invokeTask:function(){return u.invokeTask.call(e,a,this,arguments)}}static invokeTask(e,t,n){e||(e=this),I++;try{return e.runCount++,e.zone.runTask(e,t,n)}finally{1==I&&m(),I--}}get zone(){return this._zone}get state(){return this._state}cancelScheduleRequest(){this._transitionTo(v,b)}_transitionTo(e,t,n){if(this._state!==t&&this._state!==n)throw new Error(`${this.type} '${this.source}': can not transition to '${e}', expecting state '${t}'${n?\" or '\"+n+\"'\":\"\"}, was '${this._state}'.`);this._state=e,e==v&&(this._zoneDelegates=null)}toString(){return this.data&&void 0!==this.data.handleId?this.data.handleId.toString():Object.prototype.toString.call(this)}toJSON(){return{type:this.type,state:this.state,source:this.source,zone:this.zone.name,runCount:this.runCount}}}const h=s(\"setTimeout\"),p=s(\"Promise\"),f=s(\"then\");let d,g=[],_=!1;function k(t){if(0===I&&0===g.length)if(d||e[p]&&(d=e[p].resolve(0)),d){let e=d[f];e||(e=d.then),e.call(d,m)}else e[h](m,0);t&&g.push(t)}function m(){if(!_){for(_=!0;g.length;){const t=g;g=[];for(let n=0;n<t.length;n++){const o=t[n];try{o.zone.runTask(o,null,null)}catch(e){O.onUnhandledError(e)}}}O.microtaskDrainDone(),_=!1}}const y={name:\"NO ZONE\"},v=\"notScheduled\",b=\"scheduling\",T=\"scheduled\",E=\"running\",w=\"canceling\",Z=\"unknown\",S=\"microTask\",D=\"macroTask\",P=\"eventTask\",C={},O={symbol:s,currentZoneFrame:()=>z,onUnhandledError:N,microtaskDrainDone:N,scheduleMicroTask:k,showUncaughtError:()=>!a[s(\"ignoreConsoleErrorUncaughtError\")],patchEventTarget:()=>[],patchOnProperties:N,patchMethod:()=>N,bindArguments:()=>[],patchThen:()=>N,patchMacroTask:()=>N,setNativePromise:e=>{e&&\"function\"==typeof e.resolve&&(d=e.resolve(0))},patchEventPrototype:()=>N,isIEOrEdge:()=>!1,getGlobalObjects:()=>{},ObjectDefineProperty:()=>N,ObjectGetOwnPropertyDescriptor:()=>{},ObjectCreate:()=>{},ArraySlice:()=>[],patchClass:()=>N,wrapWithCurrentZone:()=>N,filterProperties:()=>[],attachOriginToPatched:()=>N,_redefineProperty:()=>N,patchCallbacks:()=>N};let z={parent:null,zone:new a(null,null)},j=null,I=0;function N(){}o(\"Zone\",\"Zone\"),e.Zone=a}(\"undefined\"!=typeof window&&window||\"undefined\"!=typeof self&&self||global),Zone.__load_patch(\"ZoneAwarePromise\",(e,t,n)=>{const o=Object.getOwnPropertyDescriptor,r=Object.defineProperty,s=n.symbol,i=[],a=!0===e[s(\"DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION\")],c=s(\"Promise\"),l=s(\"then\");n.onUnhandledError=e=>{if(n.showUncaughtError()){const t=e&&e.rejection;t?console.error(\"Unhandled Promise rejection:\",t instanceof Error?t.message:t,\"; Zone:\",e.zone.name,\"; Task:\",e.task&&e.task.source,\"; Value:\",t,t instanceof Error?t.stack:void 0):console.error(e)}},n.microtaskDrainDone=()=>{for(;i.length;){const t=i.shift();try{t.zone.runGuarded(()=>{throw t})}catch(e){h(e)}}};const u=s(\"unhandledPromiseRejectionHandler\");function h(e){n.onUnhandledError(e);try{const n=t[u];\"function\"==typeof n&&n.call(this,e)}catch(o){}}function p(e){return e&&e.then}function f(e){return e}function d(e){return O.reject(e)}const g=s(\"state\"),_=s(\"value\"),k=s(\"finally\"),m=s(\"parentPromiseValue\"),y=s(\"parentPromiseState\"),v=null,b=!0,T=!1;function E(e,t){return n=>{try{Z(e,t,n)}catch(o){Z(e,!1,o)}}}const w=s(\"currentTaskTrace\");function Z(e,o,s){const c=function(){let e=!1;return function(t){return function(){e||(e=!0,t.apply(null,arguments))}}}();if(e===s)throw new TypeError(\"Promise resolved with itself\");if(e[g]===v){let h=null;try{\"object\"!=typeof s&&\"function\"!=typeof s||(h=s&&s.then)}catch(u){return c(()=>{Z(e,!1,u)})(),e}if(o!==T&&s instanceof O&&s.hasOwnProperty(g)&&s.hasOwnProperty(_)&&s[g]!==v)D(s),Z(e,s[g],s[_]);else if(o!==T&&\"function\"==typeof h)try{h.call(s,c(E(e,o)),c(E(e,!1)))}catch(u){c(()=>{Z(e,!1,u)})()}else{e[g]=o;const c=e[_];if(e[_]=s,e[k]===k&&o===b&&(e[g]=e[y],e[_]=e[m]),o===T&&s instanceof Error){const e=t.currentTask&&t.currentTask.data&&t.currentTask.data.__creationTrace__;e&&r(s,w,{configurable:!0,enumerable:!1,writable:!0,value:e})}for(let t=0;t<c.length;)P(e,c[t++],c[t++],c[t++],c[t++]);if(0==c.length&&o==T){e[g]=0;let o=s;if(!a)try{throw new Error(\"Uncaught (in promise): \"+((l=s)&&l.toString===Object.prototype.toString?(l.constructor&&l.constructor.name||\"\")+\": \"+JSON.stringify(l):l?l.toString():Object.prototype.toString.call(l))+(s&&s.stack?\"\\n\"+s.stack:\"\"))}catch(u){o=u}o.rejection=s,o.promise=e,o.zone=t.current,o.task=t.currentTask,i.push(o),n.scheduleMicroTask()}}}var l;return e}const S=s(\"rejectionHandledHandler\");function D(e){if(0===e[g]){try{const n=t[S];n&&\"function\"==typeof n&&n.call(this,{rejection:e[_],promise:e})}catch(n){}e[g]=T;for(let t=0;t<i.length;t++)e===i[t].promise&&i.splice(t,1)}}function P(e,t,n,o,r){D(e);const s=e[g],i=s?\"function\"==typeof o?o:f:\"function\"==typeof r?r:d;t.scheduleMicroTask(\"Promise.then\",()=>{try{const o=e[_],r=!!n&&k===n[k];r&&(n[m]=o,n[y]=s);const a=t.run(i,void 0,r&&i!==d&&i!==f?[]:[o]);Z(n,!0,a)}catch(o){Z(n,!1,o)}},n)}const C=function(){};class O{static toString(){return\"function ZoneAwarePromise() { [native code] }\"}static resolve(e){return Z(new this(null),b,e)}static reject(e){return Z(new this(null),T,e)}static race(e){let t,n,o=new this((e,o)=>{t=e,n=o});function r(e){t(e)}function s(e){n(e)}for(let i of e)p(i)||(i=this.resolve(i)),i.then(r,s);return o}static all(e){return O.allWithCallback(e)}static allSettled(e){return(this&&this.prototype instanceof O?this:O).allWithCallback(e,{thenCallback:e=>({status:\"fulfilled\",value:e}),errorCallback:e=>({status:\"rejected\",reason:e})})}static allWithCallback(e,t){let n,o,r=new this((e,t)=>{n=e,o=t}),s=2,i=0;const a=[];for(let l of e){p(l)||(l=this.resolve(l));const e=i;try{l.then(o=>{a[e]=t?t.thenCallback(o):o,s--,0===s&&n(a)},r=>{t?(a[e]=t.errorCallback(r),s--,0===s&&n(a)):o(r)})}catch(c){o(c)}s++,i++}return s-=2,0===s&&n(a),r}constructor(e){const t=this;if(!(t instanceof O))throw new Error(\"Must be an instanceof Promise.\");t[g]=v,t[_]=[];try{e&&e(E(t,b),E(t,T))}catch(n){Z(t,!1,n)}}get[Symbol.toStringTag](){return\"Promise\"}get[Symbol.species](){return O}then(e,n){let o=this.constructor[Symbol.species];o&&\"function\"==typeof o||(o=this.constructor||O);const r=new o(C),s=t.current;return this[g]==v?this[_].push(s,r,e,n):P(this,s,r,e,n),r}catch(e){return this.then(null,e)}finally(e){let n=this.constructor[Symbol.species];n&&\"function\"==typeof n||(n=O);const o=new n(C);o[k]=k;const r=t.current;return this[g]==v?this[_].push(r,o,e,e):P(this,r,o,e,e),o}}O.resolve=O.resolve,O.reject=O.reject,O.race=O.race,O.all=O.all;const z=e[c]=e.Promise,j=t.__symbol__(\"ZoneAwarePromise\");let I=o(e,\"Promise\");I&&!I.configurable||(I&&delete I.writable,I&&delete I.value,I||(I={configurable:!0,enumerable:!0}),I.get=function(){return e[j]?e[j]:e[c]},I.set=function(t){t===O?e[j]=t:(e[c]=t,t.prototype[l]||R(t),n.setNativePromise(t))},r(e,\"Promise\",I)),e.Promise=O;const N=s(\"thenPatched\");function R(e){const t=e.prototype,n=o(t,\"then\");if(n&&(!1===n.writable||!n.configurable))return;const r=t.then;t[l]=r,e.prototype.then=function(e,t){return new O((e,t)=>{r.call(this,e,t)}).then(e,t)},e[N]=!0}if(n.patchThen=R,z){R(z);const t=e.fetch;\"function\"==typeof t&&(e[n.symbol(\"fetch\")]=t,e.fetch=(x=t,function(){let e=x.apply(this,arguments);if(e instanceof O)return e;let t=e.constructor;return t[N]||R(t),e}))}var x;return Promise[t.__symbol__(\"uncaughtPromiseErrors\")]=i,O});const e=Object.getOwnPropertyDescriptor,t=Object.defineProperty,n=Object.getPrototypeOf,o=Object.create,r=Array.prototype.slice,s=\"addEventListener\",i=\"removeEventListener\",a=Zone.__symbol__(s),c=Zone.__symbol__(i),l=\"true\",u=\"false\",h=Zone.__symbol__(\"\");function p(e,t){return Zone.current.wrap(e,t)}function f(e,t,n,o,r){return Zone.current.scheduleMacroTask(e,t,n,o,r)}const d=Zone.__symbol__,g=\"undefined\"!=typeof window,_=g?window:void 0,k=g&&_||\"object\"==typeof self&&self||global,m=[null];function y(e,t){for(let n=e.length-1;n>=0;n--)\"function\"==typeof e[n]&&(e[n]=p(e[n],t+\"_\"+n));return e}function v(e){return!e||!1!==e.writable&&!(\"function\"==typeof e.get&&void 0===e.set)}const b=\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope,T=!(\"nw\"in k)&&void 0!==k.process&&\"[object process]\"==={}.toString.call(k.process),E=!T&&!b&&!(!g||!_.HTMLElement),w=void 0!==k.process&&\"[object process]\"==={}.toString.call(k.process)&&!b&&!(!g||!_.HTMLElement),Z={},S=function(e){if(!(e=e||k.event))return;let t=Z[e.type];t||(t=Z[e.type]=d(\"ON_PROPERTY\"+e.type));const n=this||e.target||k,o=n[t];let r;if(E&&n===_&&\"error\"===e.type){const t=e;r=o&&o.call(this,t.message,t.filename,t.lineno,t.colno,t.error),!0===r&&e.preventDefault()}else r=o&&o.apply(this,arguments),null==r||r||e.preventDefault();return r};function D(n,o,r){let s=e(n,o);if(!s&&r&&e(r,o)&&(s={enumerable:!0,configurable:!0}),!s||!s.configurable)return;const i=d(\"on\"+o+\"patched\");if(n.hasOwnProperty(i)&&n[i])return;delete s.writable,delete s.value;const a=s.get,c=s.set,l=o.substr(2);let u=Z[l];u||(u=Z[l]=d(\"ON_PROPERTY\"+l)),s.set=function(e){let t=this;t||n!==k||(t=k),t&&(t[u]&&t.removeEventListener(l,S),c&&c.apply(t,m),\"function\"==typeof e?(t[u]=e,t.addEventListener(l,S,!1)):t[u]=null)},s.get=function(){let e=this;if(e||n!==k||(e=k),!e)return null;const t=e[u];if(t)return t;if(a){let t=a&&a.call(this);if(t)return s.set.call(this,t),\"function\"==typeof e.removeAttribute&&e.removeAttribute(o),t}return null},t(n,o,s),n[i]=!0}function P(e,t,n){if(t)for(let o=0;o<t.length;o++)D(e,\"on\"+t[o],n);else{const t=[];for(const n in e)\"on\"==n.substr(0,2)&&t.push(n);for(let o=0;o<t.length;o++)D(e,t[o],n)}}const C=d(\"originalInstance\");function O(e){const n=k[e];if(!n)return;k[d(e)]=n,k[e]=function(){const t=y(arguments,e);switch(t.length){case 0:this[C]=new n;break;case 1:this[C]=new n(t[0]);break;case 2:this[C]=new n(t[0],t[1]);break;case 3:this[C]=new n(t[0],t[1],t[2]);break;case 4:this[C]=new n(t[0],t[1],t[2],t[3]);break;default:throw new Error(\"Arg list too long.\")}},I(k[e],n);const o=new n(function(){});let r;for(r in o)\"XMLHttpRequest\"===e&&\"responseBlob\"===r||function(n){\"function\"==typeof o[n]?k[e].prototype[n]=function(){return this[C][n].apply(this[C],arguments)}:t(k[e].prototype,n,{set:function(t){\"function\"==typeof t?(this[C][n]=p(t,e+\".\"+n),I(this[C][n],t)):this[C][n]=t},get:function(){return this[C][n]}})}(r);for(r in n)\"prototype\"!==r&&n.hasOwnProperty(r)&&(k[e][r]=n[r])}function z(t,o,r){let s=t;for(;s&&!s.hasOwnProperty(o);)s=n(s);!s&&t[o]&&(s=t);const i=d(o);let a=null;if(s&&!(a=s[i])&&(a=s[i]=s[o],v(s&&e(s,o)))){const e=r(a,i,o);s[o]=function(){return e(this,arguments)},I(s[o],a)}return a}function j(e,t,n){let o=null;function r(e){const t=e.data;return t.args[t.cbIdx]=function(){e.invoke.apply(this,arguments)},o.apply(t.target,t.args),e}o=z(e,t,e=>function(t,o){const s=n(t,o);return s.cbIdx>=0&&\"function\"==typeof o[s.cbIdx]?f(s.name,o[s.cbIdx],s,r):e.apply(t,o)})}function I(e,t){e[d(\"OriginalDelegate\")]=t}let N=!1,R=!1;function x(){try{const e=_.navigator.userAgent;if(-1!==e.indexOf(\"MSIE \")||-1!==e.indexOf(\"Trident/\"))return!0}catch(e){}return!1}function M(){if(N)return R;N=!0;try{const e=_.navigator.userAgent;-1===e.indexOf(\"MSIE \")&&-1===e.indexOf(\"Trident/\")&&-1===e.indexOf(\"Edge/\")||(R=!0)}catch(e){}return R}Zone.__load_patch(\"toString\",e=>{const t=Function.prototype.toString,n=d(\"OriginalDelegate\"),o=d(\"Promise\"),r=d(\"Error\"),s=function(){if(\"function\"==typeof this){const s=this[n];if(s)return\"function\"==typeof s?t.call(s):Object.prototype.toString.call(s);if(this===Promise){const n=e[o];if(n)return t.call(n)}if(this===Error){const n=e[r];if(n)return t.call(n)}}return t.call(this)};s[n]=t,Function.prototype.toString=s;const i=Object.prototype.toString;Object.prototype.toString=function(){return this instanceof Promise?\"[object Promise]\":i.call(this)}});let L=!1;if(\"undefined\"!=typeof window)try{const e=Object.defineProperty({},\"passive\",{get:function(){L=!0}});window.addEventListener(\"test\",e,e),window.removeEventListener(\"test\",e,e)}catch(he){L=!1}const A={useG:!0},H={},F={},G=new RegExp(\"^\"+h+\"(\\\\w+)(true|false)$\"),B=d(\"propagationStopped\");function q(e,t){const n=(t?t(e):e)+u,o=(t?t(e):e)+l,r=h+n,s=h+o;H[e]={},H[e].false=r,H[e].true=s}function W(e,t,o){const r=o&&o.add||s,a=o&&o.rm||i,c=o&&o.listeners||\"eventListeners\",p=o&&o.rmAll||\"removeAllListeners\",f=d(r),g=\".\"+r+\":\",_=function(e,t,n){if(e.isRemoved)return;const o=e.callback;\"object\"==typeof o&&o.handleEvent&&(e.callback=e=>o.handleEvent(e),e.originalDelegate=o),e.invoke(e,t,[n]);const r=e.options;r&&\"object\"==typeof r&&r.once&&t[a].call(t,n.type,e.originalDelegate?e.originalDelegate:e.callback,r)},k=function(t){if(!(t=t||e.event))return;const n=this||t.target||e,o=n[H[t.type].false];if(o)if(1===o.length)_(o[0],n,t);else{const e=o.slice();for(let o=0;o<e.length&&(!t||!0!==t[B]);o++)_(e[o],n,t)}},m=function(t){if(!(t=t||e.event))return;const n=this||t.target||e,o=n[H[t.type].true];if(o)if(1===o.length)_(o[0],n,t);else{const e=o.slice();for(let o=0;o<e.length&&(!t||!0!==t[B]);o++)_(e[o],n,t)}};function y(t,o){if(!t)return!1;let s=!0;o&&void 0!==o.useG&&(s=o.useG);const i=o&&o.vh;let _=!0;o&&void 0!==o.chkDup&&(_=o.chkDup);let y=!1;o&&void 0!==o.rt&&(y=o.rt);let v=t;for(;v&&!v.hasOwnProperty(r);)v=n(v);if(!v&&t[r]&&(v=t),!v)return!1;if(v[f])return!1;const b=o&&o.eventNameToString,E={},w=v[f]=v[r],Z=v[d(a)]=v[a],S=v[d(c)]=v[c],D=v[d(p)]=v[p];let P;function C(e,t){return!L&&\"object\"==typeof e&&e?!!e.capture:L&&t?\"boolean\"==typeof e?{capture:e,passive:!0}:e?\"object\"==typeof e&&!1!==e.passive?Object.assign(Object.assign({},e),{passive:!0}):e:{passive:!0}:e}o&&o.prepend&&(P=v[d(o.prepend)]=v[o.prepend]);const O=s?function(e){if(!E.isExisting)return w.call(E.target,E.eventName,E.capture?m:k,E.options)}:function(e){return w.call(E.target,E.eventName,e.invoke,E.options)},z=s?function(e){if(!e.isRemoved){const t=H[e.eventName];let n;t&&(n=t[e.capture?l:u]);const o=n&&e.target[n];if(o)for(let r=0;r<o.length;r++)if(o[r]===e){o.splice(r,1),e.isRemoved=!0,0===o.length&&(e.allRemoved=!0,e.target[n]=null);break}}if(e.allRemoved)return Z.call(e.target,e.eventName,e.capture?m:k,e.options)}:function(e){return Z.call(e.target,e.eventName,e.invoke,e.options)},j=o&&o.diff?o.diff:function(e,t){const n=typeof t;return\"function\"===n&&e.callback===t||\"object\"===n&&e.originalDelegate===t},N=Zone[d(\"BLACK_LISTED_EVENTS\")],R=e[d(\"PASSIVE_EVENTS\")],x=function(t,n,r,a,c=!1,h=!1){return function(){const p=this||e;let f=arguments[0];o&&o.transferEventName&&(f=o.transferEventName(f));let d=arguments[1];if(!d)return t.apply(this,arguments);if(T&&\"uncaughtException\"===f)return t.apply(this,arguments);let g=!1;if(\"function\"!=typeof d){if(!d.handleEvent)return t.apply(this,arguments);g=!0}if(i&&!i(t,d,p,arguments))return;const k=L&&!!R&&-1!==R.indexOf(f),m=C(arguments[2],k);if(N)for(let e=0;e<N.length;e++)if(f===N[e])return k?t.call(p,f,d,m):t.apply(this,arguments);const y=!!m&&(\"boolean\"==typeof m||m.capture),v=!(!m||\"object\"!=typeof m)&&m.once,w=Zone.current;let Z=H[f];Z||(q(f,b),Z=H[f]);const S=Z[y?l:u];let D,P=p[S],O=!1;if(P){if(O=!0,_)for(let e=0;e<P.length;e++)if(j(P[e],d))return}else P=p[S]=[];const z=p.constructor.name,I=F[z];I&&(D=I[f]),D||(D=z+n+(b?b(f):f)),E.options=m,v&&(E.options.once=!1),E.target=p,E.capture=y,E.eventName=f,E.isExisting=O;const x=s?A:void 0;x&&(x.taskData=E);const M=w.scheduleEventTask(D,d,x,r,a);return E.target=null,x&&(x.taskData=null),v&&(m.once=!0),(L||\"boolean\"!=typeof M.options)&&(M.options=m),M.target=p,M.capture=y,M.eventName=f,g&&(M.originalDelegate=d),h?P.unshift(M):P.push(M),c?p:void 0}};return v[r]=x(w,g,O,z,y),P&&(v.prependListener=x(P,\".prependListener:\",function(e){return P.call(E.target,E.eventName,e.invoke,E.options)},z,y,!0)),v[a]=function(){const t=this||e;let n=arguments[0];o&&o.transferEventName&&(n=o.transferEventName(n));const r=arguments[2],s=!!r&&(\"boolean\"==typeof r||r.capture),a=arguments[1];if(!a)return Z.apply(this,arguments);if(i&&!i(Z,a,t,arguments))return;const c=H[n];let p;c&&(p=c[s?l:u]);const f=p&&t[p];if(f)for(let e=0;e<f.length;e++){const o=f[e];if(j(o,a))return f.splice(e,1),o.isRemoved=!0,0===f.length&&(o.allRemoved=!0,t[p]=null,\"string\"==typeof n)&&(t[h+\"ON_PROPERTY\"+n]=null),o.zone.cancelTask(o),y?t:void 0}return Z.apply(this,arguments)},v[c]=function(){const t=this||e;let n=arguments[0];o&&o.transferEventName&&(n=o.transferEventName(n));const r=[],s=U(t,b?b(n):n);for(let e=0;e<s.length;e++){const t=s[e];r.push(t.originalDelegate?t.originalDelegate:t.callback)}return r},v[p]=function(){const t=this||e;let n=arguments[0];if(n){o&&o.transferEventName&&(n=o.transferEventName(n));const e=H[n];if(e){const o=t[e.false],r=t[e.true];if(o){const e=o.slice();for(let t=0;t<e.length;t++){const o=e[t];this[a].call(this,n,o.originalDelegate?o.originalDelegate:o.callback,o.options)}}if(r){const e=r.slice();for(let t=0;t<e.length;t++){const o=e[t];this[a].call(this,n,o.originalDelegate?o.originalDelegate:o.callback,o.options)}}}}else{const e=Object.keys(t);for(let t=0;t<e.length;t++){const n=G.exec(e[t]);let o=n&&n[1];o&&\"removeListener\"!==o&&this[p].call(this,o)}this[p].call(this,\"removeListener\")}if(y)return this},I(v[r],w),I(v[a],Z),D&&I(v[p],D),S&&I(v[c],S),!0}let v=[];for(let n=0;n<t.length;n++)v[n]=y(t[n],o);return v}function U(e,t){if(!t){const n=[];for(let o in e){const r=G.exec(o);let s=r&&r[1];if(s&&(!t||s===t)){const t=e[o];if(t)for(let e=0;e<t.length;e++)n.push(t[e])}}return n}let n=H[t];n||(q(t),n=H[t]);const o=e[n.false],r=e[n.true];return o?r?o.concat(r):o.slice():r?r.slice():[]}function V(e,t){const n=e.Event;n&&n.prototype&&t.patchMethod(n.prototype,\"stopImmediatePropagation\",e=>function(t,n){t[B]=!0,e&&e.apply(t,n)})}function $(e,t,n,o,r){const s=Zone.__symbol__(o);if(t[s])return;const i=t[s]=t[o];t[o]=function(s,a,c){return a&&a.prototype&&r.forEach(function(t){const r=`${n}.${o}::`+t,s=a.prototype;if(s.hasOwnProperty(t)){const n=e.ObjectGetOwnPropertyDescriptor(s,t);n&&n.value?(n.value=e.wrapWithCurrentZone(n.value,r),e._redefineProperty(a.prototype,t,n)):s[t]&&(s[t]=e.wrapWithCurrentZone(s[t],r))}else s[t]&&(s[t]=e.wrapWithCurrentZone(s[t],r))}),i.call(t,s,a,c)},e.attachOriginToPatched(t[o],i)}const X=[\"absolutedeviceorientation\",\"afterinput\",\"afterprint\",\"appinstalled\",\"beforeinstallprompt\",\"beforeprint\",\"beforeunload\",\"devicelight\",\"devicemotion\",\"deviceorientation\",\"deviceorientationabsolute\",\"deviceproximity\",\"hashchange\",\"languagechange\",\"message\",\"mozbeforepaint\",\"offline\",\"online\",\"paint\",\"pageshow\",\"pagehide\",\"popstate\",\"rejectionhandled\",\"storage\",\"unhandledrejection\",\"unload\",\"userproximity\",\"vrdisplayconnected\",\"vrdisplaydisconnected\",\"vrdisplaypresentchange\"],J=[\"encrypted\",\"waitingforkey\",\"msneedkey\",\"mozinterruptbegin\",\"mozinterruptend\"],Y=[\"load\"],K=[\"blur\",\"error\",\"focus\",\"load\",\"resize\",\"scroll\",\"messageerror\"],Q=[\"bounce\",\"finish\",\"start\"],ee=[\"loadstart\",\"progress\",\"abort\",\"error\",\"load\",\"progress\",\"timeout\",\"loadend\",\"readystatechange\"],te=[\"upgradeneeded\",\"complete\",\"abort\",\"success\",\"error\",\"blocked\",\"versionchange\",\"close\"],ne=[\"close\",\"error\",\"open\",\"message\"],oe=[\"error\",\"message\"],re=[\"abort\",\"animationcancel\",\"animationend\",\"animationiteration\",\"auxclick\",\"beforeinput\",\"blur\",\"cancel\",\"canplay\",\"canplaythrough\",\"change\",\"compositionstart\",\"compositionupdate\",\"compositionend\",\"cuechange\",\"click\",\"close\",\"contextmenu\",\"curechange\",\"dblclick\",\"drag\",\"dragend\",\"dragenter\",\"dragexit\",\"dragleave\",\"dragover\",\"drop\",\"durationchange\",\"emptied\",\"ended\",\"error\",\"focus\",\"focusin\",\"focusout\",\"gotpointercapture\",\"input\",\"invalid\",\"keydown\",\"keypress\",\"keyup\",\"load\",\"loadstart\",\"loadeddata\",\"loadedmetadata\",\"lostpointercapture\",\"mousedown\",\"mouseenter\",\"mouseleave\",\"mousemove\",\"mouseout\",\"mouseover\",\"mouseup\",\"mousewheel\",\"orientationchange\",\"pause\",\"play\",\"playing\",\"pointercancel\",\"pointerdown\",\"pointerenter\",\"pointerleave\",\"pointerlockchange\",\"mozpointerlockchange\",\"webkitpointerlockerchange\",\"pointerlockerror\",\"mozpointerlockerror\",\"webkitpointerlockerror\",\"pointermove\",\"pointout\",\"pointerover\",\"pointerup\",\"progress\",\"ratechange\",\"reset\",\"resize\",\"scroll\",\"seeked\",\"seeking\",\"select\",\"selectionchange\",\"selectstart\",\"show\",\"sort\",\"stalled\",\"submit\",\"suspend\",\"timeupdate\",\"volumechange\",\"touchcancel\",\"touchmove\",\"touchstart\",\"touchend\",\"transitioncancel\",\"transitionend\",\"waiting\",\"wheel\"].concat([\"webglcontextrestored\",\"webglcontextlost\",\"webglcontextcreationerror\"],[\"autocomplete\",\"autocompleteerror\"],[\"toggle\"],[\"afterscriptexecute\",\"beforescriptexecute\",\"DOMContentLoaded\",\"freeze\",\"fullscreenchange\",\"mozfullscreenchange\",\"webkitfullscreenchange\",\"msfullscreenchange\",\"fullscreenerror\",\"mozfullscreenerror\",\"webkitfullscreenerror\",\"msfullscreenerror\",\"readystatechange\",\"visibilitychange\",\"resume\"],X,[\"beforecopy\",\"beforecut\",\"beforepaste\",\"copy\",\"cut\",\"paste\",\"dragstart\",\"loadend\",\"animationstart\",\"search\",\"transitionrun\",\"transitionstart\",\"webkitanimationend\",\"webkitanimationiteration\",\"webkitanimationstart\",\"webkittransitionend\"],[\"activate\",\"afterupdate\",\"ariarequest\",\"beforeactivate\",\"beforedeactivate\",\"beforeeditfocus\",\"beforeupdate\",\"cellchange\",\"controlselect\",\"dataavailable\",\"datasetchanged\",\"datasetcomplete\",\"errorupdate\",\"filterchange\",\"layoutcomplete\",\"losecapture\",\"move\",\"moveend\",\"movestart\",\"propertychange\",\"resizeend\",\"resizestart\",\"rowenter\",\"rowexit\",\"rowsdelete\",\"rowsinserted\",\"command\",\"compassneedscalibration\",\"deactivate\",\"help\",\"mscontentzoom\",\"msmanipulationstatechanged\",\"msgesturechange\",\"msgesturedoubletap\",\"msgestureend\",\"msgesturehold\",\"msgesturestart\",\"msgesturetap\",\"msgotpointercapture\",\"msinertiastart\",\"mslostpointercapture\",\"mspointercancel\",\"mspointerdown\",\"mspointerenter\",\"mspointerhover\",\"mspointerleave\",\"mspointermove\",\"mspointerout\",\"mspointerover\",\"mspointerup\",\"pointerout\",\"mssitemodejumplistitemremoved\",\"msthumbnailclick\",\"stop\",\"storagecommit\"]);function se(e,t,n){if(!n||0===n.length)return t;const o=n.filter(t=>t.target===e);if(!o||0===o.length)return t;const r=o[0].ignoreProperties;return t.filter(e=>-1===r.indexOf(e))}function ie(e,t,n,o){e&&P(e,se(e,t,n),o)}function ae(e,t){if(T&&!w)return;if(Zone[e.symbol(\"patchEvents\")])return;const o=\"undefined\"!=typeof WebSocket,r=t.__Zone_ignore_on_properties;if(E){const e=window,t=x?[{target:e,ignoreProperties:[\"error\"]}]:[];ie(e,re.concat([\"messageerror\"]),r?r.concat(t):r,n(e)),ie(Document.prototype,re,r),void 0!==e.SVGElement&&ie(e.SVGElement.prototype,re,r),ie(Element.prototype,re,r),ie(HTMLElement.prototype,re,r),ie(HTMLMediaElement.prototype,J,r),ie(HTMLFrameSetElement.prototype,X.concat(K),r),ie(HTMLBodyElement.prototype,X.concat(K),r),ie(HTMLFrameElement.prototype,Y,r),ie(HTMLIFrameElement.prototype,Y,r);const o=e.HTMLMarqueeElement;o&&ie(o.prototype,Q,r);const s=e.Worker;s&&ie(s.prototype,oe,r)}const s=t.XMLHttpRequest;s&&ie(s.prototype,ee,r);const i=t.XMLHttpRequestEventTarget;i&&ie(i&&i.prototype,ee,r),\"undefined\"!=typeof IDBIndex&&(ie(IDBIndex.prototype,te,r),ie(IDBRequest.prototype,te,r),ie(IDBOpenDBRequest.prototype,te,r),ie(IDBDatabase.prototype,te,r),ie(IDBTransaction.prototype,te,r),ie(IDBCursor.prototype,te,r)),o&&ie(WebSocket.prototype,ne,r)}Zone.__load_patch(\"util\",(n,a,c)=>{c.patchOnProperties=P,c.patchMethod=z,c.bindArguments=y,c.patchMacroTask=j;const f=a.__symbol__(\"BLACK_LISTED_EVENTS\"),d=a.__symbol__(\"UNPATCHED_EVENTS\");n[d]&&(n[f]=n[d]),n[f]&&(a[f]=a[d]=n[f]),c.patchEventPrototype=V,c.patchEventTarget=W,c.isIEOrEdge=M,c.ObjectDefineProperty=t,c.ObjectGetOwnPropertyDescriptor=e,c.ObjectCreate=o,c.ArraySlice=r,c.patchClass=O,c.wrapWithCurrentZone=p,c.filterProperties=se,c.attachOriginToPatched=I,c._redefineProperty=Object.defineProperty,c.patchCallbacks=$,c.getGlobalObjects=()=>({globalSources:F,zoneSymbolEventNames:H,eventNames:re,isBrowser:E,isMix:w,isNode:T,TRUE_STR:l,FALSE_STR:u,ZONE_SYMBOL_PREFIX:h,ADD_EVENT_LISTENER_STR:s,REMOVE_EVENT_LISTENER_STR:i})});const ce=d(\"zoneTask\");function le(e,t,n,o){let r=null,s=null;n+=o;const i={};function a(t){const n=t.data;return n.args[0]=function(){try{t.invoke.apply(this,arguments)}finally{t.data&&t.data.isPeriodic||(\"number\"==typeof n.handleId?delete i[n.handleId]:n.handleId&&(n.handleId[ce]=null))}},n.handleId=r.apply(e,n.args),t}function c(e){return s(e.data.handleId)}r=z(e,t+=o,n=>function(r,s){if(\"function\"==typeof s[0]){const e=f(t,s[0],{isPeriodic:\"Interval\"===o,delay:\"Timeout\"===o||\"Interval\"===o?s[1]||0:void 0,args:s},a,c);if(!e)return e;const n=e.data.handleId;return\"number\"==typeof n?i[n]=e:n&&(n[ce]=e),n&&n.ref&&n.unref&&\"function\"==typeof n.ref&&\"function\"==typeof n.unref&&(e.ref=n.ref.bind(n),e.unref=n.unref.bind(n)),\"number\"==typeof n||n?n:e}return n.apply(e,s)}),s=z(e,n,t=>function(n,o){const r=o[0];let s;\"number\"==typeof r?s=i[r]:(s=r&&r[ce],s||(s=r)),s&&\"string\"==typeof s.type?\"notScheduled\"!==s.state&&(s.cancelFn&&s.data.isPeriodic||0===s.runCount)&&(\"number\"==typeof r?delete i[r]:r&&(r[ce]=null),s.zone.cancelTask(s)):t.apply(e,o)})}function ue(e,t){if(Zone[t.symbol(\"patchEventTarget\")])return;const{eventNames:n,zoneSymbolEventNames:o,TRUE_STR:r,FALSE_STR:s,ZONE_SYMBOL_PREFIX:i}=t.getGlobalObjects();for(let c=0;c<n.length;c++){const e=n[c],t=i+(e+s),a=i+(e+r);o[e]={},o[e][s]=t,o[e][r]=a}const a=e.EventTarget;return a&&a.prototype?(t.patchEventTarget(e,[a&&a.prototype]),!0):void 0}Zone.__load_patch(\"legacy\",e=>{const t=e[Zone.__symbol__(\"legacyPatch\")];t&&t()}),Zone.__load_patch(\"timers\",e=>{const t=\"set\",n=\"clear\";le(e,t,n,\"Timeout\"),le(e,t,n,\"Interval\"),le(e,t,n,\"Immediate\")}),Zone.__load_patch(\"requestAnimationFrame\",e=>{le(e,\"request\",\"cancel\",\"AnimationFrame\"),le(e,\"mozRequest\",\"mozCancel\",\"AnimationFrame\"),le(e,\"webkitRequest\",\"webkitCancel\",\"AnimationFrame\")}),Zone.__load_patch(\"blocking\",(e,t)=>{const n=[\"alert\",\"prompt\",\"confirm\"];for(let o=0;o<n.length;o++)z(e,n[o],(n,o,r)=>function(o,s){return t.current.run(n,e,s,r)})}),Zone.__load_patch(\"EventTarget\",(e,t,n)=>{(function(e,t){t.patchEventPrototype(e,t)})(e,n),ue(e,n);const o=e.XMLHttpRequestEventTarget;o&&o.prototype&&n.patchEventTarget(e,[o.prototype]),O(\"MutationObserver\"),O(\"WebKitMutationObserver\"),O(\"IntersectionObserver\"),O(\"FileReader\")}),Zone.__load_patch(\"on_property\",(e,t,n)=>{ae(n,e)}),Zone.__load_patch(\"customElements\",(e,t,n)=>{!function(e,t){const{isBrowser:n,isMix:o}=t.getGlobalObjects();(n||o)&&e.customElements&&\"customElements\"in e&&t.patchCallbacks(t,e.customElements,\"customElements\",\"define\",[\"connectedCallback\",\"disconnectedCallback\",\"adoptedCallback\",\"attributeChangedCallback\"])}(e,n)}),Zone.__load_patch(\"XHR\",(e,t)=>{!function(e){const u=e.XMLHttpRequest;if(!u)return;const h=u.prototype;let p=h[a],g=h[c];if(!p){const t=e.XMLHttpRequestEventTarget;if(t){const e=t.prototype;p=e[a],g=e[c]}}const _=\"readystatechange\",k=\"scheduled\";function m(e){const o=e.data,i=o.target;i[s]=!1,i[l]=!1;const u=i[r];p||(p=i[a],g=i[c]),u&&g.call(i,_,u);const h=i[r]=()=>{if(i.readyState===i.DONE)if(!o.aborted&&i[s]&&e.state===k){const n=i[t.__symbol__(\"loadfalse\")];if(n&&n.length>0){const r=e.invoke;e.invoke=function(){const n=i[t.__symbol__(\"loadfalse\")];for(let t=0;t<n.length;t++)n[t]===e&&n.splice(t,1);o.aborted||e.state!==k||r.call(e)},n.push(e)}else e.invoke()}else o.aborted||!1!==i[s]||(i[l]=!0)};return p.call(i,_,h),i[n]||(i[n]=e),w.apply(i,o.args),i[s]=!0,e}function y(){}function v(e){const t=e.data;return t.aborted=!0,Z.apply(t.target,t.args)}const b=z(h,\"open\",()=>function(e,t){return e[o]=0==t[2],e[i]=t[1],b.apply(e,t)}),T=d(\"fetchTaskAborting\"),E=d(\"fetchTaskScheduling\"),w=z(h,\"send\",()=>function(e,n){if(!0===t.current[E])return w.apply(e,n);if(e[o])return w.apply(e,n);{const t={target:e,url:e[i],isPeriodic:!1,args:n,aborted:!1},o=f(\"XMLHttpRequest.send\",y,t,m,v);e&&!0===e[l]&&!t.aborted&&o.state===k&&o.invoke()}}),Z=z(h,\"abort\",()=>function(e,o){const r=e[n];if(r&&\"string\"==typeof r.type){if(null==r.cancelFn||r.data&&r.data.aborted)return;r.zone.cancelTask(r)}else if(!0===t.current[T])return Z.apply(e,o)})}(e);const n=d(\"xhrTask\"),o=d(\"xhrSync\"),r=d(\"xhrListener\"),s=d(\"xhrScheduled\"),i=d(\"xhrURL\"),l=d(\"xhrErrorBeforeScheduled\")}),Zone.__load_patch(\"geolocation\",t=>{t.navigator&&t.navigator.geolocation&&function(t,n){const o=t.constructor.name;for(let r=0;r<n.length;r++){const s=n[r],i=t[s];if(i){if(!v(e(t,s)))continue;t[s]=(e=>{const t=function(){return e.apply(this,y(arguments,o+\".\"+s))};return I(t,e),t})(i)}}}(t.navigator.geolocation,[\"getCurrentPosition\",\"watchPosition\"])}),Zone.__load_patch(\"PromiseRejectionEvent\",(e,t)=>{function n(t){return function(n){U(e,t).forEach(o=>{const r=e.PromiseRejectionEvent;if(r){const e=new r(t,{promise:n.promise,reason:n.rejection});o.invoke(e)}})}}e.PromiseRejectionEvent&&(t[d(\"unhandledPromiseRejectionHandler\")]=n(\"unhandledrejection\"),t[d(\"rejectionHandledHandler\")]=n(\"rejectionhandled\"))})})?o.call(t,n,t,e):o)||(e.exports=r)}},[[1,0]]]);"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 37136,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:21:36.593Z",
        "time": 386.5010000008624,
        "timings": {
          "blocked": 9.16100000134646,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.5429999999999999,
          "wait": 83.69199999886519,
          "receive": 293.10500000065076,
          "_blocked_queueing": 7.75200000134646
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/",
          "lineNumber": 16
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/main.cdef7c3db3985a301fc9.js"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "no-cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "script"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:21:37 GMT"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "content-length",
              "value": "439124"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:52 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db8-6b354\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 439124,
            "mimeType": "application/javascript",
            "text": "(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(t,e,n){t.exports=n(\"zUnb\")},zUnb:function(t,e,n){\"use strict\";function s(t){return\"function\"==typeof t}n.r(e);let r=!1;const i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){if(t){const t=new Error;console.warn(\"DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n\"+t.stack)}else r&&console.log(\"RxJS: Back to a better error behavior. Thank you. <3\");r=t},get useDeprecatedSynchronousErrorHandling(){return r}};function o(t){setTimeout(()=>{throw t},0)}const a={closed:!0,next(t){},error(t){if(i.useDeprecatedSynchronousErrorHandling)throw t;o(t)},complete(){}},l=(()=>Array.isArray||(t=>t&&\"number\"==typeof t.length))();function c(t){return null!==t&&\"object\"==typeof t}const u=(()=>{function t(t){return Error.call(this),this.message=t?`${t.length} errors occurred during unsubscription:\\n${t.map((t,e)=>`${e+1}) ${t.toString()}`).join(\"\\n  \")}`:\"\",this.name=\"UnsubscriptionError\",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t})();let h=(()=>{class t{constructor(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}unsubscribe(){let e;if(this.closed)return;let{_parentOrParents:n,_ctorUnsubscribe:r,_unsubscribe:i,_subscriptions:o}=this;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(let t=0;t<n.length;++t)n[t].remove(this);if(s(i)){r&&(this._unsubscribe=void 0);try{i.call(this)}catch(a){e=a instanceof u?d(a.errors):[a]}}if(l(o)){let t=-1,n=o.length;for(;++t<n;){const n=o[t];if(c(n))try{n.unsubscribe()}catch(a){e=e||[],a instanceof u?e=e.concat(d(a.errors)):e.push(a)}}}if(e)throw new u(e)}add(e){let n=e;if(!e)return t.EMPTY;switch(typeof e){case\"function\":n=new t(e);case\"object\":if(n===this||n.closed||\"function\"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){const e=n;n=new t,n._subscriptions=[e]}break;default:throw new Error(\"unrecognized teardown \"+e+\" added to Subscription.\")}let{_parentOrParents:s}=n;if(null===s)n._parentOrParents=this;else if(s instanceof t){if(s===this)return n;n._parentOrParents=[s,this]}else{if(-1!==s.indexOf(this))return n;s.push(this)}const r=this._subscriptions;return null===r?this._subscriptions=[n]:r.push(n),n}remove(t){const e=this._subscriptions;if(e){const n=e.indexOf(t);-1!==n&&e.splice(n,1)}}}return t.EMPTY=function(t){return t.closed=!0,t}(new t),t})();function d(t){return t.reduce((t,e)=>t.concat(e instanceof u?e.errors:e),[])}const p=(()=>\"function\"==typeof Symbol?Symbol(\"rxSubscriber\"):\"@@rxSubscriber_\"+Math.random())();class f extends h{constructor(t,e,n){switch(super(),this.syncErrorValue=null,this.syncErrorThrown=!1,this.syncErrorThrowable=!1,this.isStopped=!1,arguments.length){case 0:this.destination=a;break;case 1:if(!t){this.destination=a;break}if(\"object\"==typeof t){t instanceof f?(this.syncErrorThrowable=t.syncErrorThrowable,this.destination=t,t.add(this)):(this.syncErrorThrowable=!0,this.destination=new m(this,t));break}default:this.syncErrorThrowable=!0,this.destination=new m(this,t,e,n)}}[p](){return this}static create(t,e,n){const s=new f(t,e,n);return s.syncErrorThrowable=!1,s}next(t){this.isStopped||this._next(t)}error(t){this.isStopped||(this.isStopped=!0,this._error(t))}complete(){this.isStopped||(this.isStopped=!0,this._complete())}unsubscribe(){this.closed||(this.isStopped=!0,super.unsubscribe())}_next(t){this.destination.next(t)}_error(t){this.destination.error(t),this.unsubscribe()}_complete(){this.destination.complete(),this.unsubscribe()}_unsubscribeAndRecycle(){const{_parentOrParents:t}=this;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this}}class m extends f{constructor(t,e,n,r){let i;super(),this._parentSubscriber=t;let o=this;s(e)?i=e:e&&(i=e.next,n=e.error,r=e.complete,e!==a&&(o=Object.create(e),s(o.unsubscribe)&&this.add(o.unsubscribe.bind(o)),o.unsubscribe=this.unsubscribe.bind(this))),this._context=o,this._next=i,this._error=n,this._complete=r}next(t){if(!this.isStopped&&this._next){const{_parentSubscriber:e}=this;i.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}}error(t){if(!this.isStopped){const{_parentSubscriber:e}=this,{useDeprecatedSynchronousErrorHandling:n}=i;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):o(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;o(t)}}}complete(){if(!this.isStopped){const{_parentSubscriber:t}=this;if(this._complete){const e=()=>this._complete.call(this._context);i.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}}__tryOrUnsub(t,e){try{t.call(this._context,e)}catch(n){if(this.unsubscribe(),i.useDeprecatedSynchronousErrorHandling)throw n;o(n)}}__tryOrSetError(t,e,n){if(!i.useDeprecatedSynchronousErrorHandling)throw new Error(\"bad call\");try{e.call(this._context,n)}catch(s){return i.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=s,t.syncErrorThrown=!0,!0):(o(s),!0)}return!1}_unsubscribe(){const{_parentSubscriber:t}=this;this._context=null,this._parentSubscriber=null,t.unsubscribe()}}const g=(()=>\"function\"==typeof Symbol&&Symbol.observable||\"@@observable\")();function y(t){return t}let _=(()=>{class t{constructor(t){this._isScalar=!1,t&&(this._subscribe=t)}lift(e){const n=new t;return n.source=this,n.operator=e,n}subscribe(t,e,n){const{operator:s}=this,r=function(t,e,n){if(t){if(t instanceof f)return t;if(t[p])return t[p]()}return t||e||n?new f(t,e,n):new f(a)}(t,e,n);if(r.add(s?s.call(r,this.source):this.source||i.useDeprecatedSynchronousErrorHandling&&!r.syncErrorThrowable?this._subscribe(r):this._trySubscribe(r)),i.useDeprecatedSynchronousErrorHandling&&r.syncErrorThrowable&&(r.syncErrorThrowable=!1,r.syncErrorThrown))throw r.syncErrorValue;return r}_trySubscribe(t){try{return this._subscribe(t)}catch(e){i.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),function(t){for(;t;){const{closed:e,destination:n,isStopped:s}=t;if(e||s)return!1;t=n&&n instanceof f?n:null}return!0}(t)?t.error(e):console.warn(e)}}forEach(t,e){return new(e=v(e))((e,n)=>{let s;s=this.subscribe(e=>{try{t(e)}catch(r){n(r),s&&s.unsubscribe()}},n,e)})}_subscribe(t){const{source:e}=this;return e&&e.subscribe(t)}[g](){return this}pipe(...t){return 0===t.length?this:(0===(e=t).length?y:1===e.length?e[0]:function(t){return e.reduce((t,e)=>e(t),t)})(this);var e}toPromise(t){return new(t=v(t))((t,e)=>{let n;this.subscribe(t=>n=t,t=>e(t),()=>t(n))})}}return t.create=e=>new t(e),t})();function v(t){if(t||(t=i.Promise||Promise),!t)throw new Error(\"no Promise impl found\");return t}const b=(()=>{function t(){return Error.call(this),this.message=\"object unsubscribed\",this.name=\"ObjectUnsubscribedError\",this}return t.prototype=Object.create(Error.prototype),t})();class w extends h{constructor(t,e){super(),this.subject=t,this.subscriber=e,this.closed=!1}unsubscribe(){if(this.closed)return;this.closed=!0;const t=this.subject,e=t.observers;if(this.subject=null,!e||0===e.length||t.isStopped||t.closed)return;const n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}class x extends f{constructor(t){super(t),this.destination=t}}let S=(()=>{class t extends _{constructor(){super(),this.observers=[],this.closed=!1,this.isStopped=!1,this.hasError=!1,this.thrownError=null}[p](){return new x(this)}lift(t){const e=new C(this,this);return e.operator=t,e}next(t){if(this.closed)throw new b;if(!this.isStopped){const{observers:e}=this,n=e.length,s=e.slice();for(let r=0;r<n;r++)s[r].next(t)}}error(t){if(this.closed)throw new b;this.hasError=!0,this.thrownError=t,this.isStopped=!0;const{observers:e}=this,n=e.length,s=e.slice();for(let r=0;r<n;r++)s[r].error(t);this.observers.length=0}complete(){if(this.closed)throw new b;this.isStopped=!0;const{observers:t}=this,e=t.length,n=t.slice();for(let s=0;s<e;s++)n[s].complete();this.observers.length=0}unsubscribe(){this.isStopped=!0,this.closed=!0,this.observers=null}_trySubscribe(t){if(this.closed)throw new b;return super._trySubscribe(t)}_subscribe(t){if(this.closed)throw new b;return this.hasError?(t.error(this.thrownError),h.EMPTY):this.isStopped?(t.complete(),h.EMPTY):(this.observers.push(t),new w(this,t))}asObservable(){const t=new _;return t.source=this,t}}return t.create=(t,e)=>new C(t,e),t})();class C extends S{constructor(t,e){super(),this.destination=t,this.source=e}next(t){const{destination:e}=this;e&&e.next&&e.next(t)}error(t){const{destination:e}=this;e&&e.error&&this.destination.error(t)}complete(){const{destination:t}=this;t&&t.complete&&this.destination.complete()}_subscribe(t){const{source:e}=this;return e?this.source.subscribe(t):h.EMPTY}}function E(t){return t&&\"function\"==typeof t.schedule}function k(t,e){return function(n){if(\"function\"!=typeof t)throw new TypeError(\"argument is not a function. Are you looking for `mapTo()`?\");return n.lift(new T(t,e))}}class T{constructor(t,e){this.project=t,this.thisArg=e}call(t,e){return e.subscribe(new A(t,this.project,this.thisArg))}}class A extends f{constructor(t,e,n){super(t),this.project=e,this.count=0,this.thisArg=n||this}_next(t){let e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(n){return void this.destination.error(n)}this.destination.next(e)}}const I=t=>e=>{for(let n=0,s=t.length;n<s&&!e.closed;n++)e.next(t[n]);e.complete()};function O(){return\"function\"==typeof Symbol&&Symbol.iterator?Symbol.iterator:\"@@iterator\"}const R=O(),P=t=>t&&\"number\"==typeof t.length&&\"function\"!=typeof t;function L(t){return!!t&&\"function\"!=typeof t.subscribe&&\"function\"==typeof t.then}const D=t=>{if(t&&\"function\"==typeof t[g])return s=t,t=>{const e=s[g]();if(\"function\"!=typeof e.subscribe)throw new TypeError(\"Provided object does not correctly implement Symbol.observable\");return e.subscribe(t)};if(P(t))return I(t);if(L(t))return n=t,t=>(n.then(e=>{t.closed||(t.next(e),t.complete())},e=>t.error(e)).then(null,o),t);if(t&&\"function\"==typeof t[R])return e=t,t=>{const n=e[R]();for(;;){let e;try{e=n.next()}catch(s){return t.error(s),t}if(e.done){t.complete();break}if(t.next(e.value),t.closed)break}return\"function\"==typeof n.return&&t.add(()=>{n.return&&n.return()}),t};{const e=c(t)?\"an invalid object\":`'${t}'`;throw new TypeError(`You provided ${e} where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.`)}var e,n,s};function F(t,e){return new _(n=>{const s=new h;let r=0;return s.add(e.schedule(function(){r!==t.length?(n.next(t[r++]),n.closed||s.add(this.schedule())):n.complete()})),s})}function N(t,e){return e?function(t,e){if(null!=t){if(function(t){return t&&\"function\"==typeof t[g]}(t))return function(t,e){return new _(n=>{const s=new h;return s.add(e.schedule(()=>{const r=t[g]();s.add(r.subscribe({next(t){s.add(e.schedule(()=>n.next(t)))},error(t){s.add(e.schedule(()=>n.error(t)))},complete(){s.add(e.schedule(()=>n.complete()))}}))})),s})}(t,e);if(L(t))return function(t,e){return new _(n=>{const s=new h;return s.add(e.schedule(()=>t.then(t=>{s.add(e.schedule(()=>{n.next(t),s.add(e.schedule(()=>n.complete()))}))},t=>{s.add(e.schedule(()=>n.error(t)))}))),s})}(t,e);if(P(t))return F(t,e);if(function(t){return t&&\"function\"==typeof t[R]}(t)||\"string\"==typeof t)return function(t,e){if(!t)throw new Error(\"Iterable cannot be null\");return new _(n=>{const s=new h;let r;return s.add(()=>{r&&\"function\"==typeof r.return&&r.return()}),s.add(e.schedule(()=>{r=t[R](),s.add(e.schedule(function(){if(n.closed)return;let t,e;try{const n=r.next();t=n.value,e=n.done}catch(s){return void n.error(s)}e?n.complete():(n.next(t),this.schedule())}))})),s})}(t,e)}throw new TypeError((null!==t&&typeof t||t)+\" is not observable\")}(t,e):t instanceof _?t:new _(D(t))}class V extends f{constructor(t){super(),this.parent=t}_next(t){this.parent.notifyNext(t)}_error(t){this.parent.notifyError(t),this.unsubscribe()}_complete(){this.parent.notifyComplete(),this.unsubscribe()}}class M extends f{notifyNext(t){this.destination.next(t)}notifyError(t){this.destination.error(t)}notifyComplete(){this.destination.complete()}}function j(t,e){if(!e.closed)return t instanceof _?t.subscribe(e):D(t)(e)}function U(t,e,n=Number.POSITIVE_INFINITY){return\"function\"==typeof e?s=>s.pipe(U((n,s)=>N(t(n,s)).pipe(k((t,r)=>e(n,t,s,r))),n)):(\"number\"==typeof e&&(n=e),e=>e.lift(new B(t,n)))}class B{constructor(t,e=Number.POSITIVE_INFINITY){this.project=t,this.concurrent=e}call(t,e){return e.subscribe(new H(t,this.project,this.concurrent))}}class H extends M{constructor(t,e,n=Number.POSITIVE_INFINITY){super(t),this.project=e,this.concurrent=n,this.hasCompleted=!1,this.buffer=[],this.active=0,this.index=0}_next(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)}_tryNext(t){let e;const n=this.index++;try{e=this.project(t,n)}catch(s){return void this.destination.error(s)}this.active++,this._innerSub(e)}_innerSub(t){const e=new V(this),n=this.destination;n.add(e);const s=j(t,e);s!==e&&n.add(s)}_complete(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()}notifyNext(t){this.destination.next(t)}notifyComplete(){const t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()}}function z(t=Number.POSITIVE_INFINITY){return U(y,t)}function $(t,e){return e?F(t,e):new _(I(t))}function q(...t){let e=Number.POSITIVE_INFINITY,n=null,s=t[t.length-1];return E(s)?(n=t.pop(),t.length>1&&\"number\"==typeof t[t.length-1]&&(e=t.pop())):\"number\"==typeof s&&(e=t.pop()),null===n&&1===t.length&&t[0]instanceof _?t[0]:z(e)($(t,n))}function Q(){return function(t){return t.lift(new W(t))}}class W{constructor(t){this.connectable=t}call(t,e){const{connectable:n}=this;n._refCount++;const s=new K(t,n),r=e.subscribe(s);return s.closed||(s.connection=n.connect()),r}}class K extends f{constructor(t,e){super(t),this.connectable=e}_unsubscribe(){const{connectable:t}=this;if(!t)return void(this.connection=null);this.connectable=null;const e=t._refCount;if(e<=0)return void(this.connection=null);if(t._refCount=e-1,e>1)return void(this.connection=null);const{connection:n}=this,s=t._connection;this.connection=null,!s||n&&s!==n||s.unsubscribe()}}class G extends _{constructor(t,e){super(),this.source=t,this.subjectFactory=e,this._refCount=0,this._isComplete=!1}_subscribe(t){return this.getSubject().subscribe(t)}getSubject(){const t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject}connect(){let t=this._connection;return t||(this._isComplete=!1,t=this._connection=new h,t.add(this.source.subscribe(new Y(this.getSubject(),this))),t.closed&&(this._connection=null,t=h.EMPTY)),t}refCount(){return Q()(this)}}const Z=(()=>{const t=G.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}})();class Y extends x{constructor(t,e){super(t),this.connectable=e}_error(t){this._unsubscribe(),super._error(t)}_complete(){this.connectable._isComplete=!0,this._unsubscribe(),super._complete()}_unsubscribe(){const t=this.connectable;if(t){this.connectable=null;const e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}}}function X(){return new S}function J(t){for(let e in t)if(t[e]===J)return e;throw Error(\"Could not find renamed property on target object.\")}function tt(t,e){for(const n in e)e.hasOwnProperty(n)&&!t.hasOwnProperty(n)&&(t[n]=e[n])}function et(t){if(\"string\"==typeof t)return t;if(Array.isArray(t))return\"[\"+t.map(et).join(\", \")+\"]\";if(null==t)return\"\"+t;if(t.overriddenName)return\"\"+t.overriddenName;if(t.name)return\"\"+t.name;const e=t.toString();if(null==e)return\"\"+e;const n=e.indexOf(\"\\n\");return-1===n?e:e.substring(0,n)}function nt(t,e){return null==t||\"\"===t?null===e?\"\":e:null==e||\"\"===e?t:t+\" \"+e}const st=J({__forward_ref__:J});function rt(t){return t.__forward_ref__=rt,t.toString=function(){return et(this())},t}function it(t){return ot(t)?t():t}function ot(t){return\"function\"==typeof t&&t.hasOwnProperty(st)&&t.__forward_ref__===rt}function at(t){return{token:t.token,providedIn:t.providedIn||null,factory:t.factory,value:void 0}}function lt(t){return{factory:t.factory,providers:t.providers||[],imports:t.imports||[]}}function ct(t){return ut(t,dt)||ut(t,ft)}function ut(t,e){return t.hasOwnProperty(e)?t[e]:null}function ht(t){return t&&(t.hasOwnProperty(pt)||t.hasOwnProperty(mt))?t[pt]:null}const dt=J({\"\\u0275prov\":J}),pt=J({\"\\u0275inj\":J}),ft=J({ngInjectableDef:J}),mt=J({ngInjectorDef:J});var gt=function(t){return t[t.Default=0]=\"Default\",t[t.Host=1]=\"Host\",t[t.Self=2]=\"Self\",t[t.SkipSelf=4]=\"SkipSelf\",t[t.Optional=8]=\"Optional\",t}({});let yt;function _t(t){const e=yt;return yt=t,e}function vt(t,e,n){const s=ct(t);if(s&&\"root\"==s.providedIn)return void 0===s.value?s.value=s.factory():s.value;if(n&gt.Optional)return null;if(void 0!==e)return e;throw new Error(`Injector: NOT_FOUND [${et(t)}]`)}function bt(t){return{toString:t}.toString()}var wt=function(t){return t[t.OnPush=0]=\"OnPush\",t[t.Default=1]=\"Default\",t}({}),xt=function(t){return t[t.Emulated=0]=\"Emulated\",t[t.None=2]=\"None\",t[t.ShadowDom=3]=\"ShadowDom\",t}({});const St=\"undefined\"!=typeof globalThis&&globalThis,Ct=\"undefined\"!=typeof window&&window,Et=\"undefined\"!=typeof self&&\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,kt=\"undefined\"!=typeof global&&global,Tt=St||kt||Ct||Et,At={},It=[],Ot=J({\"\\u0275cmp\":J}),Rt=J({\"\\u0275dir\":J}),Pt=J({\"\\u0275pipe\":J}),Lt=J({\"\\u0275mod\":J}),Dt=J({\"\\u0275loc\":J}),Ft=J({\"\\u0275fac\":J}),Nt=J({__NG_ELEMENT_ID__:J});let Vt=0;function Mt(t){return bt(()=>{const e={},n={type:t.type,providersResolver:null,decls:t.decls,vars:t.vars,factory:null,template:t.template||null,consts:t.consts||null,ngContentSelectors:t.ngContentSelectors,hostBindings:t.hostBindings||null,hostVars:t.hostVars||0,hostAttrs:t.hostAttrs||null,contentQueries:t.contentQueries||null,declaredInputs:e,inputs:null,outputs:null,exportAs:t.exportAs||null,onPush:t.changeDetection===wt.OnPush,directiveDefs:null,pipeDefs:null,selectors:t.selectors||It,viewQuery:t.viewQuery||null,features:t.features||null,data:t.data||{},encapsulation:t.encapsulation||xt.Emulated,id:\"c\",styles:t.styles||It,_:null,setInput:null,schemas:t.schemas||null,tView:null},s=t.directives,r=t.features,i=t.pipes;return n.id+=Vt++,n.inputs=zt(t.inputs,e),n.outputs=zt(t.outputs),r&&r.forEach(t=>t(n)),n.directiveDefs=s?()=>(\"function\"==typeof s?s():s).map(jt):null,n.pipeDefs=i?()=>(\"function\"==typeof i?i():i).map(Ut):null,n})}function jt(t){return qt(t)||function(t){return t[Rt]||null}(t)}function Ut(t){return function(t){return t[Pt]||null}(t)}const Bt={};function Ht(t){const e={type:t.type,bootstrap:t.bootstrap||It,declarations:t.declarations||It,imports:t.imports||It,exports:t.exports||It,transitiveCompileScopes:null,schemas:t.schemas||null,id:t.id||null};return null!=t.id&&bt(()=>{Bt[t.id]=t.type}),e}function zt(t,e){if(null==t)return At;const n={};for(const s in t)if(t.hasOwnProperty(s)){let r=t[s],i=r;Array.isArray(r)&&(i=r[1],r=r[0]),n[r]=s,e&&(e[r]=i)}return n}const $t=Mt;function qt(t){return t[Ot]||null}function Qt(t,e){const n=t[Lt]||null;if(!n&&!0===e)throw new Error(`Type ${et(t)} does not have '\\u0275mod' property.`);return n}const Wt=20,Kt=10;function Gt(t){return Array.isArray(t)&&\"object\"==typeof t[1]}function Zt(t){return Array.isArray(t)&&!0===t[1]}function Yt(t){return 0!=(8&t.flags)}function Xt(t){return 2==(2&t.flags)}function Jt(t){return 1==(1&t.flags)}function te(t){return null!==t.template}function ee(t,e){return t.hasOwnProperty(Ft)?t[Ft]:null}class ne extends Error{constructor(t,e){super(function(t,e){return`${t?`NG0${t}: `:\"\"}${e}`}(t,e)),this.code=t}}function se(t){return\"string\"==typeof t?t:null==t?\"\":String(t)}function re(t){return\"function\"==typeof t?t.name||t.toString():\"object\"==typeof t&&null!=t&&\"function\"==typeof t.type?t.type.name||t.type.toString():se(t)}function ie(t,e){const n=e?\" in \"+e:\"\";throw new ne(\"201\",`No provider for ${re(t)} found${n}`)}class oe{constructor(t,e,n){this.previousValue=t,this.currentValue=e,this.firstChange=n}isFirstChange(){return this.firstChange}}function ae(){return le}function le(t){return t.type.prototype.ngOnChanges&&(t.setInput=ue),ce}function ce(){const t=he(this),e=null==t?void 0:t.current;if(e){const n=t.previous;if(n===At)t.previous=e;else for(let t in e)n[t]=e[t];t.current=null,this.ngOnChanges(e)}}function ue(t,e,n,s){const r=he(t)||function(t,e){return t.__ngSimpleChanges__=e}(t,{previous:At,current:null}),i=r.current||(r.current={}),o=r.previous,a=this.declaredInputs[n],l=o[a];i[a]=new oe(l&&l.currentValue,e,o===At),t[s]=e}function he(t){return t.__ngSimpleChanges__||null}ae.ngInherit=!0;const de=\"http://www.w3.org/2000/svg\";let pe=void 0;function fe(t){return!!t.listen}const me={createRenderer:(t,e)=>void 0!==pe?pe:\"undefined\"!=typeof document?document:void 0};function ge(t){for(;Array.isArray(t);)t=t[0];return t}function ye(t,e){return ge(e[t])}function _e(t,e){return ge(e[t.index])}function ve(t,e){return t.data[e]}function be(t,e){const n=e[t];return Gt(n)?n:n[0]}function we(t){const e=function(t){return t.__ngContext__||null}(t);return e?Array.isArray(e)?e:e.lView:null}function xe(t){return 4==(4&t[2])}function Se(t){return 128==(128&t[2])}function Ce(t,e){return null==e?null:t[e]}function Ee(t){t[18]=0}function ke(t,e){t[5]+=e;let n=t,s=t[3];for(;null!==s&&(1===e&&1===n[5]||-1===e&&0===n[5]);)s[5]+=e,n=s,s=s[3]}const Te={lFrame:Ze(null),bindingsEnabled:!0,isInCheckNoChangesMode:!1};function Ae(){return Te.bindingsEnabled}function Ie(){return Te.lFrame.lView}function Oe(){return Te.lFrame.tView}function Re(t){Te.lFrame.contextLView=t}function Pe(){let t=Le();for(;null!==t&&64===t.type;)t=t.parent;return t}function Le(){return Te.lFrame.currentTNode}function De(t,e){const n=Te.lFrame;n.currentTNode=t,n.isParent=e}function Fe(){return Te.lFrame.isParent}function Ne(){Te.lFrame.isParent=!1}function Ve(){return Te.isInCheckNoChangesMode}function Me(t){Te.isInCheckNoChangesMode=t}function je(){return Te.lFrame.bindingIndex}function Ue(){return Te.lFrame.bindingIndex++}function Be(t){const e=Te.lFrame,n=e.bindingIndex;return e.bindingIndex=e.bindingIndex+t,n}function He(t,e){const n=Te.lFrame;n.bindingIndex=n.bindingRootIndex=t,ze(e)}function ze(t){Te.lFrame.currentDirectiveIndex=t}function $e(){return Te.lFrame.currentQueryIndex}function qe(t){Te.lFrame.currentQueryIndex=t}function Qe(t){const e=t[1];return 2===e.type?e.declTNode:1===e.type?t[6]:null}function We(t,e,n){if(n&gt.SkipSelf){let s=e,r=t;for(;s=s.parent,!(null!==s||n&gt.Host||(s=Qe(r),null===s)||(r=r[15],10&s.type)););if(null===s)return!1;e=s,t=r}const s=Te.lFrame=Ge();return s.currentTNode=e,s.lView=t,!0}function Ke(t){const e=Ge(),n=t[1];Te.lFrame=e,e.currentTNode=n.firstChild,e.lView=t,e.tView=n,e.contextLView=t,e.bindingIndex=n.bindingStartIndex,e.inI18n=!1}function Ge(){const t=Te.lFrame,e=null===t?null:t.child;return null===e?Ze(t):e}function Ze(t){const e={currentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:-1,contextLView:null,elementDepthCount:0,currentNamespace:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:t,child:null,inI18n:!1};return null!==t&&(t.child=e),e}function Ye(){const t=Te.lFrame;return Te.lFrame=t.parent,t.currentTNode=null,t.lView=null,t}const Xe=Ye;function Je(){const t=Ye();t.isParent=!0,t.tView=null,t.selectedIndex=-1,t.contextLView=null,t.elementDepthCount=0,t.currentDirectiveIndex=-1,t.currentNamespace=null,t.bindingRootIndex=-1,t.bindingIndex=-1,t.currentQueryIndex=0}function tn(){return Te.lFrame.selectedIndex}function en(t){Te.lFrame.selectedIndex=t}function nn(){const t=Te.lFrame;return ve(t.tView,t.selectedIndex)}function sn(t,e){for(let n=e.directiveStart,s=e.directiveEnd;n<s;n++){const e=t.data[n].type.prototype,{ngAfterContentInit:s,ngAfterContentChecked:r,ngAfterViewInit:i,ngAfterViewChecked:o,ngOnDestroy:a}=e;s&&(t.contentHooks||(t.contentHooks=[])).push(-n,s),r&&((t.contentHooks||(t.contentHooks=[])).push(n,r),(t.contentCheckHooks||(t.contentCheckHooks=[])).push(n,r)),i&&(t.viewHooks||(t.viewHooks=[])).push(-n,i),o&&((t.viewHooks||(t.viewHooks=[])).push(n,o),(t.viewCheckHooks||(t.viewCheckHooks=[])).push(n,o)),null!=a&&(t.destroyHooks||(t.destroyHooks=[])).push(n,a)}}function rn(t,e,n){ln(t,e,3,n)}function on(t,e,n,s){(3&t[2])===n&&ln(t,e,n,s)}function an(t,e){let n=t[2];(3&n)===e&&(n&=2047,n+=1,t[2]=n)}function ln(t,e,n,s){const r=null!=s?s:-1;let i=0;for(let o=void 0!==s?65535&t[18]:0;o<e.length;o++)if(\"number\"==typeof e[o+1]){if(i=e[o],null!=s&&i>=s)break}else e[o]<0&&(t[18]+=65536),(i<r||-1==r)&&(cn(t,n,e,o),t[18]=(4294901760&t[18])+o+2),o++}function cn(t,e,n,s){const r=n[s]<0,i=n[s+1],o=t[r?-n[s]:n[s]];r?t[2]>>11<t[18]>>16&&(3&t[2])===e&&(t[2]+=2048,i.call(o)):i.call(o)}const un=-1;class hn{constructor(t,e,n){this.factory=t,this.resolving=!1,this.canSeeViewProviders=e,this.injectImpl=n}}function dn(t,e,n){const s=fe(t);let r=0;for(;r<n.length;){const i=n[r];if(\"number\"==typeof i){if(0!==i)break;r++;const o=n[r++],a=n[r++],l=n[r++];s?t.setAttribute(e,a,l,o):e.setAttributeNS(o,a,l)}else{const o=i,a=n[++r];fn(o)?s&&t.setProperty(e,o,a):s?t.setAttribute(e,o,a):e.setAttribute(o,a),r++}}return r}function pn(t){return 3===t||4===t||6===t}function fn(t){return 64===t.charCodeAt(0)}function mn(t,e){if(null===e||0===e.length);else if(null===t||0===t.length)t=e.slice();else{let n=-1;for(let s=0;s<e.length;s++){const r=e[s];\"number\"==typeof r?n=r:0===n||gn(t,n,r,null,-1===n||2===n?e[++s]:null)}}return t}function gn(t,e,n,s,r){let i=0,o=t.length;if(-1===e)o=-1;else for(;i<t.length;){const n=t[i++];if(\"number\"==typeof n){if(n===e){o=-1;break}if(n>e){o=i-1;break}}}for(;i<t.length;){const e=t[i];if(\"number\"==typeof e)break;if(e===n){if(null===s)return void(null!==r&&(t[i+1]=r));if(s===t[i+1])return void(t[i+2]=r)}i++,null!==s&&i++,null!==r&&i++}-1!==o&&(t.splice(o,0,e),i=o+1),t.splice(i++,0,n),null!==s&&t.splice(i++,0,s),null!==r&&t.splice(i++,0,r)}function yn(t){return t!==un}function _n(t){return 32767&t}function vn(t,e){let n=t>>16,s=e;for(;n>0;)s=s[15],n--;return s}let bn=!0;function wn(t){const e=bn;return bn=t,e}let xn=0;function Sn(t,e){const n=En(t,e);if(-1!==n)return n;const s=e[1];s.firstCreatePass&&(t.injectorIndex=e.length,Cn(s.data,t),Cn(e,null),Cn(s.blueprint,null));const r=kn(t,e),i=t.injectorIndex;if(yn(r)){const t=_n(r),n=vn(r,e),s=n[1].data;for(let r=0;r<8;r++)e[i+r]=n[t+r]|s[t+r]}return e[i+8]=r,i}function Cn(t,e){t.push(0,0,0,0,0,0,0,0,e)}function En(t,e){return-1===t.injectorIndex||t.parent&&t.parent.injectorIndex===t.injectorIndex||null===e[t.injectorIndex+8]?-1:t.injectorIndex}function kn(t,e){if(t.parent&&-1!==t.parent.injectorIndex)return t.parent.injectorIndex;let n=0,s=null,r=e;for(;null!==r;){const t=r[1],e=t.type;if(s=2===e?t.declTNode:1===e?r[6]:null,null===s)return un;if(n++,r=r[15],-1!==s.injectorIndex)return s.injectorIndex|n<<16}return un}function Tn(t,e,n){!function(t,e,n){let s;\"string\"==typeof n?s=n.charCodeAt(0)||0:n.hasOwnProperty(Nt)&&(s=n[Nt]),null==s&&(s=n[Nt]=xn++);const r=255&s,i=1<<r,o=64&r,a=32&r,l=e.data;128&r?o?a?l[t+7]|=i:l[t+6]|=i:a?l[t+5]|=i:l[t+4]|=i:o?a?l[t+3]|=i:l[t+2]|=i:a?l[t+1]|=i:l[t]|=i}(t,e,n)}function An(t,e,n){if(n&gt.Optional)return t;ie(e,\"NodeInjector\")}function In(t,e,n,s){if(n&gt.Optional&&void 0===s&&(s=null),0==(n&(gt.Self|gt.Host))){const r=t[9],i=_t(void 0);try{return r?r.get(e,s,n&gt.Optional):vt(e,s,n&gt.Optional)}finally{_t(i)}}return An(s,e,n)}function On(t,e,n,s=gt.Default,r){if(null!==t){const i=function(t){if(\"string\"==typeof t)return t.charCodeAt(0)||0;const e=t.hasOwnProperty(Nt)?t[Nt]:void 0;return\"number\"==typeof e?e>=0?255&e:Pn:e}(n);if(\"function\"==typeof i){if(!We(e,t,s))return s&gt.Host?An(r,n,s):In(e,n,s,r);try{const t=i();if(null!=t||s&gt.Optional)return t;ie(n)}finally{Xe()}}else if(\"number\"==typeof i){let r=null,o=En(t,e),a=un,l=s&gt.Host?e[16][6]:null;for((-1===o||s&gt.SkipSelf)&&(a=-1===o?kn(t,e):e[o+8],a!==un&&Vn(s,!1)?(r=e[1],o=_n(a),e=vn(a,e)):o=-1);-1!==o;){const t=e[1];if(Nn(i,o,t.data)){const t=Ln(o,e,n,r,s,l);if(t!==Rn)return t}a=e[o+8],a!==un&&Vn(s,e[1].data[o+8]===l)&&Nn(i,o,e)?(r=t,o=_n(a),e=vn(a,e)):o=-1}}}return In(e,n,s,r)}const Rn={};function Pn(){return new Mn(Pe(),Ie())}function Ln(t,e,n,s,r,i){const o=e[1],a=o.data[t+8],l=Dn(a,o,n,null==s?Xt(a)&&bn:s!=o&&0!=(3&a.type),r&gt.Host&&i===a);return null!==l?Fn(e,o,l,a):Rn}function Dn(t,e,n,s,r){const i=t.providerIndexes,o=e.data,a=1048575&i,l=t.directiveStart,c=i>>20,u=r?a+c:t.directiveEnd;for(let h=s?a:a+c;h<u;h++){const t=o[h];if(h<l&&n===t||h>=l&&t.type===n)return h}if(r){const t=o[l];if(t&&te(t)&&t.type===n)return l}return null}function Fn(t,e,n,s){let r=t[n];const i=e.data;if(r instanceof hn){const o=r;o.resolving&&function(t,e){throw new ne(\"200\",\"Circular dependency in DI detected for \"+t)}(re(i[n]));const a=wn(o.canSeeViewProviders);o.resolving=!0;const l=o.injectImpl?_t(o.injectImpl):null;We(t,s,gt.Default);try{r=t[n]=o.factory(void 0,i,t,s),e.firstCreatePass&&n>=s.directiveStart&&function(t,e,n){const{ngOnChanges:s,ngOnInit:r,ngDoCheck:i}=e.type.prototype;if(s){const s=le(e);(n.preOrderHooks||(n.preOrderHooks=[])).push(t,s),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(t,s)}r&&(n.preOrderHooks||(n.preOrderHooks=[])).push(0-t,r),i&&((n.preOrderHooks||(n.preOrderHooks=[])).push(t,i),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(t,i))}(n,i[n],e)}finally{null!==l&&_t(l),wn(a),o.resolving=!1,Xe()}}return r}function Nn(t,e,n){const s=64&t,r=32&t;let i;return i=128&t?s?r?n[e+7]:n[e+6]:r?n[e+5]:n[e+4]:s?r?n[e+3]:n[e+2]:r?n[e+1]:n[e],!!(i&1<<t)}function Vn(t,e){return!(t&gt.Self||t&gt.Host&&e)}class Mn{constructor(t,e){this._tNode=t,this._lView=e}get(t,e){return On(this._tNode,this._lView,t,void 0,e)}}function jn(t){const e=t;if(ot(t))return()=>{const t=jn(it(e));return t?t():null};let n=ee(e);if(null===n){const t=ht(e);n=t&&t.factory}return n||null}function Un(t){return bt(()=>{const e=t.prototype.constructor,n=e[Ft]||jn(e),s=Object.prototype;let r=Object.getPrototypeOf(t.prototype).constructor;for(;r&&r!==s;){const t=r[Ft]||jn(r);if(t&&t!==n)return t;r=Object.getPrototypeOf(r)}return t=>new t})}function Bn(t){return function(t,e){if(\"class\"===e)return t.classes;if(\"style\"===e)return t.styles;const n=t.attrs;if(n){const t=n.length;let s=0;for(;s<t;){const r=n[s];if(pn(r))break;if(0===r)s+=2;else if(\"number\"==typeof r)for(s++;s<t&&\"string\"==typeof n[s];)s++;else{if(r===e)return n[s+1];s+=2}}}return null}(Pe(),t)}const Hn=\"__parameters__\";function zn(t,e,n){return bt(()=>{const s=function(t){return function(...e){if(t){const n=t(...e);for(const t in n)this[t]=n[t]}}}(e);function r(...t){if(this instanceof r)return s.apply(this,t),this;const e=new r(...t);return n.annotation=e,n;function n(t,n,s){const r=t.hasOwnProperty(Hn)?t[Hn]:Object.defineProperty(t,Hn,{value:[]})[Hn];for(;r.length<=s;)r.push(null);return(r[s]=r[s]||[]).push(e),t}}return n&&(r.prototype=Object.create(n.prototype)),r.prototype.ngMetadataName=t,r.annotationCls=r,r})}class $n{constructor(t,e){this._desc=t,this.ngMetadataName=\"InjectionToken\",this.\\u0275prov=void 0,\"number\"==typeof e?this.__NG_ELEMENT_ID__=e:void 0!==e&&(this.\\u0275prov=at({token:this,providedIn:e.providedIn||\"root\",factory:e.factory}))}toString(){return\"InjectionToken \"+this._desc}}const qn=new $n(\"AnalyzeForEntryComponents\"),Qn=Function;function Wn(t,e){void 0===e&&(e=t);for(let n=0;n<t.length;n++){let s=t[n];Array.isArray(s)?(e===t&&(e=t.slice(0,n)),Wn(s,e)):e!==t&&e.push(s)}return e}function Kn(t,e){t.forEach(t=>Array.isArray(t)?Kn(t,e):e(t))}function Gn(t,e,n){e>=t.length?t.push(n):t.splice(e,0,n)}function Zn(t,e){return e>=t.length-1?t.pop():t.splice(e,1)[0]}function Yn(t,e){const n=[];for(let s=0;s<t;s++)n.push(e);return n}function Xn(t,e,n){let s=ts(t,e);return s>=0?t[1|s]=n:(s=~s,function(t,e,n,s){let r=t.length;if(r==e)t.push(n,s);else if(1===r)t.push(s,t[0]),t[0]=n;else{for(r--,t.push(t[r-1],t[r]);r>e;)t[r]=t[r-2],r--;t[e]=n,t[e+1]=s}}(t,s,e,n)),s}function Jn(t,e){const n=ts(t,e);if(n>=0)return t[1|n]}function ts(t,e){return function(t,e,n){let s=0,r=t.length>>1;for(;r!==s;){const n=s+(r-s>>1),i=t[n<<1];if(e===i)return n<<1;i>e?r=n:s=n+1}return~(r<<1)}(t,e)}const es=zn(\"Inject\",t=>({token:t})),ns=zn(\"Optional\"),ss=zn(\"Self\"),rs=zn(\"SkipSelf\"),is={},os=/\\n/gm,as=\"__source\",ls=J({provide:String,useValue:J});let cs=void 0;function us(t){const e=cs;return cs=t,e}function hs(t,e=gt.Default){if(void 0===cs)throw new Error(\"inject() must be called from an injection context\");return null===cs?vt(t,void 0,e):cs.get(t,e&gt.Optional?null:void 0,e)}function ds(t,e=gt.Default){return(yt||hs)(it(t),e)}const ps=ds;function fs(t){const e=[];for(let n=0;n<t.length;n++){const s=it(t[n]);if(Array.isArray(s)){if(0===s.length)throw new Error(\"Arguments array must have arguments.\");let t=void 0,n=gt.Default;for(let e=0;e<s.length;e++){const r=s[e];r instanceof ns||\"Optional\"===r.ngMetadataName||r===ns?n|=gt.Optional:r instanceof rs||\"SkipSelf\"===r.ngMetadataName||r===rs?n|=gt.SkipSelf:r instanceof ss||\"Self\"===r.ngMetadataName||r===ss?n|=gt.Self:t=r instanceof es||r===es?r.token:r}e.push(ds(t,n))}else e.push(ds(s))}return e}class ms{constructor(t){this.changingThisBreaksApplicationSecurity=t}toString(){return\"SafeValue must use [property]=binding: \"+this.changingThisBreaksApplicationSecurity+\" (see https://g.co/ng/security#xss)\"}}function gs(t){return t instanceof ms?t.changingThisBreaksApplicationSecurity:t}const ys=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi,_s=/^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;var vs=function(t){return t[t.NONE=0]=\"NONE\",t[t.HTML=1]=\"HTML\",t[t.STYLE=2]=\"STYLE\",t[t.SCRIPT=3]=\"SCRIPT\",t[t.URL=4]=\"URL\",t[t.RESOURCE_URL=5]=\"RESOURCE_URL\",t}({});function bs(t){const e=function(){const t=Ie();return t&&t[12]}();return e?e.sanitize(vs.URL,t)||\"\":function(t,e){const n=function(t){return t instanceof ms&&t.getTypeName()||null}(t);if(null!=n&&n!==e){if(\"ResourceURL\"===n&&\"URL\"===e)return!0;throw new Error(`Required a safe ${e}, got a ${n} (see https://g.co/ng/security#xss)`)}return n===e}(t,\"URL\")?gs(t):(n=se(t),(n=String(n)).match(ys)||n.match(_s)?n:\"unsafe:\"+n);var n}function ws(t){return t.ngDebugContext}function xs(t){return t.ngOriginalError}function Ss(t,...e){t.error(...e)}class Cs{constructor(){this._console=console}handleError(t){const e=this._findOriginalError(t),n=this._findContext(t),s=function(t){return t.ngErrorLogger||Ss}(t);s(this._console,\"ERROR\",t),e&&s(this._console,\"ORIGINAL ERROR\",e),n&&s(this._console,\"ERROR CONTEXT\",n)}_findContext(t){return t?ws(t)?ws(t):this._findContext(xs(t)):null}_findOriginalError(t){let e=xs(t);for(;e&&xs(e);)e=xs(e);return e}}function Es(t,e){t.__ngContext__=e}const ks=(()=>(\"undefined\"!=typeof requestAnimationFrame&&requestAnimationFrame||setTimeout).bind(Tt))();function Ts(t){return t instanceof Function?t():t}var As=function(t){return t[t.Important=1]=\"Important\",t[t.DashCase=2]=\"DashCase\",t}({});function Is(t,e){return(void 0)(t,e)}function Os(t){const e=t[3];return Zt(e)?e[3]:e}function Rs(t){return Ls(t[13])}function Ps(t){return Ls(t[4])}function Ls(t){for(;null!==t&&!Zt(t);)t=t[4];return t}function Ds(t,e,n,s,r){if(null!=s){let i,o=!1;Zt(s)?i=s:Gt(s)&&(o=!0,s=s[0]);const a=ge(s);0===t&&null!==n?null==r?Hs(e,n,a):Bs(e,n,a,r||null,!0):1===t&&null!==n?Bs(e,n,a,r||null,!0):2===t?function(t,e,n){const s=$s(t,e);s&&function(t,e,n,s){fe(t)?t.removeChild(e,n,s):e.removeChild(n)}(t,s,e,n)}(e,a,o):3===t&&e.destroyNode(a),null!=i&&function(t,e,n,s,r){const i=n[7];i!==ge(n)&&Ds(e,t,s,i,r);for(let o=Kt;o<n.length;o++){const r=n[o];Ys(r[1],r,t,e,s,i)}}(e,t,i,n,r)}}function Fs(t,e,n){return fe(t)?t.createElement(e,n):null===n?t.createElement(e):t.createElementNS(n,e)}function Ns(t,e){const n=t[9],s=n.indexOf(e),r=e[3];1024&e[2]&&(e[2]&=-1025,ke(r,-1)),n.splice(s,1)}function Vs(t,e){if(t.length<=Kt)return;const n=Kt+e,s=t[n];if(s){const i=s[17];null!==i&&i!==t&&Ns(i,s),e>0&&(t[n-1][4]=s[4]);const o=Zn(t,Kt+e);Ys(s[1],r=s,r[11],2,null,null),r[0]=null,r[6]=null;const a=o[19];null!==a&&a.detachView(o[1]),s[3]=null,s[4]=null,s[2]&=-129}var r;return s}function Ms(t,e){if(!(256&e[2])){const n=e[11];fe(n)&&n.destroyNode&&Ys(t,e,n,3,null,null),function(t){let e=t[13];if(!e)return js(t[1],t);for(;e;){let n=null;if(Gt(e))n=e[13];else{const t=e[10];t&&(n=t)}if(!n){for(;e&&!e[4]&&e!==t;)Gt(e)&&js(e[1],e),e=e[3];null===e&&(e=t),Gt(e)&&js(e[1],e),n=e&&e[4]}e=n}}(e)}}function js(t,e){if(!(256&e[2])){e[2]&=-129,e[2]|=256,function(t,e){let n;if(null!=t&&null!=(n=t.destroyHooks))for(let s=0;s<n.length;s+=2){const t=e[n[s]];if(!(t instanceof hn)){const e=n[s+1];if(Array.isArray(e))for(let n=0;n<e.length;n+=2)e[n+1].call(t[e[n]]);else e.call(t)}}}(t,e),function(t,e){const n=t.cleanup,s=e[7];let r=-1;if(null!==n){for(let t=0;t<n.length-1;t+=2)if(\"string\"==typeof n[t]){const i=n[t+1],o=\"function\"==typeof i?i(e):ge(e[i]),a=s[r=n[t+2]],l=n[t+3];\"boolean\"==typeof l?o.removeEventListener(n[t],a,l):l>=0?s[r=l]():s[r=-l].unsubscribe(),t+=2}else{const e=s[r=n[t+1]];n[t].call(e)}if(null!==s)for(let t=r+1;t<s.length;t++)(0,s[t])();e[7]=null}}(t,e),1===e[1].type&&fe(e[11])&&e[11].destroy();const n=e[17];if(null!==n&&Zt(e[3])){n!==e[3]&&Ns(n,e);const s=e[19];null!==s&&s.detachView(t)}}}function Us(t,e,n){return function(t,e,n){let s=e;for(;null!==s&&40&s.type;)s=(e=s).parent;if(null===s)return n[0];if(2&s.flags){const e=t.data[s.directiveStart].encapsulation;if(e===xt.None||e===xt.Emulated)return null}return _e(s,n)}(t,e.parent,n)}function Bs(t,e,n,s,r){fe(t)?t.insertBefore(e,n,s,r):e.insertBefore(n,s,r)}function Hs(t,e,n){fe(t)?t.appendChild(e,n):e.appendChild(n)}function zs(t,e,n,s,r){null!==s?Bs(t,e,n,s,r):Hs(t,e,n)}function $s(t,e){return fe(t)?t.parentNode(e):e.parentNode}function qs(t,e,n){return Qs(t,e,n)}let Qs=function(t,e,n){return 40&t.type?_e(t,n):null};function Ws(t,e,n,s){const r=Us(t,s,e),i=e[11],o=qs(s.parent||e[6],s,e);if(null!=r)if(Array.isArray(n))for(let a=0;a<n.length;a++)zs(i,r,n[a],o,!1);else zs(i,r,n,o,!1)}function Ks(t,e){if(null!==e){const n=e.type;if(3&n)return _e(e,t);if(4&n)return Gs(-1,t[e.index]);if(8&n){const n=e.child;if(null!==n)return Ks(t,n);{const n=t[e.index];return Zt(n)?Gs(-1,n):ge(n)}}if(32&n)return Is(e,t)()||ge(t[e.index]);{const n=t[16],s=n[6],r=Os(n),i=s.projection[e.projection];return null!=i?Ks(r,i):Ks(t,e.next)}}return null}function Gs(t,e){const n=Kt+t+1;if(n<e.length){const t=e[n],s=t[1].firstChild;if(null!==s)return Ks(t,s)}return e[7]}function Zs(t,e,n,s,r,i,o){for(;null!=n;){const a=s[n.index],l=n.type;if(o&&0===e&&(a&&Es(ge(a),s),n.flags|=4),64!=(64&n.flags))if(8&l)Zs(t,e,n.child,s,r,i,!1),Ds(e,t,r,a,i);else if(32&l){const o=Is(n,s);let l;for(;l=o();)Ds(e,t,r,l,i);Ds(e,t,r,a,i)}else 16&l?Xs(t,e,s,n,r,i):Ds(e,t,r,a,i);n=o?n.projectionNext:n.next}}function Ys(t,e,n,s,r,i){Zs(n,s,t.firstChild,e,r,i,!1)}function Xs(t,e,n,s,r,i){const o=n[16],a=o[6].projection[s.projection];if(Array.isArray(a))for(let l=0;l<a.length;l++)Ds(e,t,r,a[l],i);else Zs(t,e,a,o[3],r,i,!0)}function Js(t,e,n){fe(t)?t.setAttribute(e,\"style\",n):e.style.cssText=n}function tr(t,e,n){fe(t)?\"\"===n?t.removeAttribute(e,\"class\"):t.setAttribute(e,\"class\",n):e.className=n}function er(t,e,n){let s=t.length;for(;;){const r=t.indexOf(e,n);if(-1===r)return r;if(0===r||t.charCodeAt(r-1)<=32){const n=e.length;if(r+n===s||t.charCodeAt(r+n)<=32)return r}n=r+1}}const nr=\"ng-template\";function sr(t,e,n){let s=0;for(;s<t.length;){let r=t[s++];if(n&&\"class\"===r){if(r=t[s],-1!==er(r.toLowerCase(),e,0))return!0}else if(1===r){for(;s<t.length&&\"string\"==typeof(r=t[s++]);)if(r.toLowerCase()===e)return!0;return!1}}return!1}function rr(t){return 4===t.type&&t.value!==nr}function ir(t,e,n){return e===(4!==t.type||n?t.value:nr)}function or(t,e,n){let s=4;const r=t.attrs||[],i=function(t){for(let e=0;e<t.length;e++)if(pn(t[e]))return e;return t.length}(r);let o=!1;for(let a=0;a<e.length;a++){const l=e[a];if(\"number\"!=typeof l){if(!o)if(4&s){if(s=2|1&s,\"\"!==l&&!ir(t,l,n)||\"\"===l&&1===e.length){if(ar(s))return!1;o=!0}}else{const c=8&s?l:e[++a];if(8&s&&null!==t.attrs){if(!sr(t.attrs,c,n)){if(ar(s))return!1;o=!0}continue}const u=lr(8&s?\"class\":l,r,rr(t),n);if(-1===u){if(ar(s))return!1;o=!0;continue}if(\"\"!==c){let t;t=u>i?\"\":r[u+1].toLowerCase();const e=8&s?t:null;if(e&&-1!==er(e,c,0)||2&s&&c!==t){if(ar(s))return!1;o=!0}}}}else{if(!o&&!ar(s)&&!ar(l))return!1;if(o&&ar(l))continue;o=!1,s=l|1&s}}return ar(s)||o}function ar(t){return 0==(1&t)}function lr(t,e,n,s){if(null===e)return-1;let r=0;if(s||!n){let n=!1;for(;r<e.length;){const s=e[r];if(s===t)return r;if(3===s||6===s)n=!0;else{if(1===s||2===s){let t=e[++r];for(;\"string\"==typeof t;)t=e[++r];continue}if(4===s)break;if(0===s){r+=4;continue}}r+=n?1:2}return-1}return function(t,e){let n=t.indexOf(4);if(n>-1)for(n++;n<t.length;){const s=t[n];if(\"number\"==typeof s)return-1;if(s===e)return n;n++}return-1}(e,t)}function cr(t,e,n=!1){for(let s=0;s<e.length;s++)if(or(t,e[s],n))return!0;return!1}function ur(t,e){t:for(let n=0;n<e.length;n++){const s=e[n];if(t.length===s.length){for(let e=0;e<t.length;e++)if(t[e]!==s[e])continue t;return!0}}return!1}function hr(t,e){return t?\":not(\"+e.trim()+\")\":e}function dr(t){let e=t[0],n=1,s=2,r=\"\",i=!1;for(;n<t.length;){let o=t[n];if(\"string\"==typeof o)if(2&s){const e=t[++n];r+=\"[\"+o+(e.length>0?'=\"'+e+'\"':\"\")+\"]\"}else 8&s?r+=\".\"+o:4&s&&(r+=\" \"+o);else\"\"===r||ar(o)||(e+=hr(i,r),r=\"\"),s=o,i=i||!ar(s);n++}return\"\"!==r&&(e+=hr(i,r)),e}const pr={};function fr(t){mr(Oe(),Ie(),tn()+t,Ve())}function mr(t,e,n,s){if(!s)if(3==(3&e[2])){const s=t.preOrderCheckHooks;null!==s&&rn(e,s,n)}else{const s=t.preOrderHooks;null!==s&&on(e,s,0,n)}en(n)}function gr(t,e){return t<<17|e<<2}function yr(t){return t>>17&32767}function _r(t){return 2|t}function vr(t){return(131068&t)>>2}function br(t,e){return-131069&t|e<<2}function wr(t){return 1|t}function xr(t,e){const n=t.contentQueries;if(null!==n)for(let s=0;s<n.length;s+=2){const r=n[s],i=n[s+1];if(-1!==i){const n=t.data[i];qe(r),n.contentQueries(2,e[i],i)}}}function Sr(t,e,n,s,r,i,o,a,l,c){const u=e.blueprint.slice();return u[0]=r,u[2]=140|s,Ee(u),u[3]=u[15]=t,u[8]=n,u[10]=o||t&&t[10],u[11]=a||t&&t[11],u[12]=l||t&&t[12]||null,u[9]=c||t&&t[9]||null,u[6]=i,u[16]=2==e.type?t[16]:u,u}function Cr(t,e,n,s,r){let i=t.data[e];if(null===i)i=function(t,e,n,s,r){const i=Le(),o=Fe(),a=t.data[e]=function(t,e,n,s,r,i){return{type:n,index:s,insertBeforeIndex:null,injectorIndex:e?e.injectorIndex:-1,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,value:r,attrs:i,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:e,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0}}(0,o?i:i&&i.parent,n,e,s,r);return null===t.firstChild&&(t.firstChild=a),null!==i&&(o?null==i.child&&null!==a.parent&&(i.child=a):null===i.next&&(i.next=a)),a}(t,e,n,s,r),Te.lFrame.inI18n&&(i.flags|=64);else if(64&i.type){i.type=n,i.value=s,i.attrs=r;const t=function(){const t=Te.lFrame,e=t.currentTNode;return t.isParent?e:e.parent}();i.injectorIndex=null===t?-1:t.injectorIndex}return De(i,!0),i}function Er(t,e,n,s){if(0===n)return-1;const r=e.length;for(let i=0;i<n;i++)e.push(s),t.blueprint.push(s),t.data.push(null);return r}function kr(t,e,n){Ke(e);try{const s=t.viewQuery;null!==s&&ei(1,s,n);const r=t.template;null!==r&&Ir(t,e,r,1,n),t.firstCreatePass&&(t.firstCreatePass=!1),t.staticContentQueries&&xr(t,e),t.staticViewQueries&&ei(2,t.viewQuery,n);const i=t.components;null!==i&&function(t,e){for(let n=0;n<e.length;n++)Zr(t,e[n])}(e,i)}catch(s){throw t.firstCreatePass&&(t.incompleteFirstPass=!0),s}finally{e[2]&=-5,Je()}}function Tr(t,e,n,s){const r=e[2];if(256==(256&r))return;Ke(e);const i=Ve();try{Ee(e),Te.lFrame.bindingIndex=t.bindingStartIndex,null!==n&&Ir(t,e,n,2,s);const o=3==(3&r);if(!i)if(o){const n=t.preOrderCheckHooks;null!==n&&rn(e,n,null)}else{const n=t.preOrderHooks;null!==n&&on(e,n,0,null),an(e,0)}if(function(t){for(let e=Rs(t);null!==e;e=Ps(e)){if(!e[2])continue;const t=e[9];for(let e=0;e<t.length;e++){const n=t[e],s=n[3];0==(1024&n[2])&&ke(s,1),n[2]|=1024}}}(e),function(t){for(let e=Rs(t);null!==e;e=Ps(e))for(let t=Kt;t<e.length;t++){const n=e[t],s=n[1];Se(n)&&Tr(s,n,s.template,n[8])}}(e),null!==t.contentQueries&&xr(t,e),!i)if(o){const n=t.contentCheckHooks;null!==n&&rn(e,n)}else{const n=t.contentHooks;null!==n&&on(e,n,1),an(e,1)}!function(t,e){const n=t.hostBindingOpCodes;if(null!==n)try{for(let t=0;t<n.length;t++){const s=n[t];if(s<0)en(~s);else{const r=s,i=n[++t],o=n[++t];He(i,r),o(2,e[r])}}}finally{en(-1)}}(t,e);const a=t.components;null!==a&&function(t,e){for(let n=0;n<e.length;n++)Kr(t,e[n])}(e,a);const l=t.viewQuery;if(null!==l&&ei(2,l,s),!i)if(o){const n=t.viewCheckHooks;null!==n&&rn(e,n)}else{const n=t.viewHooks;null!==n&&on(e,n,2),an(e,2)}!0===t.firstUpdatePass&&(t.firstUpdatePass=!1),i||(e[2]&=-73),1024&e[2]&&(e[2]&=-1025,ke(e[3],-1))}finally{Je()}}function Ar(t,e,n,s){const r=e[10],i=!Ve(),o=xe(e);try{i&&!o&&r.begin&&r.begin(),o&&kr(t,e,s),Tr(t,e,n,s)}finally{i&&!o&&r.end&&r.end()}}function Ir(t,e,n,s,r){const i=tn();try{en(-1),2&s&&e.length>Wt&&mr(t,e,Wt,Ve()),n(s,r)}finally{en(i)}}function Or(t,e,n){Ae()&&(function(t,e,n,s){const r=n.directiveStart,i=n.directiveEnd;t.firstCreatePass||Sn(n,e),Es(s,e);const o=n.initialInputs;for(let a=r;a<i;a++){const s=t.data[a],i=te(s);i&&$r(e,n,s);const l=Fn(e,t,a,n);Es(l,e),null!==o&&qr(0,a-r,l,s,0,o),i&&(be(n.index,e)[8]=l)}}(t,e,n,_e(n,e)),128==(128&n.flags)&&function(t,e,n){const s=n.directiveStart,r=n.directiveEnd,i=n.index,o=Te.lFrame.currentDirectiveIndex;try{en(i);for(let n=s;n<r;n++){const s=t.data[n],r=e[n];ze(n),null===s.hostBindings&&0===s.hostVars&&null===s.hostAttrs||jr(s,r)}}finally{en(-1),ze(o)}}(t,e,n))}function Rr(t,e,n=_e){const s=e.localNames;if(null!==s){let r=e.index+1;for(let i=0;i<s.length;i+=2){const o=s[i+1],a=-1===o?n(e,t):t[o];t[r++]=a}}}function Pr(t){const e=t.tView;return null===e||e.incompleteFirstPass?t.tView=Lr(1,null,t.template,t.decls,t.vars,t.directiveDefs,t.pipeDefs,t.viewQuery,t.schemas,t.consts):e}function Lr(t,e,n,s,r,i,o,a,l,c){const u=Wt+s,h=u+r,d=function(t,e){const n=[];for(let s=0;s<e;s++)n.push(s<t?null:pr);return n}(u,h),p=\"function\"==typeof c?c():c;return d[1]={type:t,blueprint:d,template:n,queries:null,viewQuery:a,declTNode:e,data:d.slice().fill(null,u),bindingStartIndex:u,expandoStartIndex:h,hostBindingOpCodes:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:\"function\"==typeof i?i():i,pipeRegistry:\"function\"==typeof o?o():o,firstChild:null,schemas:l,consts:p,incompleteFirstPass:!1}}function Dr(t,e,n,s){const r=si(e);null===n?r.push(s):(r.push(n),t.firstCreatePass&&ri(t).push(s,r.length-1))}function Fr(t,e,n){for(let s in t)if(t.hasOwnProperty(s)){const r=t[s];(n=null===n?{}:n).hasOwnProperty(s)?n[s].push(e,r):n[s]=[e,r]}return n}function Nr(t,e,n,s,r,i,o,a){const l=_e(e,n);let c,u=e.inputs;var h;!a&&null!=u&&(c=u[s])?(oi(t,n,c,s,r),Xt(e)&&function(t,e){const n=be(e,t);16&n[2]||(n[2]|=64)}(n,e.index)):3&e.type&&(s=\"class\"===(h=s)?\"className\":\"for\"===h?\"htmlFor\":\"formaction\"===h?\"formAction\":\"innerHtml\"===h?\"innerHTML\":\"readonly\"===h?\"readOnly\":\"tabindex\"===h?\"tabIndex\":h,r=null!=o?o(r,e.value||\"\",s):r,fe(i)?i.setProperty(l,s,r):fn(s)||(l.setProperty?l.setProperty(s,r):l[s]=r))}function Vr(t,e,n,s){let r=!1;if(Ae()){const i=function(t,e,n){const s=t.directiveRegistry;let r=null;if(s)for(let i=0;i<s.length;i++){const o=s[i];cr(n,o.selectors,!1)&&(r||(r=[]),Tn(Sn(n,e),t,o.type),te(o)?(Ur(t,n),r.unshift(o)):r.push(o))}return r}(t,e,n),o=null===s?null:{\"\":-1};if(null!==i){r=!0,Hr(n,t.data.length,i.length);for(let t=0;t<i.length;t++){const e=i[t];e.providersResolver&&e.providersResolver(e)}let s=!1,a=!1,l=Er(t,e,i.length,null);for(let r=0;r<i.length;r++){const c=i[r];n.mergedAttrs=mn(n.mergedAttrs,c.hostAttrs),zr(t,n,e,l,c),Br(l,c,o),null!==c.contentQueries&&(n.flags|=8),null===c.hostBindings&&null===c.hostAttrs&&0===c.hostVars||(n.flags|=128);const u=c.type.prototype;!s&&(u.ngOnChanges||u.ngOnInit||u.ngDoCheck)&&((t.preOrderHooks||(t.preOrderHooks=[])).push(n.index),s=!0),a||!u.ngOnChanges&&!u.ngDoCheck||((t.preOrderCheckHooks||(t.preOrderCheckHooks=[])).push(n.index),a=!0),l++}!function(t,e){const n=e.directiveEnd,s=t.data,r=e.attrs,i=[];let o=null,a=null;for(let l=e.directiveStart;l<n;l++){const t=s[l],n=t.inputs,c=null===r||rr(e)?null:Qr(n,r);i.push(c),o=Fr(n,l,o),a=Fr(t.outputs,l,a)}null!==o&&(o.hasOwnProperty(\"class\")&&(e.flags|=16),o.hasOwnProperty(\"style\")&&(e.flags|=32)),e.initialInputs=i,e.inputs=o,e.outputs=a}(t,n)}o&&function(t,e,n){if(e){const s=t.localNames=[];for(let t=0;t<e.length;t+=2){const r=n[e[t+1]];if(null==r)throw new ne(\"301\",`Export of name '${e[t+1]}' not found!`);s.push(e[t],r)}}}(n,s,o)}return n.mergedAttrs=mn(n.mergedAttrs,n.attrs),r}function Mr(t,e,n,s,r,i){const o=i.hostBindings;if(o){let n=t.hostBindingOpCodes;null===n&&(n=t.hostBindingOpCodes=[]);const i=~e.index;(function(t){let e=t.length;for(;e>0;){const n=t[--e];if(\"number\"==typeof n&&n<0)return n}return 0})(n)!=i&&n.push(i),n.push(s,r,o)}}function jr(t,e){null!==t.hostBindings&&t.hostBindings(1,e)}function Ur(t,e){e.flags|=2,(t.components||(t.components=[])).push(e.index)}function Br(t,e,n){if(n){if(e.exportAs)for(let s=0;s<e.exportAs.length;s++)n[e.exportAs[s]]=t;te(e)&&(n[\"\"]=t)}}function Hr(t,e,n){t.flags|=1,t.directiveStart=e,t.directiveEnd=e+n,t.providerIndexes=e}function zr(t,e,n,s,r){t.data[s]=r;const i=r.factory||(r.factory=ee(r.type)),o=new hn(i,te(r),null);t.blueprint[s]=o,n[s]=o,Mr(t,e,0,s,Er(t,n,r.hostVars,pr),r)}function $r(t,e,n){const s=_e(e,t),r=Pr(n),i=t[10],o=Yr(t,Sr(t,r,null,n.onPush?64:16,s,e,i,i.createRenderer(s,n),null,null));t[e.index]=o}function qr(t,e,n,s,r,i){const o=i[e];if(null!==o){const t=s.setInput;for(let e=0;e<o.length;){const r=o[e++],i=o[e++],a=o[e++];null!==t?s.setInput(n,a,r,i):n[i]=a}}}function Qr(t,e){let n=null,s=0;for(;s<e.length;){const r=e[s];if(0!==r)if(5!==r){if(\"number\"==typeof r)break;t.hasOwnProperty(r)&&(null===n&&(n=[]),n.push(r,t[r],e[s+1])),s+=2}else s+=2;else s+=4}return n}function Wr(t,e,n,s){return new Array(t,!0,!1,e,null,0,s,n,null,null)}function Kr(t,e){const n=be(e,t);if(Se(n)){const t=n[1];80&n[2]?Tr(t,n,t.template,n[8]):n[5]>0&&Gr(n)}}function Gr(t){for(let n=Rs(t);null!==n;n=Ps(n))for(let t=Kt;t<n.length;t++){const e=n[t];if(1024&e[2]){const t=e[1];Tr(t,e,t.template,e[8])}else e[5]>0&&Gr(e)}const e=t[1].components;if(null!==e)for(let n=0;n<e.length;n++){const s=be(e[n],t);Se(s)&&s[5]>0&&Gr(s)}}function Zr(t,e){const n=be(e,t),s=n[1];!function(t,e){for(let n=e.length;n<t.blueprint.length;n++)e.push(t.blueprint[n])}(s,n),kr(s,n,n[8])}function Yr(t,e){return t[13]?t[14][4]=e:t[13]=e,t[14]=e,e}function Xr(t){for(;t;){t[2]|=64;const e=Os(t);if(0!=(512&t[2])&&!e)return t;t=e}return null}function Jr(t,e,n){const s=e[10];s.begin&&s.begin();try{Tr(t,e,t.template,n)}catch(r){throw ii(e,r),r}finally{s.end&&s.end()}}function ti(t){!function(t){for(let e=0;e<t.components.length;e++){const n=t.components[e],s=we(n),r=s[1];Ar(r,s,r.template,n)}}(t[8])}function ei(t,e,n){qe(0),e(t,n)}const ni=(()=>Promise.resolve(null))();function si(t){return t[7]||(t[7]=[])}function ri(t){return t.cleanup||(t.cleanup=[])}function ii(t,e){const n=t[9],s=n?n.get(Cs,null):null;s&&s.handleError(e)}function oi(t,e,n,s,r){for(let i=0;i<n.length;){const o=n[i++],a=n[i++],l=e[o],c=t.data[o];null!==c.setInput?c.setInput(l,r,s,a):l[a]=r}}function ai(t,e,n){const s=ye(e,t);!function(t,e,n){fe(t)?t.setValue(e,n):e.textContent=n}(t[11],s,n)}function li(t,e,n){let s=n?t.styles:null,r=n?t.classes:null,i=0;if(null!==e)for(let o=0;o<e.length;o++){const t=e[o];\"number\"==typeof t?i=t:1==i?r=nt(r,t):2==i&&(s=nt(s,t+\": \"+e[++o]+\";\"))}n?t.styles=s:t.stylesWithoutHost=s,n?t.classes=r:t.classesWithoutHost=r}const ci=new $n(\"INJECTOR\",-1);class ui{get(t,e=is){if(e===is){const e=new Error(`NullInjectorError: No provider for ${et(t)}!`);throw e.name=\"NullInjectorError\",e}return e}}const hi=new $n(\"Set Injector scope.\"),di={},pi={},fi=[];let mi=void 0;function gi(){return void 0===mi&&(mi=new ui),mi}function yi(t,e=null,n=null,s){return new _i(t,n,e||gi(),s)}class _i{constructor(t,e,n,s=null){this.parent=n,this.records=new Map,this.injectorDefTypes=new Set,this.onDestroy=new Set,this._destroyed=!1;const r=[];e&&Kn(e,n=>this.processProvider(n,t,e)),Kn([t],t=>this.processInjectorType(t,[],r)),this.records.set(ci,wi(void 0,this));const i=this.records.get(hi);this.scope=null!=i?i.value:null,this.source=s||(\"object\"==typeof t?null:et(t))}get destroyed(){return this._destroyed}destroy(){this.assertNotDestroyed(),this._destroyed=!0;try{this.onDestroy.forEach(t=>t.ngOnDestroy())}finally{this.records.clear(),this.onDestroy.clear(),this.injectorDefTypes.clear()}}get(t,e=is,n=gt.Default){this.assertNotDestroyed();const s=us(this);try{if(!(n&gt.SkipSelf)){let e=this.records.get(t);if(void 0===e){const n=(\"function\"==typeof(r=t)||\"object\"==typeof r&&r instanceof $n)&&ct(t);e=n&&this.injectableDefInScope(n)?wi(vi(t),di):null,this.records.set(t,e)}if(null!=e)return this.hydrate(t,e)}return(n&gt.Self?gi():this.parent).get(t,e=n&gt.Optional&&e===is?null:e)}catch(i){if(\"NullInjectorError\"===i.name){if((i.ngTempTokenPath=i.ngTempTokenPath||[]).unshift(et(t)),s)throw i;return function(t,e,n,s){const r=t.ngTempTokenPath;throw e[as]&&r.unshift(e[as]),t.message=function(t,e,n,s=null){t=t&&\"\\n\"===t.charAt(0)&&\"\\u0275\"==t.charAt(1)?t.substr(2):t;let r=et(e);if(Array.isArray(e))r=e.map(et).join(\" -> \");else if(\"object\"==typeof e){let t=[];for(let n in e)if(e.hasOwnProperty(n)){let s=e[n];t.push(n+\":\"+(\"string\"==typeof s?JSON.stringify(s):et(s)))}r=`{${t.join(\", \")}}`}return`${n}${s?\"(\"+s+\")\":\"\"}[${r}]: ${t.replace(os,\"\\n  \")}`}(\"\\n\"+t.message,r,n,s),t.ngTokenPath=r,t.ngTempTokenPath=null,t}(i,t,\"R3InjectorError\",this.source)}throw i}finally{us(s)}var r}_resolveInjectorDefTypes(){this.injectorDefTypes.forEach(t=>this.get(t))}toString(){const t=[];return this.records.forEach((e,n)=>t.push(et(n))),`R3Injector[${t.join(\", \")}]`}assertNotDestroyed(){if(this._destroyed)throw new Error(\"Injector has already been destroyed.\")}processInjectorType(t,e,n){if(!(t=it(t)))return!1;let s=ht(t);const r=null==s&&t.ngModule||void 0,i=void 0===r?t:r,o=-1!==n.indexOf(i);if(void 0!==r&&(s=ht(r)),null==s)return!1;if(null!=s.imports&&!o){let t;n.push(i);try{Kn(s.imports,s=>{this.processInjectorType(s,e,n)&&(void 0===t&&(t=[]),t.push(s))})}finally{}if(void 0!==t)for(let e=0;e<t.length;e++){const{ngModule:n,providers:s}=t[e];Kn(s,t=>this.processProvider(t,n,s||fi))}}this.injectorDefTypes.add(i),this.records.set(i,wi(s.factory,di));const a=s.providers;if(null!=a&&!o){const e=t;Kn(a,t=>this.processProvider(t,e,a))}return void 0!==r&&void 0!==t.providers}processProvider(t,e,n){let s=Si(t=it(t))?t:it(t&&t.provide);const r=function(t,e,n){return xi(t)?wi(void 0,t.useValue):wi(bi(t),di)}(t);if(Si(t)||!0!==t.multi)this.records.get(s);else{let e=this.records.get(s);e||(e=wi(void 0,di,!0),e.factory=()=>fs(e.multi),this.records.set(s,e)),s=t,e.multi.push(t)}this.records.set(s,r)}hydrate(t,e){var n;return e.value===di&&(e.value=pi,e.value=e.factory()),\"object\"==typeof e.value&&e.value&&null!==(n=e.value)&&\"object\"==typeof n&&\"function\"==typeof n.ngOnDestroy&&this.onDestroy.add(e.value),e.value}injectableDefInScope(t){return!!t.providedIn&&(\"string\"==typeof t.providedIn?\"any\"===t.providedIn||t.providedIn===this.scope:this.injectorDefTypes.has(t.providedIn))}}function vi(t){const e=ct(t),n=null!==e?e.factory:ee(t);if(null!==n)return n;const s=ht(t);if(null!==s)return s.factory;if(t instanceof $n)throw new Error(`Token ${et(t)} is missing a \\u0275prov definition.`);if(t instanceof Function)return function(t){const e=t.length;if(e>0){const n=Yn(e,\"?\");throw new Error(`Can't resolve all parameters for ${et(t)}: (${n.join(\", \")}).`)}const n=function(t){const e=t&&(t[dt]||t[ft]);if(e){const n=function(t){if(t.hasOwnProperty(\"name\"))return t.name;const e=(\"\"+t).match(/^function\\s*([^\\s(]+)/);return null===e?\"\":e[1]}(t);return console.warn(`DEPRECATED: DI is instantiating a token \"${n}\" that inherits its @Injectable decorator but does not provide one itself.\\nThis will become an error in a future version of Angular. Please add @Injectable() to the \"${n}\" class.`),e}return null}(t);return null!==n?()=>n.factory(t):()=>new t}(t);throw new Error(\"unreachable\")}function bi(t,e,n){let s=void 0;if(Si(t)){const e=it(t);return ee(e)||vi(e)}if(xi(t))s=()=>it(t.useValue);else if((r=t)&&r.useFactory)s=()=>t.useFactory(...fs(t.deps||[]));else if(function(t){return!(!t||!t.useExisting)}(t))s=()=>ds(it(t.useExisting));else{const e=it(t&&(t.useClass||t.provide));if(!function(t){return!!t.deps}(t))return ee(e)||vi(e);s=()=>new e(...fs(t.deps))}var r;return s}function wi(t,e,n=!1){return{factory:t,value:e,multi:n?[]:void 0}}function xi(t){return null!==t&&\"object\"==typeof t&&ls in t}function Si(t){return\"function\"==typeof t}const Ci=function(t,e,n){return function(t,e=null,n=null,s){const r=yi(t,e,n,s);return r._resolveInjectorDefTypes(),r}({name:n},e,t,n)};let Ei=(()=>{class t{static create(t,e){return Array.isArray(t)?Ci(t,e,\"\"):Ci(t.providers,t.parent,t.name||\"\")}}return t.THROW_IF_NOT_FOUND=is,t.NULL=new ui,t.\\u0275prov=at({token:t,providedIn:\"any\",factory:()=>ds(ci)}),t.__NG_ELEMENT_ID__=-1,t})();function ki(t,e){sn(we(t)[1],Pe())}function Ti(t){let e=Object.getPrototypeOf(t.type.prototype).constructor,n=!0;const s=[t];for(;e;){let r=void 0;if(te(t))r=e.\\u0275cmp||e.\\u0275dir;else{if(e.\\u0275cmp)throw new Error(\"Directives cannot inherit Components\");r=e.\\u0275dir}if(r){if(n){s.push(r);const e=t;e.inputs=Ai(t.inputs),e.declaredInputs=Ai(t.declaredInputs),e.outputs=Ai(t.outputs);const n=r.hostBindings;n&&Ri(t,n);const i=r.viewQuery,o=r.contentQueries;if(i&&Ii(t,i),o&&Oi(t,o),tt(t.inputs,r.inputs),tt(t.declaredInputs,r.declaredInputs),tt(t.outputs,r.outputs),te(r)&&r.data.animation){const e=t.data;e.animation=(e.animation||[]).concat(r.data.animation)}}const e=r.features;if(e)for(let s=0;s<e.length;s++){const r=e[s];r&&r.ngInherit&&r(t),r===Ti&&(n=!1)}}e=Object.getPrototypeOf(e)}!function(t){let e=0,n=null;for(let s=t.length-1;s>=0;s--){const r=t[s];r.hostVars=e+=r.hostVars,r.hostAttrs=mn(r.hostAttrs,n=mn(n,r.hostAttrs))}}(s)}function Ai(t){return t===At?{}:t===It?[]:t}function Ii(t,e){const n=t.viewQuery;t.viewQuery=n?(t,s)=>{e(t,s),n(t,s)}:e}function Oi(t,e){const n=t.contentQueries;t.contentQueries=n?(t,s,r)=>{e(t,s,r),n(t,s,r)}:e}function Ri(t,e){const n=t.hostBindings;t.hostBindings=n?(t,s)=>{e(t,s),n(t,s)}:e}let Pi=null;function Li(){if(!Pi){const t=Tt.Symbol;if(t&&t.iterator)Pi=t.iterator;else{const t=Object.getOwnPropertyNames(Map.prototype);for(let e=0;e<t.length;++e){const n=t[e];\"entries\"!==n&&\"size\"!==n&&Map.prototype[n]===Map.prototype.entries&&(Pi=n)}}}return Pi}function Di(t){return!!Fi(t)&&(Array.isArray(t)||!(t instanceof Map)&&Li()in t)}function Fi(t){return null!==t&&(\"function\"==typeof t||\"object\"==typeof t)}function Ni(t,e,n){return!Object.is(t[e],n)&&(t[e]=n,!0)}function Vi(t,e,n,s){const r=Ni(t,e,n);return Ni(t,e+1,s)||r}function Mi(t,e,n,s){const r=Ie();return Ni(r,Ue(),e)&&(Oe(),function(t,e,n,s,r,i){const o=_e(t,e);!function(t,e,n,s,r,i,o){if(null==i)fe(t)?t.removeAttribute(e,r,n):e.removeAttribute(r);else{const a=null==o?se(i):o(i,s||\"\",r);fe(t)?t.setAttribute(e,r,a,n):n?e.setAttributeNS(n,r,a):e.setAttribute(r,a)}}(e[11],o,i,t.value,n,s,r)}(nn(),r,t,e,n,s)),Mi}function ji(t,e,n,s,r,i,o,a){const l=Ie(),c=Oe(),u=t+Wt,h=c.firstCreatePass?function(t,e,n,s,r,i,o,a,l){const c=e.consts,u=Cr(e,t,4,o||null,Ce(c,a));Vr(e,n,u,Ce(c,l)),sn(e,u);const h=u.tViews=Lr(2,u,s,r,i,e.directiveRegistry,e.pipeRegistry,null,e.schemas,c);return null!==e.queries&&(e.queries.template(e,u),h.queries=e.queries.embeddedTView(u)),u}(u,c,l,e,n,s,r,i,o):c.data[u];De(h,!1);const d=l[11].createComment(\"\");Ws(c,l,d,h),Es(d,l),Yr(l,l[u]=Wr(d,l,d,h)),Jt(h)&&Or(c,l,h),null!=o&&Rr(l,h,a)}function Ui(t,e=gt.Default){const n=Ie();return null===n?ds(t,e):On(Pe(),n,it(t),e)}function Bi(t,e,n){const s=Ie();return Ni(s,Ue(),e)&&Nr(Oe(),nn(),s,t,e,s[11],n,!1),Bi}function Hi(t,e,n,s,r){const i=r?\"class\":\"style\";oi(t,n,e.inputs[i],i,s)}function zi(t,e,n,s){const r=Ie(),i=Oe(),o=Wt+t,a=r[11],l=r[o]=Fs(a,e,Te.lFrame.currentNamespace),c=i.firstCreatePass?function(t,e,n,s,r,i,o){const a=e.consts,l=Cr(e,t,2,r,Ce(a,i));return Vr(e,n,l,Ce(a,o)),null!==l.attrs&&li(l,l.attrs,!1),null!==l.mergedAttrs&&li(l,l.mergedAttrs,!0),null!==e.queries&&e.queries.elementStart(e,l),l}(o,i,r,0,e,n,s):i.data[o];De(c,!0);const u=c.mergedAttrs;null!==u&&dn(a,l,u);const h=c.classes;null!==h&&tr(a,l,h);const d=c.styles;null!==d&&Js(a,l,d),64!=(64&c.flags)&&Ws(i,r,l,c),0===Te.lFrame.elementDepthCount&&Es(l,r),Te.lFrame.elementDepthCount++,Jt(c)&&(Or(i,r,c),function(t,e,n){if(Yt(e)){const s=e.directiveEnd;for(let r=e.directiveStart;r<s;r++){const e=t.data[r];e.contentQueries&&e.contentQueries(1,n[r],r)}}}(i,c,r)),null!==s&&Rr(r,c)}function $i(){let t=Pe();Fe()?Ne():(t=t.parent,De(t,!1));const e=t;Te.lFrame.elementDepthCount--;const n=Oe();n.firstCreatePass&&(sn(n,t),Yt(t)&&n.queries.elementEnd(t)),null!=e.classesWithoutHost&&function(t){return 0!=(16&t.flags)}(e)&&Hi(n,e,Ie(),e.classesWithoutHost,!0),null!=e.stylesWithoutHost&&function(t){return 0!=(32&t.flags)}(e)&&Hi(n,e,Ie(),e.stylesWithoutHost,!1)}function qi(t,e,n,s){zi(t,e,n,s),$i()}function Qi(t){return!!t&&\"function\"==typeof t.then}function Wi(t){return!!t&&\"function\"==typeof t.subscribe}function Ki(t,e,n=!1,s){const r=Ie(),i=Oe(),o=Pe();return function(t,e,n,s,r,i,o=!1,a){const l=Jt(s),c=t.firstCreatePass&&ri(t),u=si(e);let h=!0;if(3&s.type){const d=_e(s,e),p=a?a(d):At,f=p.target||d,m=u.length,g=a?t=>a(ge(t[s.index])).target:s.index;if(fe(n)){let o=null;if(!a&&l&&(o=function(t,e,n,s){const r=t.cleanup;if(null!=r)for(let i=0;i<r.length-1;i+=2){const t=r[i];if(t===n&&r[i+1]===s){const t=e[7],n=r[i+2];return t.length>n?t[n]:null}\"string\"==typeof t&&(i+=2)}return null}(t,e,r,s.index)),null!==o)(o.__ngLastListenerFn__||o).__ngNextListenerFn__=i,o.__ngLastListenerFn__=i,h=!1;else{i=Zi(s,e,i,!1);const t=n.listen(p.name||f,r,i);u.push(i,t),c&&c.push(r,g,m,m+1)}}else i=Zi(s,e,i,!0),f.addEventListener(r,i,o),u.push(i),c&&c.push(r,g,m,o)}else i=Zi(s,e,i,!1);const d=s.outputs;let p;if(h&&null!==d&&(p=d[r])){const t=p.length;if(t)for(let n=0;n<t;n+=2){const t=e[p[n]][p[n+1]].subscribe(i),o=u.length;u.push(i,t),c&&c.push(r,s.index,o,-(o+1))}}}(i,r,r[11],o,t,e,n,s),Ki}function Gi(t,e,n){try{return!1!==e(n)}catch(s){return ii(t,s),!1}}function Zi(t,e,n,s){return function r(i){if(i===Function)return n;const o=2&t.flags?be(t.index,e):e;0==(32&e[2])&&Xr(o);let a=Gi(e,n,i),l=r.__ngNextListenerFn__;for(;l;)a=Gi(e,l,i)&&a,l=l.__ngNextListenerFn__;return s&&!1===a&&(i.preventDefault(),i.returnValue=!1),a}}function Yi(t=1){return function(t){return(Te.lFrame.contextLView=function(t,e){for(;t>0;)e=e[15],t--;return e}(t,Te.lFrame.contextLView))[8]}(t)}function Xi(t,e){let n=null;const s=function(t){const e=t.attrs;if(null!=e){const t=e.indexOf(5);if(0==(1&t))return e[t+1]}return null}(t);for(let r=0;r<e.length;r++){const i=e[r];if(\"*\"!==i){if(null===s?cr(t,i,!0):ur(s,i))return r}else n=r}return n}function Ji(t){const e=Ie()[16][6];if(!e.projection){const n=e.projection=Yn(t?t.length:1,null),s=n.slice();let r=e.child;for(;null!==r;){const e=t?Xi(r,t):0;null!==e&&(s[e]?s[e].projectionNext=r:n[e]=r,s[e]=r),r=r.next}}}function to(t,e=0,n){const s=Ie(),r=Oe(),i=Cr(r,Wt+t,16,null,n||null);null===i.projection&&(i.projection=e),Ne(),64!=(64&i.flags)&&function(t,e,n){Xs(e[11],0,e,n,Us(t,n,e),qs(n.parent||e[6],n,e))}(r,s,i)}const eo=[];function no(t,e,n,s,r){const i=t[n+1],o=null===e;let a=s?yr(i):vr(i),l=!1;for(;0!==a&&(!1===l||o);){const n=t[a+1];so(t[a],e)&&(l=!0,t[a+1]=s?wr(n):_r(n)),a=s?yr(n):vr(n)}l&&(t[n+1]=s?_r(i):wr(i))}function so(t,e){return null===t||null==e||(Array.isArray(t)?t[1]:t)===e||!(!Array.isArray(t)||\"string\"!=typeof e)&&ts(t,e)>=0}function ro(t,e){return function(t,e,n,s){const r=Ie(),i=Oe(),o=Be(2);i.firstUpdatePass&&function(t,e,n,s){const r=t.data;if(null===r[n+1]){const i=r[tn()],o=function(t,e){return e>=t.expandoStartIndex}(t,n);(function(t,e){return 0!=(16&t.flags)})(i)&&null===e&&!o&&(e=!1),e=function(t,e,n,s){const r=function(t){const e=Te.lFrame.currentDirectiveIndex;return-1===e?null:t[e]}(t);let i=e.residualClasses;if(null===r)0===e.classBindings&&(n=oo(n=io(null,t,e,n,s),e.attrs,s),i=null);else{const o=e.directiveStylingLast;if(-1===o||t[o]!==r)if(n=io(r,t,e,n,s),null===i){let n=function(t,e,n){const s=e.classBindings;if(0!==vr(s))return t[yr(s)]}(t,e);void 0!==n&&Array.isArray(n)&&(n=io(null,t,e,n[1],s),n=oo(n,e.attrs,s),function(t,e,n,s){t[yr(e.classBindings)]=s}(t,e,0,n))}else i=function(t,e,n){let s=void 0;const r=e.directiveEnd;for(let i=1+e.directiveStylingLast;i<r;i++)s=oo(s,t[i].hostAttrs,true);return oo(s,e.attrs,true)}(t,e)}return void 0!==i&&(e.residualClasses=i),n}(r,i,e,s),function(t,e,n,s,r,i){let o=e.classBindings,a=yr(o),l=vr(o);t[s]=n;let c,u=!1;if(Array.isArray(n)){const t=n;c=t[1],(null===c||ts(t,c)>0)&&(u=!0)}else c=n;if(r)if(0!==l){const e=yr(t[a+1]);t[s+1]=gr(e,a),0!==e&&(t[e+1]=br(t[e+1],s)),t[a+1]=131071&t[a+1]|s<<17}else t[s+1]=gr(a,0),0!==a&&(t[a+1]=br(t[a+1],s)),a=s;else t[s+1]=gr(l,0),0===a?a=s:t[l+1]=br(t[l+1],s),l=s;u&&(t[s+1]=_r(t[s+1])),no(t,c,s,!0),no(t,c,s,!1),function(t,e,n,s,r){const i=t.residualClasses;null!=i&&\"string\"==typeof e&&ts(i,e)>=0&&(n[s+1]=wr(n[s+1]))}(e,c,t,s),o=gr(a,l),e.classBindings=o}(r,i,e,n,o)}}(i,t,o,true),e!==pr&&Ni(r,o,e)&&function(t,e,n,s,r,i,o,a){if(!(3&e.type))return;const l=t.data,c=l[a+1];lo(1==(1&c)?ao(l,e,n,r,vr(c),o):void 0)||(lo(i)||function(t){return 2==(2&t)}(c)&&(i=ao(l,null,n,r,a,o)),function(t,e,n,s,r){const i=fe(t);r?i?t.addClass(n,s):n.classList.add(s):i?t.removeClass(n,s):n.classList.remove(s)}(s,0,ye(tn(),n),r,i))}(i,i.data[tn()],r,r[11],t,r[o+1]=function(t,e){return null==t||\"object\"==typeof t&&(t=et(gs(t))),t}(e),true,o)}(t,e),ro}function io(t,e,n,s,r){let i=null;const o=n.directiveEnd;let a=n.directiveStylingLast;for(-1===a?a=n.directiveStart:a++;a<o&&(i=e[a],s=oo(s,i.hostAttrs,r),i!==t);)a++;return null!==t&&(n.directiveStylingLast=a),s}function oo(t,e,n){const s=n?1:2;let r=-1;if(null!==e)for(let i=0;i<e.length;i++){const o=e[i];\"number\"==typeof o?r=o:r===s&&(Array.isArray(t)||(t=void 0===t?[]:[\"\",t]),Xn(t,o,!!n||e[++i]))}return void 0===t?null:t}function ao(t,e,n,s,r,i){const o=null===e;let a=void 0;for(;r>0;){const e=t[r],i=Array.isArray(e),l=i?e[1]:e,c=null===l;let u=n[r+1];u===pr&&(u=c?eo:void 0);let h=c?Jn(u,s):l===s?u:void 0;if(i&&!lo(h)&&(h=Jn(e,s)),lo(h)&&(a=h,o))return a;const d=t[r+1];r=o?yr(d):vr(d)}if(null!==e){let t=i?e.residualClasses:e.residualStyles;null!=t&&(a=Jn(t,s))}return a}function lo(t){return void 0!==t}function co(t,e=\"\"){const n=Ie(),s=Oe(),r=t+Wt,i=s.firstCreatePass?Cr(s,r,1,e,null):s.data[r],o=n[r]=function(t,e){return fe(t)?t.createText(e):t.createTextNode(e)}(n[11],e);Ws(s,n,o,i),De(i,!1)}function uo(t){return ho(\"\",t,\"\"),uo}function ho(t,e,n){const s=Ie(),r=function(t,e,n,s){return Ni(t,Ue(),n)?e+se(n)+s:pr}(s,t,e,n);return r!==pr&&ai(s,tn(),r),ho}function po(t,e,n,s,r){const i=Ie(),o=function(t,e,n,s,r,i){const o=Vi(t,je(),n,r);return Be(2),o?e+se(n)+s+se(r)+i:pr}(i,t,e,n,s,r);return o!==pr&&ai(i,tn(),o),po}function fo(t,e,n,s,r,i,o){const a=Ie(),l=function(t,e,n,s,r,i,o,a){const l=function(t,e,n,s,r){const i=Vi(t,e,n,s);return Ni(t,e+2,r)||i}(t,je(),n,r,o);return Be(3),l?e+se(n)+s+se(r)+i+se(o)+a:pr}(a,t,e,n,s,r,i,o);return l!==pr&&ai(a,tn(),l),fo}function mo(t,e,n){const s=Ie();return Ni(s,Ue(),e)&&Nr(Oe(),nn(),s,t,e,s[11],n,!0),mo}const go=void 0;var yo=[\"en\",[[\"a\",\"p\"],[\"AM\",\"PM\"],go],[[\"AM\",\"PM\"],go,go],[[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"]],go,[[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]],go,[[\"B\",\"A\"],[\"BC\",\"AD\"],[\"Before Christ\",\"Anno Domini\"]],0,[6,0],[\"M/d/yy\",\"MMM d, y\",\"MMMM d, y\",\"EEEE, MMMM d, y\"],[\"h:mm a\",\"h:mm:ss a\",\"h:mm:ss a z\",\"h:mm:ss a zzzz\"],[\"{1}, {0}\",go,\"{1} 'at' {0}\",go],[\".\",\",\",\";\",\"%\",\"+\",\"-\",\"E\",\"\\xd7\",\"\\u2030\",\"\\u221e\",\"NaN\",\":\"],[\"#,##0.###\",\"#,##0%\",\"\\xa4#,##0.00\",\"#E0\"],\"USD\",\"$\",\"US Dollar\",{},\"ltr\",function(t){let e=Math.floor(Math.abs(t)),n=t.toString().replace(/^[^.]*\\.?/,\"\").length;return 1===e&&0===n?1:5}];let _o={};function vo(t){return t in _o||(_o[t]=Tt.ng&&Tt.ng.common&&Tt.ng.common.locales&&Tt.ng.common.locales[t]),_o[t]}var bo=function(t){return t[t.LocaleId=0]=\"LocaleId\",t[t.DayPeriodsFormat=1]=\"DayPeriodsFormat\",t[t.DayPeriodsStandalone=2]=\"DayPeriodsStandalone\",t[t.DaysFormat=3]=\"DaysFormat\",t[t.DaysStandalone=4]=\"DaysStandalone\",t[t.MonthsFormat=5]=\"MonthsFormat\",t[t.MonthsStandalone=6]=\"MonthsStandalone\",t[t.Eras=7]=\"Eras\",t[t.FirstDayOfWeek=8]=\"FirstDayOfWeek\",t[t.WeekendRange=9]=\"WeekendRange\",t[t.DateFormat=10]=\"DateFormat\",t[t.TimeFormat=11]=\"TimeFormat\",t[t.DateTimeFormat=12]=\"DateTimeFormat\",t[t.NumberSymbols=13]=\"NumberSymbols\",t[t.NumberFormats=14]=\"NumberFormats\",t[t.CurrencyCode=15]=\"CurrencyCode\",t[t.CurrencySymbol=16]=\"CurrencySymbol\",t[t.CurrencyName=17]=\"CurrencyName\",t[t.Currencies=18]=\"Currencies\",t[t.Directionality=19]=\"Directionality\",t[t.PluralCase=20]=\"PluralCase\",t[t.ExtraData=21]=\"ExtraData\",t}({});const wo=\"en-US\";let xo=wo;function So(t){var e,n;n=\"Expected localeId to be defined\",null==(e=t)&&function(t,e,n,s){throw new Error(\"ASSERTION ERROR: \"+t+` [Expected=> null != ${e} <=Actual]`)}(n,e),\"string\"==typeof t&&(xo=t.toLowerCase().replace(/_/g,\"-\"))}function Co(t,e,n,s,r){if(t=it(t),Array.isArray(t))for(let i=0;i<t.length;i++)Co(t[i],e,n,s,r);else{const i=Oe(),o=Ie();let a=Si(t)?t:it(t.provide),l=bi(t);const c=Pe(),u=1048575&c.providerIndexes,h=c.directiveStart,d=c.providerIndexes>>20;if(Si(t)||!t.multi){const s=new hn(l,r,Ui),p=To(a,e,r?u:u+d,h);-1===p?(Tn(Sn(c,o),i,a),Eo(i,t,e.length),e.push(a),c.directiveStart++,c.directiveEnd++,r&&(c.providerIndexes+=1048576),n.push(s),o.push(s)):(n[p]=s,o[p]=s)}else{const p=To(a,e,u+d,h),f=To(a,e,u,u+d),m=p>=0&&n[p],g=f>=0&&n[f];if(r&&!g||!r&&!m){Tn(Sn(c,o),i,a);const u=function(t,e,n,s,r){const i=new hn(t,n,Ui);return i.multi=[],i.index=e,i.componentProviders=0,ko(i,r,s&&!n),i}(r?Io:Ao,n.length,r,s,l);!r&&g&&(n[f].providerFactory=u),Eo(i,t,e.length,0),e.push(a),c.directiveStart++,c.directiveEnd++,r&&(c.providerIndexes+=1048576),n.push(u),o.push(u)}else Eo(i,t,p>-1?p:f,ko(n[r?f:p],l,!r&&s));!r&&s&&g&&n[f].componentProviders++}}}function Eo(t,e,n,s){const r=Si(e);if(r||e.useClass){const i=(e.useClass||e).prototype.ngOnDestroy;if(i){const o=t.destroyHooks||(t.destroyHooks=[]);if(!r&&e.multi){const t=o.indexOf(n);-1===t?o.push(n,[s,i]):o[t+1].push(s,i)}else o.push(n,i)}}}function ko(t,e,n){return n&&t.componentProviders++,t.multi.push(e)-1}function To(t,e,n,s){for(let r=n;r<s;r++)if(e[r]===t)return r;return-1}function Ao(t,e,n,s){return Oo(this.multi,[])}function Io(t,e,n,s){const r=this.multi;let i;if(this.providerFactory){const t=this.providerFactory.componentProviders,e=Fn(n,n[1],this.providerFactory.index,s);i=e.slice(0,t),Oo(r,i);for(let n=t;n<e.length;n++)i.push(e[n])}else i=[],Oo(r,i);return i}function Oo(t,e){for(let n=0;n<t.length;n++)e.push((0,t[n])());return e}function Ro(t,e=[]){return n=>{n.providersResolver=(n,s)=>function(t,e,n){const s=Oe();if(s.firstCreatePass){const r=te(t);Co(n,s.data,s.blueprint,r,!0),Co(e,s.data,s.blueprint,r,!1)}}(n,s?s(t):t,e)}}class Po{}class Lo{resolveComponentFactory(t){throw function(t){const e=Error(`No component factory found for ${et(t)}. Did you add it to @NgModule.entryComponents?`);return e.ngComponent=t,e}(t)}}let Do=(()=>{class t{}return t.NULL=new Lo,t})();function Fo(...t){}function No(t,e){return new Mo(_e(t,e))}const Vo=function(){return No(Pe(),Ie())};let Mo=(()=>{class t{constructor(t){this.nativeElement=t}}return t.__NG_ELEMENT_ID__=Vo,t})();class jo{}let Uo=(()=>{class t{}return t.__NG_ELEMENT_ID__=()=>Bo(),t})();const Bo=function(){const t=Ie(),e=be(Pe().index,t);return function(t){return t[11]}(Gt(e)?e:t)};let Ho=(()=>{class t{}return t.\\u0275prov=at({token:t,providedIn:\"root\",factory:()=>null}),t})();class zo{constructor(t){this.full=t,this.major=t.split(\".\")[0],this.minor=t.split(\".\")[1],this.patch=t.split(\".\").slice(2).join(\".\")}}const $o=new zo(\"11.0.5\");class qo{constructor(){}supports(t){return Di(t)}create(t){return new Wo(t)}}const Qo=(t,e)=>e;class Wo{constructor(t){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=t||Qo}forEachItem(t){let e;for(e=this._itHead;null!==e;e=e._next)t(e)}forEachOperation(t){let e=this._itHead,n=this._removalsHead,s=0,r=null;for(;e||n;){const i=!n||e&&e.currentIndex<Yo(n,s,r)?e:n,o=Yo(i,s,r),a=i.currentIndex;if(i===n)s--,n=n._nextRemoved;else if(e=e._next,null==i.previousIndex)s++;else{r||(r=[]);const t=o-s,e=a-s;if(t!=e){for(let n=0;n<t;n++){const s=n<r.length?r[n]:r[n]=0,i=s+n;e<=i&&i<t&&(r[n]=s+1)}r[i.previousIndex]=e-t}}o!==a&&t(i,o,a)}}forEachPreviousItem(t){let e;for(e=this._previousItHead;null!==e;e=e._nextPrevious)t(e)}forEachAddedItem(t){let e;for(e=this._additionsHead;null!==e;e=e._nextAdded)t(e)}forEachMovedItem(t){let e;for(e=this._movesHead;null!==e;e=e._nextMoved)t(e)}forEachRemovedItem(t){let e;for(e=this._removalsHead;null!==e;e=e._nextRemoved)t(e)}forEachIdentityChange(t){let e;for(e=this._identityChangesHead;null!==e;e=e._nextIdentityChange)t(e)}diff(t){if(null==t&&(t=[]),!Di(t))throw new Error(`Error trying to diff '${et(t)}'. Only arrays and iterables are allowed`);return this.check(t)?this:null}onDestroy(){}check(t){this._reset();let e,n,s,r=this._itHead,i=!1;if(Array.isArray(t)){this.length=t.length;for(let e=0;e<this.length;e++)n=t[e],s=this._trackByFn(e,n),null!==r&&Object.is(r.trackById,s)?(i&&(r=this._verifyReinsertion(r,n,s,e)),Object.is(r.item,n)||this._addIdentityChange(r,n)):(r=this._mismatch(r,n,s,e),i=!0),r=r._next}else e=0,function(t,e){if(Array.isArray(t))for(let n=0;n<t.length;n++)e(t[n]);else{const n=t[Li()]();let s;for(;!(s=n.next()).done;)e(s.value)}}(t,t=>{s=this._trackByFn(e,t),null!==r&&Object.is(r.trackById,s)?(i&&(r=this._verifyReinsertion(r,t,s,e)),Object.is(r.item,t)||this._addIdentityChange(r,t)):(r=this._mismatch(r,t,s,e),i=!0),r=r._next,e++}),this.length=e;return this._truncate(r),this.collection=t,this.isDirty}get isDirty(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}_reset(){if(this.isDirty){let t;for(t=this._previousItHead=this._itHead;null!==t;t=t._next)t._nextPrevious=t._next;for(t=this._additionsHead;null!==t;t=t._nextAdded)t.previousIndex=t.currentIndex;for(this._additionsHead=this._additionsTail=null,t=this._movesHead;null!==t;t=t._nextMoved)t.previousIndex=t.currentIndex;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(t,e,n,s){let r;return null===t?r=this._itTail:(r=t._prev,this._remove(t)),null!==(t=null===this._linkedRecords?null:this._linkedRecords.get(n,s))?(Object.is(t.item,e)||this._addIdentityChange(t,e),this._moveAfter(t,r,s)):null!==(t=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null))?(Object.is(t.item,e)||this._addIdentityChange(t,e),this._reinsertAfter(t,r,s)):t=this._addAfter(new Ko(e,n),r,s),t}_verifyReinsertion(t,e,n,s){let r=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null);return null!==r?t=this._reinsertAfter(r,t._prev,s):t.currentIndex!=s&&(t.currentIndex=s,this._addToMoves(t,s)),t}_truncate(t){for(;null!==t;){const e=t._next;this._addToRemovals(this._unlink(t)),t=e}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(t,e,n){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(t);const s=t._prevRemoved,r=t._nextRemoved;return null===s?this._removalsHead=r:s._nextRemoved=r,null===r?this._removalsTail=s:r._prevRemoved=s,this._insertAfter(t,e,n),this._addToMoves(t,n),t}_moveAfter(t,e,n){return this._unlink(t),this._insertAfter(t,e,n),this._addToMoves(t,n),t}_addAfter(t,e,n){return this._insertAfter(t,e,n),this._additionsTail=null===this._additionsTail?this._additionsHead=t:this._additionsTail._nextAdded=t,t}_insertAfter(t,e,n){const s=null===e?this._itHead:e._next;return t._next=s,t._prev=e,null===s?this._itTail=t:s._prev=t,null===e?this._itHead=t:e._next=t,null===this._linkedRecords&&(this._linkedRecords=new Zo),this._linkedRecords.put(t),t.currentIndex=n,t}_remove(t){return this._addToRemovals(this._unlink(t))}_unlink(t){null!==this._linkedRecords&&this._linkedRecords.remove(t);const e=t._prev,n=t._next;return null===e?this._itHead=n:e._next=n,null===n?this._itTail=e:n._prev=e,t}_addToMoves(t,e){return t.previousIndex===e||(this._movesTail=null===this._movesTail?this._movesHead=t:this._movesTail._nextMoved=t),t}_addToRemovals(t){return null===this._unlinkedRecords&&(this._unlinkedRecords=new Zo),this._unlinkedRecords.put(t),t.currentIndex=null,t._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=t,t._prevRemoved=null):(t._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=t),t}_addIdentityChange(t,e){return t.item=e,this._identityChangesTail=null===this._identityChangesTail?this._identityChangesHead=t:this._identityChangesTail._nextIdentityChange=t,t}}class Ko{constructor(t,e){this.item=t,this.trackById=e,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}class Go{constructor(){this._head=null,this._tail=null}add(t){null===this._head?(this._head=this._tail=t,t._nextDup=null,t._prevDup=null):(this._tail._nextDup=t,t._prevDup=this._tail,t._nextDup=null,this._tail=t)}get(t,e){let n;for(n=this._head;null!==n;n=n._nextDup)if((null===e||e<=n.currentIndex)&&Object.is(n.trackById,t))return n;return null}remove(t){const e=t._prevDup,n=t._nextDup;return null===e?this._head=n:e._nextDup=n,null===n?this._tail=e:n._prevDup=e,null===this._head}}class Zo{constructor(){this.map=new Map}put(t){const e=t.trackById;let n=this.map.get(e);n||(n=new Go,this.map.set(e,n)),n.add(t)}get(t,e){const n=this.map.get(t);return n?n.get(t,e):null}remove(t){const e=t.trackById;return this.map.get(e).remove(t)&&this.map.delete(e),t}get isEmpty(){return 0===this.map.size}clear(){this.map.clear()}}function Yo(t,e,n){const s=t.previousIndex;if(null===s)return s;let r=0;return n&&s<n.length&&(r=n[s]),s+e+r}class Xo{constructor(){}supports(t){return t instanceof Map||Fi(t)}create(){return new Jo}}class Jo{constructor(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}get isDirty(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}forEachItem(t){let e;for(e=this._mapHead;null!==e;e=e._next)t(e)}forEachPreviousItem(t){let e;for(e=this._previousMapHead;null!==e;e=e._nextPrevious)t(e)}forEachChangedItem(t){let e;for(e=this._changesHead;null!==e;e=e._nextChanged)t(e)}forEachAddedItem(t){let e;for(e=this._additionsHead;null!==e;e=e._nextAdded)t(e)}forEachRemovedItem(t){let e;for(e=this._removalsHead;null!==e;e=e._nextRemoved)t(e)}diff(t){if(t){if(!(t instanceof Map||Fi(t)))throw new Error(`Error trying to diff '${et(t)}'. Only maps and objects are allowed`)}else t=new Map;return this.check(t)?this:null}onDestroy(){}check(t){this._reset();let e=this._mapHead;if(this._appendAfter=null,this._forEach(t,(t,n)=>{if(e&&e.key===n)this._maybeAddToChanges(e,t),this._appendAfter=e,e=e._next;else{const s=this._getOrCreateRecordForKey(n,t);e=this._insertBeforeOrAppend(e,s)}}),e){e._prev&&(e._prev._next=null),this._removalsHead=e;for(let t=e;null!==t;t=t._nextRemoved)t===this._mapHead&&(this._mapHead=null),this._records.delete(t.key),t._nextRemoved=t._next,t.previousValue=t.currentValue,t.currentValue=null,t._prev=null,t._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}_insertBeforeOrAppend(t,e){if(t){const n=t._prev;return e._next=t,e._prev=n,t._prev=e,n&&(n._next=e),t===this._mapHead&&(this._mapHead=e),this._appendAfter=t,t}return this._appendAfter?(this._appendAfter._next=e,e._prev=this._appendAfter):this._mapHead=e,this._appendAfter=e,null}_getOrCreateRecordForKey(t,e){if(this._records.has(t)){const n=this._records.get(t);this._maybeAddToChanges(n,e);const s=n._prev,r=n._next;return s&&(s._next=r),r&&(r._prev=s),n._next=null,n._prev=null,n}const n=new ta(t);return this._records.set(t,n),n.currentValue=e,this._addToAdditions(n),n}_reset(){if(this.isDirty){let t;for(this._previousMapHead=this._mapHead,t=this._previousMapHead;null!==t;t=t._next)t._nextPrevious=t._next;for(t=this._changesHead;null!==t;t=t._nextChanged)t.previousValue=t.currentValue;for(t=this._additionsHead;null!=t;t=t._nextAdded)t.previousValue=t.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}_maybeAddToChanges(t,e){Object.is(e,t.currentValue)||(t.previousValue=t.currentValue,t.currentValue=e,this._addToChanges(t))}_addToAdditions(t){null===this._additionsHead?this._additionsHead=this._additionsTail=t:(this._additionsTail._nextAdded=t,this._additionsTail=t)}_addToChanges(t){null===this._changesHead?this._changesHead=this._changesTail=t:(this._changesTail._nextChanged=t,this._changesTail=t)}_forEach(t,e){t instanceof Map?t.forEach(e):Object.keys(t).forEach(n=>e(t[n],n))}}class ta{constructor(t){this.key=t,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}let ea=(()=>{class t{constructor(t){this.factories=t}static create(e,n){if(null!=n){const t=n.factories.slice();e=e.concat(t)}return new t(e)}static extend(e){return{provide:t,useFactory:n=>{if(!n)throw new Error(\"Cannot extend IterableDiffers without a parent injector\");return t.create(e,n)},deps:[[t,new rs,new ns]]}}find(t){const e=this.factories.find(e=>e.supports(t));if(null!=e)return e;throw new Error(`Cannot find a differ supporting object '${t}' of type '${n=t,n.name||typeof n}'`);var n}}return t.\\u0275prov=at({token:t,providedIn:\"root\",factory:()=>new t([new qo])}),t})(),na=(()=>{class t{constructor(t){this.factories=t}static create(e,n){if(n){const t=n.factories.slice();e=e.concat(t)}return new t(e)}static extend(e){return{provide:t,useFactory:n=>{if(!n)throw new Error(\"Cannot extend KeyValueDiffers without a parent injector\");return t.create(e,n)},deps:[[t,new rs,new ns]]}}find(t){const e=this.factories.find(e=>e.supports(t));if(e)return e;throw new Error(`Cannot find a differ supporting object '${t}'`)}}return t.\\u0275prov=at({token:t,providedIn:\"root\",factory:()=>new t([new Xo])}),t})();function sa(t,e,n,s,r=!1){for(;null!==n;){const i=e[n.index];if(null!==i&&s.push(ge(i)),Zt(i))for(let t=Kt;t<i.length;t++){const e=i[t],n=e[1].firstChild;null!==n&&sa(e[1],e,n,s)}const o=n.type;if(8&o)sa(t,e,n.child,s);else if(32&o){const t=Is(n,e);let r;for(;r=t();)s.push(r)}else if(16&o){const t=e[16],r=t[6].projection[n.projection];if(Array.isArray(r))s.push(...r);else{const e=Os(t);sa(e[1],e,r,s,!0)}}n=r?n.projectionNext:n.next}return s}class ra{constructor(t,e){this._lView=t,this._cdRefInjectingView=e,this._appRef=null,this._viewContainerRef=null}get rootNodes(){const t=this._lView,e=t[1];return sa(e,t,e.firstChild,[])}get context(){return this._lView[8]}get destroyed(){return 256==(256&this._lView[2])}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._viewContainerRef){const t=this._viewContainerRef.indexOf(this);t>-1&&this._viewContainerRef.detach(t),this._viewContainerRef=null}Ms(this._lView[1],this._lView)}onDestroy(t){Dr(this._lView[1],this._lView,null,t)}markForCheck(){Xr(this._cdRefInjectingView||this._lView)}detach(){this._lView[2]&=-129}reattach(){this._lView[2]|=128}detectChanges(){Jr(this._lView[1],this._lView,this.context)}checkNoChanges(){!function(t,e,n){Me(!0);try{Jr(t,e,n)}finally{Me(!1)}}(this._lView[1],this._lView,this.context)}attachToViewContainerRef(t){if(this._appRef)throw new Error(\"This view is already attached directly to the ApplicationRef!\");this._viewContainerRef=t}detachFromAppRef(){var t;this._appRef=null,Ys(this._lView[1],t=this._lView,t[11],2,null,null)}attachToAppRef(t){if(this._viewContainerRef)throw new Error(\"This view is already attached to a ViewContainer!\");this._appRef=t}}class ia extends ra{constructor(t){super(t),this._view=t}detectChanges(){ti(this._view)}checkNoChanges(){!function(t){Me(!0);try{ti(t)}finally{Me(!1)}}(this._view)}get context(){return null}}const oa=function(t=!1){return function(t,e,n){if(!n&&Xt(t)){const n=be(t.index,e);return new ra(n,n)}return 47&t.type?new ra(e[16],e):null}(Pe(),Ie(),t)};let aa=(()=>{class t{}return t.__NG_ELEMENT_ID__=oa,t.__ChangeDetectorRef__=!0,t})();const la=[new Xo],ca=new ea([new qo]),ua=new na(la),ha=function(){return ma(Pe(),Ie())};let da=(()=>{class t{}return t.__NG_ELEMENT_ID__=ha,t})();const pa=da,fa=class extends pa{constructor(t,e,n){super(),this._declarationLView=t,this._declarationTContainer=e,this.elementRef=n}createEmbeddedView(t){const e=this._declarationTContainer.tViews,n=Sr(this._declarationLView,e,t,16,null,e.declTNode,null,null,null,null);n[17]=this._declarationLView[this._declarationTContainer.index];const s=this._declarationLView[19];return null!==s&&(n[19]=s.createEmbeddedView(e)),kr(e,n,t),new ra(n)}};function ma(t,e){return 4&t.type?new fa(e,t,No(t,e)):null}class ga{}class ya{}const _a=function(){return Ca(Pe(),Ie())};let va=(()=>{class t{}return t.__NG_ELEMENT_ID__=_a,t})();const ba=va,wa=class extends ba{constructor(t,e,n){super(),this._lContainer=t,this._hostTNode=e,this._hostLView=n}get element(){return No(this._hostTNode,this._hostLView)}get injector(){return new Mn(this._hostTNode,this._hostLView)}get parentInjector(){const t=kn(this._hostTNode,this._hostLView);if(yn(t)){const e=vn(t,this._hostLView),n=_n(t);return new Mn(e[1].data[n+8],e)}return new Mn(null,this._hostLView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(t){const e=xa(this._lContainer);return null!==e&&e[t]||null}get length(){return this._lContainer.length-Kt}createEmbeddedView(t,e,n){const s=t.createEmbeddedView(e||{});return this.insert(s,n),s}createComponent(t,e,n,s,r){const i=n||this.parentInjector;if(!r&&null==t.ngModule&&i){const t=i.get(ga,null);t&&(r=t)}const o=t.create(i,s,void 0,r);return this.insert(o.hostView,e),o}insert(t,e){const n=t._lView,s=n[1];if(Zt(n[3])){const e=this.indexOf(t);if(-1!==e)this.detach(e);else{const e=n[3],s=new wa(e,e[6],e[3]);s.detach(s.indexOf(t))}}const r=this._adjustIndex(e),i=this._lContainer;!function(t,e,n,s){const r=Kt+s,i=n.length;s>0&&(n[r-1][4]=e),s<i-Kt?(e[4]=n[r],Gn(n,Kt+s,e)):(n.push(e),e[4]=null),e[3]=n;const o=e[17];null!==o&&n!==o&&function(t,e){const n=t[9];e[16]!==e[3][3][16]&&(t[2]=!0),null===n?t[9]=[e]:n.push(e)}(o,e);const a=e[19];null!==a&&a.insertView(t),e[2]|=128}(s,n,i,r);const o=Gs(r,i),a=n[11],l=$s(a,i[7]);return null!==l&&function(t,e,n,s,r,i){s[0]=r,s[6]=e,Ys(t,s,n,1,r,i)}(s,i[6],a,n,l,o),t.attachToViewContainerRef(this),Gn(Sa(i),r,t),t}move(t,e){return this.insert(t,e)}indexOf(t){const e=xa(this._lContainer);return null!==e?e.indexOf(t):-1}remove(t){const e=this._adjustIndex(t,-1),n=Vs(this._lContainer,e);n&&(Zn(Sa(this._lContainer),e),Ms(n[1],n))}detach(t){const e=this._adjustIndex(t,-1),n=Vs(this._lContainer,e);return n&&null!=Zn(Sa(this._lContainer),e)?new ra(n):null}_adjustIndex(t,e=0){return null==t?this.length+e:t}};function xa(t){return t[8]}function Sa(t){return t[8]||(t[8]=[])}function Ca(t,e){let n;const s=e[t.index];if(Zt(s))n=s;else{let r;if(8&t.type)r=ge(s);else{const n=e[11];r=n.createComment(\"\");const s=_e(t,e);Bs(n,$s(n,s),r,function(t,e){return fe(t)?t.nextSibling(e):e.nextSibling}(n,s),!1)}e[t.index]=n=Wr(s,e,r,t),Yr(e,n)}return new wa(n,t,e)}const Ea={};class ka extends Do{constructor(t){super(),this.ngModule=t}resolveComponentFactory(t){const e=qt(t);return new Ia(e,this.ngModule)}}function Ta(t){const e=[];for(let n in t)t.hasOwnProperty(n)&&e.push({propName:t[n],templateName:n});return e}const Aa=new $n(\"SCHEDULER_TOKEN\",{providedIn:\"root\",factory:()=>ks});class Ia extends Po{constructor(t,e){super(),this.componentDef=t,this.ngModule=e,this.componentType=t.type,this.selector=t.selectors.map(dr).join(\",\"),this.ngContentSelectors=t.ngContentSelectors?t.ngContentSelectors:[],this.isBoundToModule=!!e}get inputs(){return Ta(this.componentDef.inputs)}get outputs(){return Ta(this.componentDef.outputs)}create(t,e,n,s){const r=(s=s||this.ngModule)?function(t,e){return{get:(n,s,r)=>{const i=t.get(n,Ea,r);return i!==Ea||s===Ea?i:e.get(n,s,r)}}}(t,s.injector):t,i=r.get(jo,me),o=r.get(Ho,null),a=i.createRenderer(null,this.componentDef),l=this.componentDef.selectors[0][0]||\"div\",c=n?function(t,e,n){if(fe(t))return t.selectRootElement(e,n===xt.ShadowDom);let s=\"string\"==typeof e?t.querySelector(e):e;return s.textContent=\"\",s}(a,n,this.componentDef.encapsulation):Fs(i.createRenderer(null,this.componentDef),l,function(t){const e=t.toLowerCase();return\"svg\"===e?de:\"math\"===e?\"http://www.w3.org/1998/MathML/\":null}(l)),u=this.componentDef.onPush?576:528,h={components:[],scheduler:ks,clean:ni,playerHandler:null,flags:0},d=Lr(0,null,null,1,0,null,null,null,null,null),p=Sr(null,d,h,u,null,null,i,a,o,r);let f,m;Ke(p);try{const t=function(t,e,n,s,r,i){const o=n[1];n[20]=t;const a=Cr(o,20,2,\"#host\",null),l=a.mergedAttrs=e.hostAttrs;null!==l&&(li(a,l,!0),null!==t&&(dn(r,t,l),null!==a.classes&&tr(r,t,a.classes),null!==a.styles&&Js(r,t,a.styles)));const c=s.createRenderer(t,e),u=Sr(n,Pr(e),null,e.onPush?64:16,n[20],a,s,c,null,null);return o.firstCreatePass&&(Tn(Sn(a,n),o,e.type),Ur(o,a),Hr(a,n.length,1)),Yr(n,u),n[20]=u}(c,this.componentDef,p,i,a);if(c)if(n)dn(a,c,[\"ng-version\",$o.full]);else{const{attrs:t,classes:e}=function(t){const e=[],n=[];let s=1,r=2;for(;s<t.length;){let i=t[s];if(\"string\"==typeof i)2===r?\"\"!==i&&e.push(i,t[++s]):8===r&&n.push(i);else{if(!ar(r))break;r=i}s++}return{attrs:e,classes:n}}(this.componentDef.selectors[0]);t&&dn(a,c,t),e&&e.length>0&&tr(a,c,e.join(\" \"))}if(m=ve(d,Wt),void 0!==e){const t=m.projection=[];for(let n=0;n<this.ngContentSelectors.length;n++){const s=e[n];t.push(null!=s?Array.from(s):null)}}f=function(t,e,n,s,r){const i=n[1],o=function(t,e,n){const s=Pe();t.firstCreatePass&&(n.providersResolver&&n.providersResolver(n),zr(t,s,e,Er(t,e,1,null),n));const r=Fn(e,t,s.directiveStart,s);Es(r,e);const i=_e(s,e);return i&&Es(i,e),r}(i,n,e);if(s.components.push(o),t[8]=o,r&&r.forEach(t=>t(o,e)),e.contentQueries){const t=Pe();e.contentQueries(1,o,t.directiveStart)}const a=Pe();return!i.firstCreatePass||null===e.hostBindings&&null===e.hostAttrs||(en(a.index),Mr(n[1],a,0,a.directiveStart,a.directiveEnd,e),jr(e,o)),o}(t,this.componentDef,p,h,[ki]),kr(d,p,null)}finally{Je()}return new Oa(this.componentType,f,No(m,p),p,m)}}class Oa extends class{}{constructor(t,e,n,s,r){super(),this.location=n,this._rootLView=s,this._tNode=r,this.instance=e,this.hostView=this.changeDetectorRef=new ia(s),this.componentType=t}get injector(){return new Mn(this._tNode,this._rootLView)}destroy(){this.hostView.destroy()}onDestroy(t){this.hostView.onDestroy(t)}}const Ra=new Map;class Pa extends ga{constructor(t,e){super(),this._parent=e,this._bootstrapComponents=[],this.injector=this,this.destroyCbs=[],this.componentFactoryResolver=new ka(this);const n=Qt(t),s=t[Dt]||null;s&&So(s),this._bootstrapComponents=Ts(n.bootstrap),this._r3Injector=yi(t,e,[{provide:ga,useValue:this},{provide:Do,useValue:this.componentFactoryResolver}],et(t)),this._r3Injector._resolveInjectorDefTypes(),this.instance=this.get(t)}get(t,e=Ei.THROW_IF_NOT_FOUND,n=gt.Default){return t===Ei||t===ga||t===ci?this:this._r3Injector.get(t,e,n)}destroy(){const t=this._r3Injector;!t.destroyed&&t.destroy(),this.destroyCbs.forEach(t=>t()),this.destroyCbs=null}onDestroy(t){this.destroyCbs.push(t)}}class La extends ya{constructor(t){super(),this.moduleType=t,null!==Qt(t)&&function(t){const e=new Set;!function t(n){const s=Qt(n,!0),r=s.id;null!==r&&(function(t,e,n){if(e&&e!==n)throw new Error(`Duplicate module registered for ${t} - ${et(e)} vs ${et(e.name)}`)}(r,Ra.get(r),n),Ra.set(r,n));const i=Ts(s.imports);for(const o of i)e.has(o)||(e.add(o),t(o))}(t)}(t)}create(t){return new Pa(this.moduleType,t)}}const Da=class extends S{constructor(t=!1){super(),this.__isAsync=t}emit(t){super.next(t)}subscribe(t,e,n){let s,r=t=>null,i=()=>null;t&&\"object\"==typeof t?(s=this.__isAsync?e=>{setTimeout(()=>t.next(e))}:e=>{t.next(e)},t.error&&(r=this.__isAsync?e=>{setTimeout(()=>t.error(e))}:e=>{t.error(e)}),t.complete&&(i=this.__isAsync?()=>{setTimeout(()=>t.complete())}:()=>{t.complete()})):(s=this.__isAsync?e=>{setTimeout(()=>t(e))}:e=>{t(e)},e&&(r=this.__isAsync?t=>{setTimeout(()=>e(t))}:t=>{e(t)}),n&&(i=this.__isAsync?()=>{setTimeout(()=>n())}:()=>{n()}));const o=super.subscribe(s,r,i);return t instanceof h&&t.add(o),o}};function Fa(){return this._results[Li()]()}class Na{constructor(){this.dirty=!0,this._results=[],this.changes=new Da,this.length=0;const t=Li(),e=Na.prototype;e[t]||(e[t]=Fa)}map(t){return this._results.map(t)}filter(t){return this._results.filter(t)}find(t){return this._results.find(t)}reduce(t,e){return this._results.reduce(t,e)}forEach(t){this._results.forEach(t)}some(t){return this._results.some(t)}toArray(){return this._results.slice()}toString(){return this._results.toString()}reset(t){this._results=Wn(t),this.dirty=!1,this.length=this._results.length,this.last=this._results[this.length-1],this.first=this._results[0]}notifyOnChanges(){this.changes.emit(this)}setDirty(){this.dirty=!0}destroy(){this.changes.complete(),this.changes.unsubscribe()}}class Va{constructor(t){this.queryList=t,this.matches=null}clone(){return new Va(this.queryList)}setDirty(){this.queryList.setDirty()}}class Ma{constructor(t=[]){this.queries=t}createEmbeddedView(t){const e=t.queries;if(null!==e){const n=null!==t.contentQueries?t.contentQueries[0]:e.length,s=[];for(let t=0;t<n;t++){const n=e.getByIndex(t);s.push(this.queries[n.indexInDeclarationView].clone())}return new Ma(s)}return null}insertView(t){this.dirtyQueriesWithMatches(t)}detachView(t){this.dirtyQueriesWithMatches(t)}dirtyQueriesWithMatches(t){for(let e=0;e<this.queries.length;e++)null!==Ya(t,e).matches&&this.queries[e].setDirty()}}class ja{constructor(t,e,n,s=null){this.predicate=t,this.descendants=e,this.isStatic=n,this.read=s}}class Ua{constructor(t=[]){this.queries=t}elementStart(t,e){for(let n=0;n<this.queries.length;n++)this.queries[n].elementStart(t,e)}elementEnd(t){for(let e=0;e<this.queries.length;e++)this.queries[e].elementEnd(t)}embeddedTView(t){let e=null;for(let n=0;n<this.length;n++){const s=null!==e?e.length:0,r=this.getByIndex(n).embeddedTView(t,s);r&&(r.indexInDeclarationView=n,null!==e?e.push(r):e=[r])}return null!==e?new Ua(e):null}template(t,e){for(let n=0;n<this.queries.length;n++)this.queries[n].template(t,e)}getByIndex(t){return this.queries[t]}get length(){return this.queries.length}track(t){this.queries.push(t)}}class Ba{constructor(t,e=-1){this.metadata=t,this.matches=null,this.indexInDeclarationView=-1,this.crossesNgTemplate=!1,this._appliesToNextNode=!0,this._declarationNodeIndex=e}elementStart(t,e){this.isApplyingToNode(e)&&this.matchTNode(t,e)}elementEnd(t){this._declarationNodeIndex===t.index&&(this._appliesToNextNode=!1)}template(t,e){this.elementStart(t,e)}embeddedTView(t,e){return this.isApplyingToNode(t)?(this.crossesNgTemplate=!0,this.addMatch(-t.index,e),new Ba(this.metadata)):null}isApplyingToNode(t){if(this._appliesToNextNode&&!1===this.metadata.descendants){const e=this._declarationNodeIndex;let n=t.parent;for(;null!==n&&8&n.type&&n.index!==e;)n=n.parent;return e===(null!==n?n.index:-1)}return this._appliesToNextNode}matchTNode(t,e){const n=this.metadata.predicate;if(Array.isArray(n))for(let s=0;s<n.length;s++){const r=n[s];this.matchTNodeWithReadOption(t,e,Ha(e,r)),this.matchTNodeWithReadOption(t,e,Dn(e,t,r,!1,!1))}else n===da?4&e.type&&this.matchTNodeWithReadOption(t,e,-1):this.matchTNodeWithReadOption(t,e,Dn(e,t,n,!1,!1))}matchTNodeWithReadOption(t,e,n){if(null!==n){const s=this.metadata.read;if(null!==s)if(s===Mo||s===va||s===da&&4&e.type)this.addMatch(e.index,-2);else{const n=Dn(e,t,s,!1,!1);null!==n&&this.addMatch(e.index,n)}else this.addMatch(e.index,n)}}addMatch(t,e){null===this.matches?this.matches=[t,e]:this.matches.push(t,e)}}function Ha(t,e){const n=t.localNames;if(null!==n)for(let s=0;s<n.length;s+=2)if(n[s]===e)return n[s+1];return null}function za(t,e,n,s){return-1===n?function(t,e){return 11&t.type?No(t,e):4&t.type?ma(t,e):null}(e,t):-2===n?function(t,e,n){return n===Mo?No(e,t):n===da?ma(e,t):n===va?Ca(e,t):void 0}(t,e,s):Fn(t,t[1],n,e)}function $a(t,e,n,s){const r=e[19].queries[s];if(null===r.matches){const s=t.data,i=n.matches,o=[];for(let t=0;t<i.length;t+=2){const r=i[t];o.push(r<0?null:za(e,s[r],i[t+1],n.metadata.read))}r.matches=o}return r.matches}function qa(t,e,n,s){const r=t.queries.getByIndex(n),i=r.matches;if(null!==i){const o=$a(t,e,r,n);for(let t=0;t<i.length;t+=2){const n=i[t];if(n>0)s.push(o[t/2]);else{const r=i[t+1],o=e[-n];for(let t=Kt;t<o.length;t++){const e=o[t];e[17]===e[3]&&qa(e[1],e,r,s)}if(null!==o[9]){const t=o[9];for(let e=0;e<t.length;e++){const n=t[e];qa(n[1],n,r,s)}}}}}return s}function Qa(t){const e=Ie(),n=Oe(),s=$e();qe(s+1);const r=Ya(n,s);if(t.dirty&&xe(e)===r.metadata.isStatic){if(null===r.matches)t.reset([]);else{const i=r.crossesNgTemplate?qa(n,e,s,[]):$a(n,e,r,s);t.reset(i),t.notifyOnChanges()}return!0}return!1}function Wa(t,e,n,s){!function(t,e,n,s,r,i,o,a){t.firstCreatePass&&(Za(t,new ja(n,s,false,r),o.index),function(t,e){const n=t.contentQueries||(t.contentQueries=[]);e!==(n.length?n[n.length-1]:-1)&&n.push(t.queries.length-1,e)}(t,a)),Ga(t,e)}(Oe(),Ie(),e,n,s,0,Pe(),t)}function Ka(){return t=Ie(),e=$e(),t[19].queries[e].queryList;var t,e}function Ga(t,e){const n=new Na;Dr(t,e,n,n.destroy),null===e[19]&&(e[19]=new Ma),e[19].queries.push(new Va(n))}function Za(t,e,n){null===t.queries&&(t.queries=new Ua),t.queries.track(new Ba(e,n))}function Ya(t,e){return t.queries.getByIndex(e)}const Xa=new $n(\"Application Initializer\");let Ja=(()=>{class t{constructor(t){this.appInits=t,this.resolve=Fo,this.reject=Fo,this.initialized=!1,this.done=!1,this.donePromise=new Promise((t,e)=>{this.resolve=t,this.reject=e})}runInitializers(){if(this.initialized)return;const t=[],e=()=>{this.done=!0,this.resolve()};if(this.appInits)for(let n=0;n<this.appInits.length;n++){const e=this.appInits[n]();Qi(e)&&t.push(e)}Promise.all(t).then(()=>{e()}).catch(t=>{this.reject(t)}),0===t.length&&e(),this.initialized=!0}}return t.\\u0275fac=function(e){return new(e||t)(ds(Xa,8))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();const tl=new $n(\"AppId\"),el={provide:tl,useFactory:function(){return`${nl()}${nl()}${nl()}`},deps:[]};function nl(){return String.fromCharCode(97+Math.floor(25*Math.random()))}const sl=new $n(\"Platform Initializer\"),rl=new $n(\"Platform ID\"),il=new $n(\"appBootstrapListener\");let ol=(()=>{class t{log(t){console.log(t)}warn(t){console.warn(t)}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();const al=new $n(\"LocaleId\"),ll=new $n(\"DefaultCurrencyCode\");class cl{constructor(t,e){this.ngModuleFactory=t,this.componentFactories=e}}const ul=function(t){return new La(t)},hl=ul,dl=function(t){return Promise.resolve(ul(t))},pl=function(t){const e=ul(t),n=Ts(Qt(t).declarations).reduce((t,e)=>{const n=qt(e);return n&&t.push(new Ia(n)),t},[]);return new cl(e,n)},fl=pl,ml=function(t){return Promise.resolve(pl(t))};let gl=(()=>{class t{constructor(){this.compileModuleSync=hl,this.compileModuleAsync=dl,this.compileModuleAndAllComponentsSync=fl,this.compileModuleAndAllComponentsAsync=ml}clearCache(){}clearCacheFor(t){}getModuleId(t){}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();const yl=(()=>Promise.resolve(0))();function _l(t){\"undefined\"==typeof Zone?yl.then(()=>{t&&t.apply(null,null)}):Zone.current.scheduleMicroTask(\"scheduleMicrotask\",t)}class vl{constructor({enableLongStackTrace:t=!1,shouldCoalesceEventChangeDetection:e=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new Da(!1),this.onMicrotaskEmpty=new Da(!1),this.onStable=new Da(!1),this.onError=new Da(!1),\"undefined\"==typeof Zone)throw new Error(\"In this configuration Angular requires Zone.js\");Zone.assertZonePatched();const n=this;n._nesting=0,n._outer=n._inner=Zone.current,Zone.TaskTrackingZoneSpec&&(n._inner=n._inner.fork(new Zone.TaskTrackingZoneSpec)),t&&Zone.longStackTraceZoneSpec&&(n._inner=n._inner.fork(Zone.longStackTraceZoneSpec)),n.shouldCoalesceEventChangeDetection=e,n.lastRequestAnimationFrameId=-1,n.nativeRequestAnimationFrame=function(){let t=Tt.requestAnimationFrame,e=Tt.cancelAnimationFrame;if(\"undefined\"!=typeof Zone&&t&&e){const n=t[Zone.__symbol__(\"OriginalDelegate\")];n&&(t=n);const s=e[Zone.__symbol__(\"OriginalDelegate\")];s&&(e=s)}return{nativeRequestAnimationFrame:t,nativeCancelAnimationFrame:e}}().nativeRequestAnimationFrame,function(t){const e=!!t.shouldCoalesceEventChangeDetection&&t.nativeRequestAnimationFrame&&(()=>{!function(t){-1===t.lastRequestAnimationFrameId&&(t.lastRequestAnimationFrameId=t.nativeRequestAnimationFrame.call(Tt,()=>{t.fakeTopEventTask||(t.fakeTopEventTask=Zone.root.scheduleEventTask(\"fakeTopEventTask\",()=>{t.lastRequestAnimationFrameId=-1,xl(t),wl(t)},void 0,()=>{},()=>{})),t.fakeTopEventTask.invoke()}),xl(t))}(t)});t._inner=t._inner.fork({name:\"angular\",properties:{isAngularZone:!0,maybeDelayChangeDetection:e},onInvokeTask:(n,s,r,i,o,a)=>{try{return Sl(t),n.invokeTask(r,i,o,a)}finally{e&&\"eventTask\"===i.type&&e(),Cl(t)}},onInvoke:(e,n,s,r,i,o,a)=>{try{return Sl(t),e.invoke(s,r,i,o,a)}finally{Cl(t)}},onHasTask:(e,n,s,r)=>{e.hasTask(s,r),n===s&&(\"microTask\"==r.change?(t._hasPendingMicrotasks=r.microTask,xl(t),wl(t)):\"macroTask\"==r.change&&(t.hasPendingMacrotasks=r.macroTask))},onHandleError:(e,n,s,r)=>(e.handleError(s,r),t.runOutsideAngular(()=>t.onError.emit(r)),!1)})}(n)}static isInAngularZone(){return!0===Zone.current.get(\"isAngularZone\")}static assertInAngularZone(){if(!vl.isInAngularZone())throw new Error(\"Expected to be in Angular Zone, but it is not!\")}static assertNotInAngularZone(){if(vl.isInAngularZone())throw new Error(\"Expected to not be in Angular Zone, but it is!\")}run(t,e,n){return this._inner.run(t,e,n)}runTask(t,e,n,s){const r=this._inner,i=r.scheduleEventTask(\"NgZoneEvent: \"+s,t,bl,Fo,Fo);try{return r.runTask(i,e,n)}finally{r.cancelTask(i)}}runGuarded(t,e,n){return this._inner.runGuarded(t,e,n)}runOutsideAngular(t){return this._outer.run(t)}}const bl={};function wl(t){if(0==t._nesting&&!t.hasPendingMicrotasks&&!t.isStable)try{t._nesting++,t.onMicrotaskEmpty.emit(null)}finally{if(t._nesting--,!t.hasPendingMicrotasks)try{t.runOutsideAngular(()=>t.onStable.emit(null))}finally{t.isStable=!0}}}function xl(t){t.hasPendingMicrotasks=!!(t._hasPendingMicrotasks||t.shouldCoalesceEventChangeDetection&&-1!==t.lastRequestAnimationFrameId)}function Sl(t){t._nesting++,t.isStable&&(t.isStable=!1,t.onUnstable.emit(null))}function Cl(t){t._nesting--,wl(t)}class El{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new Da,this.onMicrotaskEmpty=new Da,this.onStable=new Da,this.onError=new Da}run(t,e,n){return t.apply(e,n)}runGuarded(t,e,n){return t.apply(e,n)}runOutsideAngular(t){return t()}runTask(t,e,n,s){return t.apply(e,n)}}let kl=(()=>{class t{constructor(t){this._ngZone=t,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,this._watchAngularEvents(),t.run(()=>{this.taskTrackingZone=\"undefined\"==typeof Zone?null:Zone.current.get(\"TaskTrackingZone\")})}_watchAngularEvents(){this._ngZone.onUnstable.subscribe({next:()=>{this._didWork=!0,this._isZoneStable=!1}}),this._ngZone.runOutsideAngular(()=>{this._ngZone.onStable.subscribe({next:()=>{vl.assertNotInAngularZone(),_l(()=>{this._isZoneStable=!0,this._runCallbacksIfReady()})}})})}increasePendingRequestCount(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}decreasePendingRequestCount(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error(\"pending async requests below zero\");return this._runCallbacksIfReady(),this._pendingCount}isStable(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}_runCallbacksIfReady(){if(this.isStable())_l(()=>{for(;0!==this._callbacks.length;){let t=this._callbacks.pop();clearTimeout(t.timeoutId),t.doneCb(this._didWork)}this._didWork=!1});else{let t=this.getPendingTasks();this._callbacks=this._callbacks.filter(e=>!e.updateCb||!e.updateCb(t)||(clearTimeout(e.timeoutId),!1)),this._didWork=!0}}getPendingTasks(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map(t=>({source:t.source,creationLocation:t.creationLocation,data:t.data})):[]}addCallback(t,e,n){let s=-1;e&&e>0&&(s=setTimeout(()=>{this._callbacks=this._callbacks.filter(t=>t.timeoutId!==s),t(this._didWork,this.getPendingTasks())},e)),this._callbacks.push({doneCb:t,timeoutId:s,updateCb:n})}whenStable(t,e,n){if(n&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');this.addCallback(t,e,n),this._runCallbacksIfReady()}getPendingRequestCount(){return this._pendingCount}findProviders(t,e,n){return[]}}return t.\\u0275fac=function(e){return new(e||t)(ds(vl))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),Tl=(()=>{class t{constructor(){this._applications=new Map,Ol.addToWindow(this)}registerApplication(t,e){this._applications.set(t,e)}unregisterApplication(t){this._applications.delete(t)}unregisterAllApplications(){this._applications.clear()}getTestability(t){return this._applications.get(t)||null}getAllTestabilities(){return Array.from(this._applications.values())}getAllRootElements(){return Array.from(this._applications.keys())}findTestabilityInTree(t,e=!0){return Ol.findTestabilityInTree(this,t,e)}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();class Al{addToWindow(t){}findTestabilityInTree(t,e,n){return null}}let Il,Ol=new Al,Rl=!0,Pl=!1;function Ll(){return Pl=!0,Rl}const Dl=new $n(\"AllowMultipleToken\");class Fl{constructor(t,e){this.name=t,this.token=e}}function Nl(t,e,n=[]){const s=\"Platform: \"+e,r=new $n(s);return(e=[])=>{let i=Vl();if(!i||i.injector.get(Dl,!1))if(t)t(n.concat(e).concat({provide:r,useValue:!0}));else{const t=n.concat(e).concat({provide:r,useValue:!0},{provide:hi,useValue:\"platform\"});!function(t){if(Il&&!Il.destroyed&&!Il.injector.get(Dl,!1))throw new Error(\"There can be only one platform. Destroy the previous one to create a new one.\");Il=t.get(Ml);const e=t.get(sl,null);e&&e.forEach(t=>t())}(Ei.create({providers:t,name:s}))}return function(t){const e=Vl();if(!e)throw new Error(\"No platform exists!\");if(!e.injector.get(t,null))throw new Error(\"A platform with a different configuration has been created. Please destroy it first.\");return e}(r)}}function Vl(){return Il&&!Il.destroyed?Il:null}let Ml=(()=>{class t{constructor(t){this._injector=t,this._modules=[],this._destroyListeners=[],this._destroyed=!1}bootstrapModuleFactory(t,e){const n=function(t,e){let n;return n=\"noop\"===t?new El:(\"zone.js\"===t?void 0:t)||new vl({enableLongStackTrace:Ll(),shouldCoalesceEventChangeDetection:e}),n}(e?e.ngZone:void 0,e&&e.ngZoneEventCoalescing||!1),s=[{provide:vl,useValue:n}];return n.run(()=>{const e=Ei.create({providers:s,parent:this.injector,name:t.moduleType.name}),r=t.create(e),i=r.injector.get(Cs,null);if(!i)throw new Error(\"No ErrorHandler. Is platform module (BrowserModule) included?\");return n.runOutsideAngular(()=>{const t=n.onError.subscribe({next:t=>{i.handleError(t)}});r.onDestroy(()=>{Bl(this._modules,r),t.unsubscribe()})}),function(t,e,n){try{const s=n();return Qi(s)?s.catch(n=>{throw e.runOutsideAngular(()=>t.handleError(n)),n}):s}catch(s){throw e.runOutsideAngular(()=>t.handleError(s)),s}}(i,n,()=>{const t=r.injector.get(Ja);return t.runInitializers(),t.donePromise.then(()=>(So(r.injector.get(al,wo)||wo),this._moduleDoBootstrap(r),r))})})}bootstrapModule(t,e=[]){const n=jl({},e);return function(t,e,n){const s=new La(n);return Promise.resolve(s)}(0,0,t).then(t=>this.bootstrapModuleFactory(t,n))}_moduleDoBootstrap(t){const e=t.injector.get(Ul);if(t._bootstrapComponents.length>0)t._bootstrapComponents.forEach(t=>e.bootstrap(t));else{if(!t.instance.ngDoBootstrap)throw new Error(`The module ${et(t.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. Please define one of these.`);t.instance.ngDoBootstrap(e)}this._modules.push(t)}onDestroy(t){this._destroyListeners.push(t)}get injector(){return this._injector}destroy(){if(this._destroyed)throw new Error(\"The platform has already been destroyed!\");this._modules.slice().forEach(t=>t.destroy()),this._destroyListeners.forEach(t=>t()),this._destroyed=!0}get destroyed(){return this._destroyed}}return t.\\u0275fac=function(e){return new(e||t)(ds(Ei))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();function jl(t,e){return Array.isArray(e)?e.reduce(jl,t):Object.assign(Object.assign({},t),e)}let Ul=(()=>{class t{constructor(t,e,n,s,r,i){this._zone=t,this._console=e,this._injector=n,this._exceptionHandler=s,this._componentFactoryResolver=r,this._initStatus=i,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._onMicrotaskEmptySubscription=this._zone.onMicrotaskEmpty.subscribe({next:()=>{this._zone.run(()=>{this.tick()})}});const o=new _(t=>{this._stable=this._zone.isStable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks,this._zone.runOutsideAngular(()=>{t.next(this._stable),t.complete()})}),a=new _(t=>{let e;this._zone.runOutsideAngular(()=>{e=this._zone.onStable.subscribe(()=>{vl.assertNotInAngularZone(),_l(()=>{this._stable||this._zone.hasPendingMacrotasks||this._zone.hasPendingMicrotasks||(this._stable=!0,t.next(!0))})})});const n=this._zone.onUnstable.subscribe(()=>{vl.assertInAngularZone(),this._stable&&(this._stable=!1,this._zone.runOutsideAngular(()=>{t.next(!1)}))});return()=>{e.unsubscribe(),n.unsubscribe()}});this.isStable=q(o,a.pipe(t=>{return Q()((e=X,function(t){let n;n=\"function\"==typeof e?e:function(){return e};const s=Object.create(t,Z);return s.source=t,s.subjectFactory=n,s})(t));var e}))}bootstrap(t,e){if(!this._initStatus.done)throw new Error(\"Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.\");let n;n=t instanceof Po?t:this._componentFactoryResolver.resolveComponentFactory(t),this.componentTypes.push(n.componentType);const s=n.isBoundToModule?void 0:this._injector.get(ga),r=n.create(Ei.NULL,[],e||n.selector,s),i=r.location.nativeElement,o=r.injector.get(kl,null),a=o&&r.injector.get(Tl);return o&&a&&a.registerApplication(i,o),r.onDestroy(()=>{this.detachView(r.hostView),Bl(this.components,r),a&&a.unregisterApplication(i)}),this._loadComponent(r),Ll()&&this._console.log(\"Angular is running in development mode. Call enableProdMode() to enable production mode.\"),r}tick(){if(this._runningTick)throw new Error(\"ApplicationRef.tick is called recursively\");try{this._runningTick=!0;for(let t of this._views)t.detectChanges()}catch(t){this._zone.runOutsideAngular(()=>this._exceptionHandler.handleError(t))}finally{this._runningTick=!1}}attachView(t){const e=t;this._views.push(e),e.attachToAppRef(this)}detachView(t){const e=t;Bl(this._views,e),e.detachFromAppRef()}_loadComponent(t){this.attachView(t.hostView),this.tick(),this.components.push(t),this._injector.get(il,[]).concat(this._bootstrapListeners).forEach(e=>e(t))}ngOnDestroy(){this._views.slice().forEach(t=>t.destroy()),this._onMicrotaskEmptySubscription.unsubscribe()}get viewCount(){return this._views.length}}return t.\\u0275fac=function(e){return new(e||t)(ds(vl),ds(ol),ds(Ei),ds(Cs),ds(Do),ds(Ja))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();function Bl(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}class Hl{}class zl{}const $l={factoryPathPrefix:\"\",factoryPathSuffix:\".ngfactory\"};let ql=(()=>{class t{constructor(t,e){this._compiler=t,this._config=e||$l}load(t){return this.loadAndCompile(t)}loadAndCompile(t){let[e,s]=t.split(\"#\");return void 0===s&&(s=\"default\"),n(\"zn8P\")(e).then(t=>t[s]).then(t=>Ql(t,e,s)).then(t=>this._compiler.compileModuleAsync(t))}loadFactory(t){let[e,s]=t.split(\"#\"),r=\"NgFactory\";return void 0===s&&(s=\"default\",r=\"\"),n(\"zn8P\")(this._config.factoryPathPrefix+e+this._config.factoryPathSuffix).then(t=>t[s+r]).then(t=>Ql(t,e,s))}}return t.\\u0275fac=function(e){return new(e||t)(ds(gl),ds(zl,8))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();function Ql(t,e,n){if(!t)throw new Error(`Cannot find '${n}' in '${e}'`);return t}const Wl=Nl(null,\"core\",[{provide:rl,useValue:\"unknown\"},{provide:Ml,deps:[Ei]},{provide:Tl,deps:[]},{provide:ol,deps:[]}]),Kl=[{provide:Ul,useClass:Ul,deps:[vl,ol,Ei,Cs,Do,Ja]},{provide:Aa,deps:[vl],useFactory:function(t){let e=[];return t.onStable.subscribe(()=>{for(;e.length;)e.pop()()}),function(t){e.push(t)}}},{provide:Ja,useClass:Ja,deps:[[new ns,Xa]]},{provide:gl,useClass:gl,deps:[]},el,{provide:ea,useFactory:function(){return ca},deps:[]},{provide:na,useFactory:function(){return ua},deps:[]},{provide:al,useFactory:function(t){return So(t=t||\"undefined\"!=typeof $localize&&$localize.locale||wo),t},deps:[[new es(al),new ns,new rs]]},{provide:ll,useValue:\"USD\"}];let Gl=(()=>{class t{constructor(t){}}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)(ds(Ul))},providers:Kl}),t})();function Zl(...t){let e=t[t.length-1];return E(e)?(t.pop(),F(t,e)):$(t)}function Yl(t,e){return U(t,e,1)}function Xl(t,e){return function(n){return n.lift(new Jl(t,e))}}class Jl{constructor(t,e){this.predicate=t,this.thisArg=e}call(t,e){return e.subscribe(new tc(t,this.predicate,this.thisArg))}}class tc extends f{constructor(t,e,n){super(t),this.predicate=e,this.thisArg=n,this.count=0}_next(t){let e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(n){return void this.destination.error(n)}e&&this.destination.next(t)}}let ec=null;function nc(){return ec}const sc=new $n(\"DocumentToken\");let rc=(()=>{class t{}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({factory:ic,token:t,providedIn:\"platform\"}),t})();function ic(){return ds(ac)}const oc=new $n(\"Location Initialized\");let ac=(()=>{class t extends rc{constructor(t){super(),this._doc=t,this._init()}_init(){this.location=nc().getLocation(),this._history=nc().getHistory()}getBaseHrefFromDOM(){return nc().getBaseHref(this._doc)}onPopState(t){nc().getGlobalEventTarget(this._doc,\"window\").addEventListener(\"popstate\",t,!1)}onHashChange(t){nc().getGlobalEventTarget(this._doc,\"window\").addEventListener(\"hashchange\",t,!1)}get href(){return this.location.href}get protocol(){return this.location.protocol}get hostname(){return this.location.hostname}get port(){return this.location.port}get pathname(){return this.location.pathname}get search(){return this.location.search}get hash(){return this.location.hash}set pathname(t){this.location.pathname=t}pushState(t,e,n){lc()?this._history.pushState(t,e,n):this.location.hash=n}replaceState(t,e,n){lc()?this._history.replaceState(t,e,n):this.location.hash=n}forward(){this._history.forward()}back(){this._history.back()}getState(){return this._history.state}}return t.\\u0275fac=function(e){return new(e||t)(ds(sc))},t.\\u0275prov=at({factory:cc,token:t,providedIn:\"platform\"}),t})();function lc(){return!!window.history.pushState}function cc(){return new ac(ds(sc))}function uc(t,e){if(0==t.length)return e;if(0==e.length)return t;let n=0;return t.endsWith(\"/\")&&n++,e.startsWith(\"/\")&&n++,2==n?t+e.substring(1):1==n?t+e:t+\"/\"+e}function hc(t){const e=t.match(/#|\\?|$/),n=e&&e.index||t.length;return t.slice(0,n-(\"/\"===t[n-1]?1:0))+t.slice(n)}function dc(t){return t&&\"?\"!==t[0]?\"?\"+t:t}let pc=(()=>{class t{}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({factory:fc,token:t,providedIn:\"root\"}),t})();function fc(t){const e=ds(sc).location;return new gc(ds(rc),e&&e.origin||\"\")}const mc=new $n(\"appBaseHref\");let gc=(()=>{class t extends pc{constructor(t,e){if(super(),this._platformLocation=t,null==e&&(e=this._platformLocation.getBaseHrefFromDOM()),null==e)throw new Error(\"No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.\");this._baseHref=e}onPopState(t){this._platformLocation.onPopState(t),this._platformLocation.onHashChange(t)}getBaseHref(){return this._baseHref}prepareExternalUrl(t){return uc(this._baseHref,t)}path(t=!1){const e=this._platformLocation.pathname+dc(this._platformLocation.search),n=this._platformLocation.hash;return n&&t?`${e}${n}`:e}pushState(t,e,n,s){const r=this.prepareExternalUrl(n+dc(s));this._platformLocation.pushState(t,e,r)}replaceState(t,e,n,s){const r=this.prepareExternalUrl(n+dc(s));this._platformLocation.replaceState(t,e,r)}forward(){this._platformLocation.forward()}back(){this._platformLocation.back()}}return t.\\u0275fac=function(e){return new(e||t)(ds(rc),ds(mc,8))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),yc=(()=>{class t extends pc{constructor(t,e){super(),this._platformLocation=t,this._baseHref=\"\",null!=e&&(this._baseHref=e)}onPopState(t){this._platformLocation.onPopState(t),this._platformLocation.onHashChange(t)}getBaseHref(){return this._baseHref}path(t=!1){let e=this._platformLocation.hash;return null==e&&(e=\"#\"),e.length>0?e.substring(1):e}prepareExternalUrl(t){const e=uc(this._baseHref,t);return e.length>0?\"#\"+e:e}pushState(t,e,n,s){let r=this.prepareExternalUrl(n+dc(s));0==r.length&&(r=this._platformLocation.pathname),this._platformLocation.pushState(t,e,r)}replaceState(t,e,n,s){let r=this.prepareExternalUrl(n+dc(s));0==r.length&&(r=this._platformLocation.pathname),this._platformLocation.replaceState(t,e,r)}forward(){this._platformLocation.forward()}back(){this._platformLocation.back()}}return t.\\u0275fac=function(e){return new(e||t)(ds(rc),ds(mc,8))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),_c=(()=>{class t{constructor(t,e){this._subject=new Da,this._urlChangeListeners=[],this._platformStrategy=t;const n=this._platformStrategy.getBaseHref();this._platformLocation=e,this._baseHref=hc(bc(n)),this._platformStrategy.onPopState(t=>{this._subject.emit({url:this.path(!0),pop:!0,state:t.state,type:t.type})})}path(t=!1){return this.normalize(this._platformStrategy.path(t))}getState(){return this._platformLocation.getState()}isCurrentPathEqualTo(t,e=\"\"){return this.path()==this.normalize(t+dc(e))}normalize(e){return t.stripTrailingSlash(function(t,e){return t&&e.startsWith(t)?e.substring(t.length):e}(this._baseHref,bc(e)))}prepareExternalUrl(t){return t&&\"/\"!==t[0]&&(t=\"/\"+t),this._platformStrategy.prepareExternalUrl(t)}go(t,e=\"\",n=null){this._platformStrategy.pushState(n,\"\",t,e),this._notifyUrlChangeListeners(this.prepareExternalUrl(t+dc(e)),n)}replaceState(t,e=\"\",n=null){this._platformStrategy.replaceState(n,\"\",t,e),this._notifyUrlChangeListeners(this.prepareExternalUrl(t+dc(e)),n)}forward(){this._platformStrategy.forward()}back(){this._platformStrategy.back()}onUrlChange(t){this._urlChangeListeners.push(t),this._urlChangeSubscription||(this._urlChangeSubscription=this.subscribe(t=>{this._notifyUrlChangeListeners(t.url,t.state)}))}_notifyUrlChangeListeners(t=\"\",e){this._urlChangeListeners.forEach(n=>n(t,e))}subscribe(t,e,n){return this._subject.subscribe({next:t,error:e,complete:n})}}return t.\\u0275fac=function(e){return new(e||t)(ds(pc),ds(rc))},t.normalizeQueryParams=dc,t.joinWithSlash=uc,t.stripTrailingSlash=hc,t.\\u0275prov=at({factory:vc,token:t,providedIn:\"root\"}),t})();function vc(){return new _c(ds(pc),ds(rc))}function bc(t){return t.replace(/\\/index.html$/,\"\")}var wc=function(t){return t[t.Zero=0]=\"Zero\",t[t.One=1]=\"One\",t[t.Two=2]=\"Two\",t[t.Few=3]=\"Few\",t[t.Many=4]=\"Many\",t[t.Other=5]=\"Other\",t}({});class xc{}let Sc=(()=>{class t extends xc{constructor(t){super(),this.locale=t}getPluralCategory(t,e){switch(function(t){return function(t){const e=function(t){return t.toLowerCase().replace(/_/g,\"-\")}(t);let n=vo(e);if(n)return n;const s=e.split(\"-\")[0];if(n=vo(s),n)return n;if(\"en\"===s)return yo;throw new Error(`Missing locale data for the locale \"${t}\".`)}(t)[bo.PluralCase]}(e||this.locale)(t)){case wc.Zero:return\"zero\";case wc.One:return\"one\";case wc.Two:return\"two\";case wc.Few:return\"few\";case wc.Many:return\"many\";default:return\"other\"}}}return t.\\u0275fac=function(e){return new(e||t)(ds(al))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();function Cc(t,e){e=encodeURIComponent(e);for(const n of t.split(\";\")){const t=n.indexOf(\"=\"),[s,r]=-1==t?[n,\"\"]:[n.slice(0,t),n.slice(t+1)];if(s.trim()===e)return decodeURIComponent(r)}return null}class Ec{constructor(t,e,n,s){this.$implicit=t,this.ngForOf=e,this.index=n,this.count=s}get first(){return 0===this.index}get last(){return this.index===this.count-1}get even(){return this.index%2==0}get odd(){return!this.even}}let kc=(()=>{class t{constructor(t,e,n){this._viewContainer=t,this._template=e,this._differs=n,this._ngForOf=null,this._ngForOfDirty=!0,this._differ=null}set ngForOf(t){this._ngForOf=t,this._ngForOfDirty=!0}set ngForTrackBy(t){this._trackByFn=t}get ngForTrackBy(){return this._trackByFn}set ngForTemplate(t){t&&(this._template=t)}ngDoCheck(){if(this._ngForOfDirty){this._ngForOfDirty=!1;const n=this._ngForOf;if(!this._differ&&n)try{this._differ=this._differs.find(n).create(this.ngForTrackBy)}catch(e){throw new Error(`Cannot find a differ supporting object '${n}' of type '${t=n,t.name||typeof t}'. NgFor only supports binding to Iterables such as Arrays.`)}}var t;if(this._differ){const t=this._differ.diff(this._ngForOf);t&&this._applyChanges(t)}}_applyChanges(t){const e=[];t.forEachOperation((t,n,s)=>{if(null==t.previousIndex){const n=this._viewContainer.createEmbeddedView(this._template,new Ec(null,this._ngForOf,-1,-1),null===s?void 0:s),r=new Tc(t,n);e.push(r)}else if(null==s)this._viewContainer.remove(null===n?void 0:n);else if(null!==n){const r=this._viewContainer.get(n);this._viewContainer.move(r,s);const i=new Tc(t,r);e.push(i)}});for(let n=0;n<e.length;n++)this._perViewChange(e[n].view,e[n].record);for(let n=0,s=this._viewContainer.length;n<s;n++){const t=this._viewContainer.get(n);t.context.index=n,t.context.count=s,t.context.ngForOf=this._ngForOf}t.forEachIdentityChange(t=>{this._viewContainer.get(t.currentIndex).context.$implicit=t.item})}_perViewChange(t,e){t.context.$implicit=e.item}static ngTemplateContextGuard(t,e){return!0}}return t.\\u0275fac=function(e){return new(e||t)(Ui(va),Ui(da),Ui(ea))},t.\\u0275dir=$t({type:t,selectors:[[\"\",\"ngFor\",\"\",\"ngForOf\",\"\"]],inputs:{ngForOf:\"ngForOf\",ngForTrackBy:\"ngForTrackBy\",ngForTemplate:\"ngForTemplate\"}}),t})();class Tc{constructor(t,e){this.record=t,this.view=e}}let Ac=(()=>{class t{constructor(t,e){this._viewContainer=t,this._context=new Ic,this._thenTemplateRef=null,this._elseTemplateRef=null,this._thenViewRef=null,this._elseViewRef=null,this._thenTemplateRef=e}set ngIf(t){this._context.$implicit=this._context.ngIf=t,this._updateView()}set ngIfThen(t){Oc(\"ngIfThen\",t),this._thenTemplateRef=t,this._thenViewRef=null,this._updateView()}set ngIfElse(t){Oc(\"ngIfElse\",t),this._elseTemplateRef=t,this._elseViewRef=null,this._updateView()}_updateView(){this._context.$implicit?this._thenViewRef||(this._viewContainer.clear(),this._elseViewRef=null,this._thenTemplateRef&&(this._thenViewRef=this._viewContainer.createEmbeddedView(this._thenTemplateRef,this._context))):this._elseViewRef||(this._viewContainer.clear(),this._thenViewRef=null,this._elseTemplateRef&&(this._elseViewRef=this._viewContainer.createEmbeddedView(this._elseTemplateRef,this._context)))}static ngTemplateContextGuard(t,e){return!0}}return t.\\u0275fac=function(e){return new(e||t)(Ui(va),Ui(da))},t.\\u0275dir=$t({type:t,selectors:[[\"\",\"ngIf\",\"\"]],inputs:{ngIf:\"ngIf\",ngIfThen:\"ngIfThen\",ngIfElse:\"ngIfElse\"}}),t})();class Ic{constructor(){this.$implicit=null,this.ngIf=null}}function Oc(t,e){if(e&&!e.createEmbeddedView)throw new Error(`${t} must be a TemplateRef, but received '${et(e)}'.`)}let Rc=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},providers:[{provide:xc,useClass:Sc}]}),t})();function Pc(t){return\"browser\"===t}function Lc(t){return\"server\"===t}let Dc=(()=>{class t{}return t.\\u0275prov=at({token:t,providedIn:\"root\",factory:()=>new Fc(ds(sc),window,ds(Cs))}),t})();class Fc{constructor(t,e,n){this.document=t,this.window=e,this.errorHandler=n,this.offset=()=>[0,0]}setOffset(t){this.offset=Array.isArray(t)?()=>t:t}getScrollPosition(){return this.supportsScrolling()?[this.window.pageXOffset,this.window.pageYOffset]:[0,0]}scrollToPosition(t){this.supportsScrolling()&&this.window.scrollTo(t[0],t[1])}scrollToAnchor(t){if(this.supportsScrolling()){const e=this.document.getElementById(t)||this.document.getElementsByName(t)[0];e&&this.scrollToElement(e)}}setHistoryScrollRestoration(t){if(this.supportScrollRestoration()){const e=this.window.history;e&&e.scrollRestoration&&(e.scrollRestoration=t)}}scrollToElement(t){const e=t.getBoundingClientRect(),n=e.left+this.window.pageXOffset,s=e.top+this.window.pageYOffset,r=this.offset();this.window.scrollTo(n-r[0],s-r[1])}supportScrollRestoration(){try{if(!this.supportsScrolling())return!1;const t=Nc(this.window.history)||Nc(Object.getPrototypeOf(this.window.history));return!(!t||!t.writable&&!t.set)}catch(t){return!1}}supportsScrolling(){try{return!!this.window&&!!this.window.scrollTo&&\"pageXOffset\"in this.window}catch(t){return!1}}}function Nc(t){return Object.getOwnPropertyDescriptor(t,\"scrollRestoration\")}class Vc{}class Mc{}class jc{constructor(t){this.normalizedNames=new Map,this.lazyUpdate=null,t?this.lazyInit=\"string\"==typeof t?()=>{this.headers=new Map,t.split(\"\\n\").forEach(t=>{const e=t.indexOf(\":\");if(e>0){const n=t.slice(0,e),s=n.toLowerCase(),r=t.slice(e+1).trim();this.maybeSetNormalizedName(n,s),this.headers.has(s)?this.headers.get(s).push(r):this.headers.set(s,[r])}})}:()=>{this.headers=new Map,Object.keys(t).forEach(e=>{let n=t[e];const s=e.toLowerCase();\"string\"==typeof n&&(n=[n]),n.length>0&&(this.headers.set(s,n),this.maybeSetNormalizedName(e,s))})}:this.headers=new Map}has(t){return this.init(),this.headers.has(t.toLowerCase())}get(t){this.init();const e=this.headers.get(t.toLowerCase());return e&&e.length>0?e[0]:null}keys(){return this.init(),Array.from(this.normalizedNames.values())}getAll(t){return this.init(),this.headers.get(t.toLowerCase())||null}append(t,e){return this.clone({name:t,value:e,op:\"a\"})}set(t,e){return this.clone({name:t,value:e,op:\"s\"})}delete(t,e){return this.clone({name:t,value:e,op:\"d\"})}maybeSetNormalizedName(t,e){this.normalizedNames.has(e)||this.normalizedNames.set(e,t)}init(){this.lazyInit&&(this.lazyInit instanceof jc?this.copyFrom(this.lazyInit):this.lazyInit(),this.lazyInit=null,this.lazyUpdate&&(this.lazyUpdate.forEach(t=>this.applyUpdate(t)),this.lazyUpdate=null))}copyFrom(t){t.init(),Array.from(t.headers.keys()).forEach(e=>{this.headers.set(e,t.headers.get(e)),this.normalizedNames.set(e,t.normalizedNames.get(e))})}clone(t){const e=new jc;return e.lazyInit=this.lazyInit&&this.lazyInit instanceof jc?this.lazyInit:this,e.lazyUpdate=(this.lazyUpdate||[]).concat([t]),e}applyUpdate(t){const e=t.name.toLowerCase();switch(t.op){case\"a\":case\"s\":let n=t.value;if(\"string\"==typeof n&&(n=[n]),0===n.length)return;this.maybeSetNormalizedName(t.name,e);const s=(\"a\"===t.op?this.headers.get(e):void 0)||[];s.push(...n),this.headers.set(e,s);break;case\"d\":const r=t.value;if(r){let t=this.headers.get(e);if(!t)return;t=t.filter(t=>-1===r.indexOf(t)),0===t.length?(this.headers.delete(e),this.normalizedNames.delete(e)):this.headers.set(e,t)}else this.headers.delete(e),this.normalizedNames.delete(e)}}forEach(t){this.init(),Array.from(this.normalizedNames.keys()).forEach(e=>t(this.normalizedNames.get(e),this.headers.get(e)))}}class Uc{encodeKey(t){return Bc(t)}encodeValue(t){return Bc(t)}decodeKey(t){return decodeURIComponent(t)}decodeValue(t){return decodeURIComponent(t)}}function Bc(t){return encodeURIComponent(t).replace(/%40/gi,\"@\").replace(/%3A/gi,\":\").replace(/%24/gi,\"$\").replace(/%2C/gi,\",\").replace(/%3B/gi,\";\").replace(/%2B/gi,\"+\").replace(/%3D/gi,\"=\").replace(/%3F/gi,\"?\").replace(/%2F/gi,\"/\")}class Hc{constructor(t={}){if(this.updates=null,this.cloneFrom=null,this.encoder=t.encoder||new Uc,t.fromString){if(t.fromObject)throw new Error(\"Cannot specify both fromString and fromObject.\");this.map=function(t,e){const n=new Map;return t.length>0&&t.split(\"&\").forEach(t=>{const s=t.indexOf(\"=\"),[r,i]=-1==s?[e.decodeKey(t),\"\"]:[e.decodeKey(t.slice(0,s)),e.decodeValue(t.slice(s+1))],o=n.get(r)||[];o.push(i),n.set(r,o)}),n}(t.fromString,this.encoder)}else t.fromObject?(this.map=new Map,Object.keys(t.fromObject).forEach(e=>{const n=t.fromObject[e];this.map.set(e,Array.isArray(n)?n:[n])})):this.map=null}has(t){return this.init(),this.map.has(t)}get(t){this.init();const e=this.map.get(t);return e?e[0]:null}getAll(t){return this.init(),this.map.get(t)||null}keys(){return this.init(),Array.from(this.map.keys())}append(t,e){return this.clone({param:t,value:e,op:\"a\"})}set(t,e){return this.clone({param:t,value:e,op:\"s\"})}delete(t,e){return this.clone({param:t,value:e,op:\"d\"})}toString(){return this.init(),this.keys().map(t=>{const e=this.encoder.encodeKey(t);return this.map.get(t).map(t=>e+\"=\"+this.encoder.encodeValue(t)).join(\"&\")}).filter(t=>\"\"!==t).join(\"&\")}clone(t){const e=new Hc({encoder:this.encoder});return e.cloneFrom=this.cloneFrom||this,e.updates=(this.updates||[]).concat([t]),e}init(){null===this.map&&(this.map=new Map),null!==this.cloneFrom&&(this.cloneFrom.init(),this.cloneFrom.keys().forEach(t=>this.map.set(t,this.cloneFrom.map.get(t))),this.updates.forEach(t=>{switch(t.op){case\"a\":case\"s\":const e=(\"a\"===t.op?this.map.get(t.param):void 0)||[];e.push(t.value),this.map.set(t.param,e);break;case\"d\":if(void 0===t.value){this.map.delete(t.param);break}{let e=this.map.get(t.param)||[];const n=e.indexOf(t.value);-1!==n&&e.splice(n,1),e.length>0?this.map.set(t.param,e):this.map.delete(t.param)}}}),this.cloneFrom=this.updates=null)}}function zc(t){return\"undefined\"!=typeof ArrayBuffer&&t instanceof ArrayBuffer}function $c(t){return\"undefined\"!=typeof Blob&&t instanceof Blob}function qc(t){return\"undefined\"!=typeof FormData&&t instanceof FormData}class Qc{constructor(t,e,n,s){let r;if(this.url=e,this.body=null,this.reportProgress=!1,this.withCredentials=!1,this.responseType=\"json\",this.method=t.toUpperCase(),function(t){switch(t){case\"DELETE\":case\"GET\":case\"HEAD\":case\"OPTIONS\":case\"JSONP\":return!1;default:return!0}}(this.method)||s?(this.body=void 0!==n?n:null,r=s):r=n,r&&(this.reportProgress=!!r.reportProgress,this.withCredentials=!!r.withCredentials,r.responseType&&(this.responseType=r.responseType),r.headers&&(this.headers=r.headers),r.params&&(this.params=r.params)),this.headers||(this.headers=new jc),this.params){const t=this.params.toString();if(0===t.length)this.urlWithParams=e;else{const n=e.indexOf(\"?\");this.urlWithParams=e+(-1===n?\"?\":n<e.length-1?\"&\":\"\")+t}}else this.params=new Hc,this.urlWithParams=e}serializeBody(){return null===this.body?null:zc(this.body)||$c(this.body)||qc(this.body)||\"string\"==typeof this.body?this.body:this.body instanceof Hc?this.body.toString():\"object\"==typeof this.body||\"boolean\"==typeof this.body||Array.isArray(this.body)?JSON.stringify(this.body):this.body.toString()}detectContentTypeHeader(){return null===this.body||qc(this.body)?null:$c(this.body)?this.body.type||null:zc(this.body)?null:\"string\"==typeof this.body?\"text/plain\":this.body instanceof Hc?\"application/x-www-form-urlencoded;charset=UTF-8\":\"object\"==typeof this.body||\"number\"==typeof this.body||Array.isArray(this.body)?\"application/json\":null}clone(t={}){const e=t.method||this.method,n=t.url||this.url,s=t.responseType||this.responseType,r=void 0!==t.body?t.body:this.body,i=void 0!==t.withCredentials?t.withCredentials:this.withCredentials,o=void 0!==t.reportProgress?t.reportProgress:this.reportProgress;let a=t.headers||this.headers,l=t.params||this.params;return void 0!==t.setHeaders&&(a=Object.keys(t.setHeaders).reduce((e,n)=>e.set(n,t.setHeaders[n]),a)),t.setParams&&(l=Object.keys(t.setParams).reduce((e,n)=>e.set(n,t.setParams[n]),l)),new Qc(e,n,r,{params:l,headers:a,reportProgress:o,responseType:s,withCredentials:i})}}var Wc=function(t){return t[t.Sent=0]=\"Sent\",t[t.UploadProgress=1]=\"UploadProgress\",t[t.ResponseHeader=2]=\"ResponseHeader\",t[t.DownloadProgress=3]=\"DownloadProgress\",t[t.Response=4]=\"Response\",t[t.User=5]=\"User\",t}({});class Kc{constructor(t,e=200,n=\"OK\"){this.headers=t.headers||new jc,this.status=void 0!==t.status?t.status:e,this.statusText=t.statusText||n,this.url=t.url||null,this.ok=this.status>=200&&this.status<300}}class Gc extends Kc{constructor(t={}){super(t),this.type=Wc.ResponseHeader}clone(t={}){return new Gc({headers:t.headers||this.headers,status:void 0!==t.status?t.status:this.status,statusText:t.statusText||this.statusText,url:t.url||this.url||void 0})}}class Zc extends Kc{constructor(t={}){super(t),this.type=Wc.Response,this.body=void 0!==t.body?t.body:null}clone(t={}){return new Zc({body:void 0!==t.body?t.body:this.body,headers:t.headers||this.headers,status:void 0!==t.status?t.status:this.status,statusText:t.statusText||this.statusText,url:t.url||this.url||void 0})}}class Yc extends Kc{constructor(t){super(t,0,\"Unknown Error\"),this.name=\"HttpErrorResponse\",this.ok=!1,this.message=this.status>=200&&this.status<300?\"Http failure during parsing for \"+(t.url||\"(unknown url)\"):`Http failure response for ${t.url||\"(unknown url)\"}: ${t.status} ${t.statusText}`,this.error=t.error||null}}function Xc(t,e){return{body:e,headers:t.headers,observe:t.observe,params:t.params,reportProgress:t.reportProgress,responseType:t.responseType,withCredentials:t.withCredentials}}let Jc=(()=>{class t{constructor(t){this.handler=t}request(t,e,n={}){let s;if(t instanceof Qc)s=t;else{let r=void 0;r=n.headers instanceof jc?n.headers:new jc(n.headers);let i=void 0;n.params&&(i=n.params instanceof Hc?n.params:new Hc({fromObject:n.params})),s=new Qc(t,e,void 0!==n.body?n.body:null,{headers:r,params:i,reportProgress:n.reportProgress,responseType:n.responseType||\"json\",withCredentials:n.withCredentials})}const r=Zl(s).pipe(Yl(t=>this.handler.handle(t)));if(t instanceof Qc||\"events\"===n.observe)return r;const i=r.pipe(Xl(t=>t instanceof Zc));switch(n.observe||\"body\"){case\"body\":switch(s.responseType){case\"arraybuffer\":return i.pipe(k(t=>{if(null!==t.body&&!(t.body instanceof ArrayBuffer))throw new Error(\"Response is not an ArrayBuffer.\");return t.body}));case\"blob\":return i.pipe(k(t=>{if(null!==t.body&&!(t.body instanceof Blob))throw new Error(\"Response is not a Blob.\");return t.body}));case\"text\":return i.pipe(k(t=>{if(null!==t.body&&\"string\"!=typeof t.body)throw new Error(\"Response is not a string.\");return t.body}));case\"json\":default:return i.pipe(k(t=>t.body))}case\"response\":return i;default:throw new Error(`Unreachable: unhandled observe type ${n.observe}}`)}}delete(t,e={}){return this.request(\"DELETE\",t,e)}get(t,e={}){return this.request(\"GET\",t,e)}head(t,e={}){return this.request(\"HEAD\",t,e)}jsonp(t,e){return this.request(\"JSONP\",t,{params:(new Hc).append(e,\"JSONP_CALLBACK\"),observe:\"body\",responseType:\"json\"})}options(t,e={}){return this.request(\"OPTIONS\",t,e)}patch(t,e,n={}){return this.request(\"PATCH\",t,Xc(n,e))}post(t,e,n={}){return this.request(\"POST\",t,Xc(n,e))}put(t,e,n={}){return this.request(\"PUT\",t,Xc(n,e))}}return t.\\u0275fac=function(e){return new(e||t)(ds(Vc))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();class tu{constructor(t,e){this.next=t,this.interceptor=e}handle(t){return this.interceptor.intercept(t,this.next)}}const eu=new $n(\"HTTP_INTERCEPTORS\");let nu=(()=>{class t{intercept(t,e){return e.handle(t)}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();const su=/^\\)\\]\\}',?\\n/;class ru{}let iu=(()=>{class t{constructor(){}build(){return new XMLHttpRequest}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),ou=(()=>{class t{constructor(t){this.xhrFactory=t}handle(t){if(\"JSONP\"===t.method)throw new Error(\"Attempted to construct Jsonp request without HttpClientJsonpModule installed.\");return new _(e=>{const n=this.xhrFactory.build();if(n.open(t.method,t.urlWithParams),t.withCredentials&&(n.withCredentials=!0),t.headers.forEach((t,e)=>n.setRequestHeader(t,e.join(\",\"))),t.headers.has(\"Accept\")||n.setRequestHeader(\"Accept\",\"application/json, text/plain, */*\"),!t.headers.has(\"Content-Type\")){const e=t.detectContentTypeHeader();null!==e&&n.setRequestHeader(\"Content-Type\",e)}if(t.responseType){const e=t.responseType.toLowerCase();n.responseType=\"json\"!==e?e:\"text\"}const s=t.serializeBody();let r=null;const i=()=>{if(null!==r)return r;const e=1223===n.status?204:n.status,s=n.statusText||\"OK\",i=new jc(n.getAllResponseHeaders()),o=function(t){return\"responseURL\"in t&&t.responseURL?t.responseURL:/^X-Request-URL:/m.test(t.getAllResponseHeaders())?t.getResponseHeader(\"X-Request-URL\"):null}(n)||t.url;return r=new Gc({headers:i,status:e,statusText:s,url:o}),r},o=()=>{let{headers:s,status:r,statusText:o,url:a}=i(),l=null;204!==r&&(l=void 0===n.response?n.responseText:n.response),0===r&&(r=l?200:0);let c=r>=200&&r<300;if(\"json\"===t.responseType&&\"string\"==typeof l){const t=l;l=l.replace(su,\"\");try{l=\"\"!==l?JSON.parse(l):null}catch(u){l=t,c&&(c=!1,l={error:u,text:l})}}c?(e.next(new Zc({body:l,headers:s,status:r,statusText:o,url:a||void 0})),e.complete()):e.error(new Yc({error:l,headers:s,status:r,statusText:o,url:a||void 0}))},a=t=>{const{url:s}=i(),r=new Yc({error:t,status:n.status||0,statusText:n.statusText||\"Unknown Error\",url:s||void 0});e.error(r)};let l=!1;const c=s=>{l||(e.next(i()),l=!0);let r={type:Wc.DownloadProgress,loaded:s.loaded};s.lengthComputable&&(r.total=s.total),\"text\"===t.responseType&&n.responseText&&(r.partialText=n.responseText),e.next(r)},u=t=>{let n={type:Wc.UploadProgress,loaded:t.loaded};t.lengthComputable&&(n.total=t.total),e.next(n)};return n.addEventListener(\"load\",o),n.addEventListener(\"error\",a),t.reportProgress&&(n.addEventListener(\"progress\",c),null!==s&&n.upload&&n.upload.addEventListener(\"progress\",u)),n.send(s),e.next({type:Wc.Sent}),()=>{n.removeEventListener(\"error\",a),n.removeEventListener(\"load\",o),t.reportProgress&&(n.removeEventListener(\"progress\",c),null!==s&&n.upload&&n.upload.removeEventListener(\"progress\",u)),n.readyState!==n.DONE&&n.abort()}})}}return t.\\u0275fac=function(e){return new(e||t)(ds(ru))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();const au=new $n(\"XSRF_COOKIE_NAME\"),lu=new $n(\"XSRF_HEADER_NAME\");class cu{}let uu=(()=>{class t{constructor(t,e,n){this.doc=t,this.platform=e,this.cookieName=n,this.lastCookieString=\"\",this.lastToken=null,this.parseCount=0}getToken(){if(\"server\"===this.platform)return null;const t=this.doc.cookie||\"\";return t!==this.lastCookieString&&(this.parseCount++,this.lastToken=Cc(t,this.cookieName),this.lastCookieString=t),this.lastToken}}return t.\\u0275fac=function(e){return new(e||t)(ds(sc),ds(rl),ds(au))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),hu=(()=>{class t{constructor(t,e){this.tokenService=t,this.headerName=e}intercept(t,e){const n=t.url.toLowerCase();if(\"GET\"===t.method||\"HEAD\"===t.method||n.startsWith(\"http://\")||n.startsWith(\"https://\"))return e.handle(t);const s=this.tokenService.getToken();return null===s||t.headers.has(this.headerName)||(t=t.clone({headers:t.headers.set(this.headerName,s)})),e.handle(t)}}return t.\\u0275fac=function(e){return new(e||t)(ds(cu),ds(lu))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),du=(()=>{class t{constructor(t,e){this.backend=t,this.injector=e,this.chain=null}handle(t){if(null===this.chain){const t=this.injector.get(eu,[]);this.chain=t.reduceRight((t,e)=>new tu(t,e),this.backend)}return this.chain.handle(t)}}return t.\\u0275fac=function(e){return new(e||t)(ds(Mc),ds(Ei))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),pu=(()=>{class t{static disable(){return{ngModule:t,providers:[{provide:hu,useClass:nu}]}}static withOptions(e={}){return{ngModule:t,providers:[e.cookieName?{provide:au,useValue:e.cookieName}:[],e.headerName?{provide:lu,useValue:e.headerName}:[]]}}}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},providers:[hu,{provide:eu,useExisting:hu,multi:!0},{provide:cu,useClass:uu},{provide:au,useValue:\"XSRF-TOKEN\"},{provide:lu,useValue:\"X-XSRF-TOKEN\"}]}),t})(),fu=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},providers:[Jc,{provide:Vc,useClass:du},ou,{provide:Mc,useExisting:ou},iu,{provide:ru,useExisting:iu}],imports:[[pu.withOptions({cookieName:\"XSRF-TOKEN\",headerName:\"X-XSRF-TOKEN\"})]]}),t})(),mu=(()=>{class t{constructor(t){this.httpClient=t}load(){return new Promise((e,n)=>{this.httpClient.get(\"assets/config/config.production.json\").subscribe(s=>{t.settings=s,\"production\"===s.environmentName?e(t.settings):(console.log(\"production neq \"+s.environmentName),n(t.settings))},t=>{n(t)})})}}return t.\\u0275fac=function(e){return new(e||t)(ds(Jc))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();class gu extends class extends class{}{constructor(){super()}supportsDOMEvents(){return!0}}{static makeCurrent(){var t;t=new gu,ec||(ec=t)}getProperty(t,e){return t[e]}log(t){window.console&&window.console.log&&window.console.log(t)}logGroup(t){window.console&&window.console.group&&window.console.group(t)}logGroupEnd(){window.console&&window.console.groupEnd&&window.console.groupEnd()}onAndCancel(t,e,n){return t.addEventListener(e,n,!1),()=>{t.removeEventListener(e,n,!1)}}dispatchEvent(t,e){t.dispatchEvent(e)}remove(t){return t.parentNode&&t.parentNode.removeChild(t),t}getValue(t){return t.value}createElement(t,e){return(e=e||this.getDefaultDocument()).createElement(t)}createHtmlDocument(){return document.implementation.createHTMLDocument(\"fakeTitle\")}getDefaultDocument(){return document}isElementNode(t){return t.nodeType===Node.ELEMENT_NODE}isShadowRoot(t){return t instanceof DocumentFragment}getGlobalEventTarget(t,e){return\"window\"===e?window:\"document\"===e?t:\"body\"===e?t.body:null}getHistory(){return window.history}getLocation(){return window.location}getBaseHref(t){const e=_u||(_u=document.querySelector(\"base\"),_u)?_u.getAttribute(\"href\"):null;return null==e?null:(n=e,yu||(yu=document.createElement(\"a\")),yu.setAttribute(\"href\",n),\"/\"===yu.pathname.charAt(0)?yu.pathname:\"/\"+yu.pathname);var n}resetBaseElement(){_u=null}getUserAgent(){return window.navigator.userAgent}performanceNow(){return window.performance&&window.performance.now?window.performance.now():(new Date).getTime()}supportsCookies(){return!0}getCookie(t){return Cc(document.cookie,t)}}let yu,_u=null;const vu=new $n(\"TRANSITION_ID\"),bu=[{provide:Xa,useFactory:function(t,e,n){return()=>{n.get(Ja).donePromise.then(()=>{const n=nc();Array.prototype.slice.apply(e.querySelectorAll(\"style[ng-transition]\")).filter(e=>e.getAttribute(\"ng-transition\")===t).forEach(t=>n.remove(t))})}},deps:[vu,sc,Ei],multi:!0}];class wu{static init(){var t;t=new wu,Ol=t}addToWindow(t){Tt.getAngularTestability=(e,n=!0)=>{const s=t.findTestabilityInTree(e,n);if(null==s)throw new Error(\"Could not find testability for element.\");return s},Tt.getAllAngularTestabilities=()=>t.getAllTestabilities(),Tt.getAllAngularRootElements=()=>t.getAllRootElements(),Tt.frameworkStabilizers||(Tt.frameworkStabilizers=[]),Tt.frameworkStabilizers.push(t=>{const e=Tt.getAllAngularTestabilities();let n=e.length,s=!1;const r=function(e){s=s||e,n--,0==n&&t(s)};e.forEach(function(t){t.whenStable(r)})})}findTestabilityInTree(t,e,n){if(null==e)return null;const s=t.getTestability(e);return null!=s?s:n?nc().isShadowRoot(e)?this.findTestabilityInTree(t,e.host,!0):this.findTestabilityInTree(t,e.parentElement,!0):null}}const xu=new $n(\"EventManagerPlugins\");let Su=(()=>{class t{constructor(t,e){this._zone=e,this._eventNameToPlugin=new Map,t.forEach(t=>t.manager=this),this._plugins=t.slice().reverse()}addEventListener(t,e,n){return this._findPluginFor(e).addEventListener(t,e,n)}addGlobalEventListener(t,e,n){return this._findPluginFor(e).addGlobalEventListener(t,e,n)}getZone(){return this._zone}_findPluginFor(t){const e=this._eventNameToPlugin.get(t);if(e)return e;const n=this._plugins;for(let s=0;s<n.length;s++){const e=n[s];if(e.supports(t))return this._eventNameToPlugin.set(t,e),e}throw new Error(\"No event manager plugin found for event \"+t)}}return t.\\u0275fac=function(e){return new(e||t)(ds(xu),ds(vl))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();class Cu{constructor(t){this._doc=t}addGlobalEventListener(t,e,n){const s=nc().getGlobalEventTarget(this._doc,t);if(!s)throw new Error(`Unsupported event target ${s} for event ${e}`);return this.addEventListener(s,e,n)}}let Eu=(()=>{class t{constructor(){this._stylesSet=new Set}addStyles(t){const e=new Set;t.forEach(t=>{this._stylesSet.has(t)||(this._stylesSet.add(t),e.add(t))}),this.onStylesAdded(e)}onStylesAdded(t){}getAllStyles(){return Array.from(this._stylesSet)}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),ku=(()=>{class t extends Eu{constructor(t){super(),this._doc=t,this._hostNodes=new Set,this._styleNodes=new Set,this._hostNodes.add(t.head)}_addStylesToHost(t,e){t.forEach(t=>{const n=this._doc.createElement(\"style\");n.textContent=t,this._styleNodes.add(e.appendChild(n))})}addHost(t){this._addStylesToHost(this._stylesSet,t),this._hostNodes.add(t)}removeHost(t){this._hostNodes.delete(t)}onStylesAdded(t){this._hostNodes.forEach(e=>this._addStylesToHost(t,e))}ngOnDestroy(){this._styleNodes.forEach(t=>nc().remove(t))}}return t.\\u0275fac=function(e){return new(e||t)(ds(sc))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();const Tu={svg:\"http://www.w3.org/2000/svg\",xhtml:\"http://www.w3.org/1999/xhtml\",xlink:\"http://www.w3.org/1999/xlink\",xml:\"http://www.w3.org/XML/1998/namespace\",xmlns:\"http://www.w3.org/2000/xmlns/\"},Au=/%COMP%/g;function Iu(t,e,n){for(let s=0;s<e.length;s++){let r=e[s];Array.isArray(r)?Iu(t,r,n):(r=r.replace(Au,t),n.push(r))}return n}function Ou(t){return e=>{if(\"__ngUnwrap__\"===e)return t;!1===t(e)&&(e.preventDefault(),e.returnValue=!1)}}let Ru=(()=>{class t{constructor(t,e,n){this.eventManager=t,this.sharedStylesHost=e,this.appId=n,this.rendererByCompId=new Map,this.defaultRenderer=new Pu(t)}createRenderer(t,e){if(!t||!e)return this.defaultRenderer;switch(e.encapsulation){case xt.Emulated:{let n=this.rendererByCompId.get(e.id);return n||(n=new Lu(this.eventManager,this.sharedStylesHost,e,this.appId),this.rendererByCompId.set(e.id,n)),n.applyToHost(t),n}case 1:case xt.ShadowDom:return new Du(this.eventManager,this.sharedStylesHost,t,e);default:if(!this.rendererByCompId.has(e.id)){const t=Iu(e.id,e.styles,[]);this.sharedStylesHost.addStyles(t),this.rendererByCompId.set(e.id,this.defaultRenderer)}return this.defaultRenderer}}begin(){}end(){}}return t.\\u0275fac=function(e){return new(e||t)(ds(Su),ds(ku),ds(tl))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();class Pu{constructor(t){this.eventManager=t,this.data=Object.create(null)}destroy(){}createElement(t,e){return e?document.createElementNS(Tu[e]||e,t):document.createElement(t)}createComment(t){return document.createComment(t)}createText(t){return document.createTextNode(t)}appendChild(t,e){t.appendChild(e)}insertBefore(t,e,n){t&&t.insertBefore(e,n)}removeChild(t,e){t&&t.removeChild(e)}selectRootElement(t,e){let n=\"string\"==typeof t?document.querySelector(t):t;if(!n)throw new Error(`The selector \"${t}\" did not match any elements`);return e||(n.textContent=\"\"),n}parentNode(t){return t.parentNode}nextSibling(t){return t.nextSibling}setAttribute(t,e,n,s){if(s){e=s+\":\"+e;const r=Tu[s];r?t.setAttributeNS(r,e,n):t.setAttribute(e,n)}else t.setAttribute(e,n)}removeAttribute(t,e,n){if(n){const s=Tu[n];s?t.removeAttributeNS(s,e):t.removeAttribute(`${n}:${e}`)}else t.removeAttribute(e)}addClass(t,e){t.classList.add(e)}removeClass(t,e){t.classList.remove(e)}setStyle(t,e,n,s){s&(As.DashCase|As.Important)?t.style.setProperty(e,n,s&As.Important?\"important\":\"\"):t.style[e]=n}removeStyle(t,e,n){n&As.DashCase?t.style.removeProperty(e):t.style[e]=\"\"}setProperty(t,e,n){t[e]=n}setValue(t,e){t.nodeValue=e}listen(t,e,n){return\"string\"==typeof t?this.eventManager.addGlobalEventListener(t,e,Ou(n)):this.eventManager.addEventListener(t,e,Ou(n))}}class Lu extends Pu{constructor(t,e,n,s){super(t),this.component=n;const r=Iu(s+\"-\"+n.id,n.styles,[]);e.addStyles(r),this.contentAttr=\"_ngcontent-%COMP%\".replace(Au,s+\"-\"+n.id),this.hostAttr=\"_nghost-%COMP%\".replace(Au,s+\"-\"+n.id)}applyToHost(t){super.setAttribute(t,this.hostAttr,\"\")}createElement(t,e){const n=super.createElement(t,e);return super.setAttribute(n,this.contentAttr,\"\"),n}}class Du extends Pu{constructor(t,e,n,s){super(t),this.sharedStylesHost=e,this.hostEl=n,this.shadowRoot=n.attachShadow({mode:\"open\"}),this.sharedStylesHost.addHost(this.shadowRoot);const r=Iu(s.id,s.styles,[]);for(let i=0;i<r.length;i++){const t=document.createElement(\"style\");t.textContent=r[i],this.shadowRoot.appendChild(t)}}nodeOrShadowRoot(t){return t===this.hostEl?this.shadowRoot:t}destroy(){this.sharedStylesHost.removeHost(this.shadowRoot)}appendChild(t,e){return super.appendChild(this.nodeOrShadowRoot(t),e)}insertBefore(t,e,n){return super.insertBefore(this.nodeOrShadowRoot(t),e,n)}removeChild(t,e){return super.removeChild(this.nodeOrShadowRoot(t),e)}parentNode(t){return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(t)))}}let Fu=(()=>{class t extends Cu{constructor(t){super(t)}supports(t){return!0}addEventListener(t,e,n){return t.addEventListener(e,n,!1),()=>this.removeEventListener(t,e,n)}removeEventListener(t,e,n){return t.removeEventListener(e,n)}}return t.\\u0275fac=function(e){return new(e||t)(ds(sc))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();const Nu=[\"alt\",\"control\",\"meta\",\"shift\"],Vu={\"\\b\":\"Backspace\",\"\\t\":\"Tab\",\"\\x7f\":\"Delete\",\"\\x1b\":\"Escape\",Del:\"Delete\",Esc:\"Escape\",Left:\"ArrowLeft\",Right:\"ArrowRight\",Up:\"ArrowUp\",Down:\"ArrowDown\",Menu:\"ContextMenu\",Scroll:\"ScrollLock\",Win:\"OS\"},Mu={A:\"1\",B:\"2\",C:\"3\",D:\"4\",E:\"5\",F:\"6\",G:\"7\",H:\"8\",I:\"9\",J:\"*\",K:\"+\",M:\"-\",N:\".\",O:\"/\",\"`\":\"0\",\"\\x90\":\"NumLock\"},ju={alt:t=>t.altKey,control:t=>t.ctrlKey,meta:t=>t.metaKey,shift:t=>t.shiftKey};let Uu=(()=>{class t extends Cu{constructor(t){super(t)}supports(e){return null!=t.parseEventName(e)}addEventListener(e,n,s){const r=t.parseEventName(n),i=t.eventCallback(r.fullKey,s,this.manager.getZone());return this.manager.getZone().runOutsideAngular(()=>nc().onAndCancel(e,r.domEventName,i))}static parseEventName(e){const n=e.toLowerCase().split(\".\"),s=n.shift();if(0===n.length||\"keydown\"!==s&&\"keyup\"!==s)return null;const r=t._normalizeKey(n.pop());let i=\"\";if(Nu.forEach(t=>{const e=n.indexOf(t);e>-1&&(n.splice(e,1),i+=t+\".\")}),i+=r,0!=n.length||0===r.length)return null;const o={};return o.domEventName=s,o.fullKey=i,o}static getEventFullKey(t){let e=\"\",n=function(t){let e=t.key;if(null==e){if(e=t.keyIdentifier,null==e)return\"Unidentified\";e.startsWith(\"U+\")&&(e=String.fromCharCode(parseInt(e.substring(2),16)),3===t.location&&Mu.hasOwnProperty(e)&&(e=Mu[e]))}return Vu[e]||e}(t);return n=n.toLowerCase(),\" \"===n?n=\"space\":\".\"===n&&(n=\"dot\"),Nu.forEach(s=>{s!=n&&(0,ju[s])(t)&&(e+=s+\".\")}),e+=n,e}static eventCallback(e,n,s){return r=>{t.getEventFullKey(r)===e&&s.runGuarded(()=>n(r))}}static _normalizeKey(t){switch(t){case\"esc\":return\"escape\";default:return t}}}return t.\\u0275fac=function(e){return new(e||t)(ds(sc))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();const Bu=Nl(Wl,\"browser\",[{provide:rl,useValue:\"browser\"},{provide:sl,useValue:function(){gu.makeCurrent(),wu.init()},multi:!0},{provide:sc,useFactory:function(){return function(t){pe=t}(document),document},deps:[]}]),Hu=[[],{provide:hi,useValue:\"root\"},{provide:Cs,useFactory:function(){return new Cs},deps:[]},{provide:xu,useClass:Fu,multi:!0,deps:[sc,vl,rl]},{provide:xu,useClass:Uu,multi:!0,deps:[sc]},[],{provide:Ru,useClass:Ru,deps:[Su,ku,tl]},{provide:jo,useExisting:Ru},{provide:Eu,useExisting:ku},{provide:ku,useClass:ku,deps:[sc]},{provide:kl,useClass:kl,deps:[vl]},{provide:Su,useClass:Su,deps:[xu,vl]},[]];let zu=(()=>{class t{constructor(t){if(t)throw new Error(\"BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.\")}static withServerTransition(e){return{ngModule:t,providers:[{provide:tl,useValue:e.appId},{provide:vu,useExisting:tl},bu]}}}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)(ds(t,12))},providers:Hu,imports:[Rc,Gl]}),t})();\"undefined\"!=typeof window&&window;class $u{}const qu=\"*\";function Qu(t,e){return{type:7,name:t,definitions:e,options:{}}}function Wu(t,e=null){return{type:4,styles:e,timings:t}}function Ku(t,e=null){return{type:2,steps:t,options:e}}function Gu(t){return{type:6,styles:t,offset:null}}function Zu(t){return{type:5,steps:t}}function Yu(t,e,n=null){return{type:1,expr:t,animation:e,options:n}}function Xu(t,e=null){return{type:8,animation:t,options:e}}function Ju(t,e=null){return{type:10,animation:t,options:e}}function th(t){Promise.resolve(null).then(t)}class eh{constructor(t=0,e=0){this._onDoneFns=[],this._onStartFns=[],this._onDestroyFns=[],this._started=!1,this._destroyed=!1,this._finished=!1,this._position=0,this.parentPlayer=null,this.totalTime=t+e}_onFinish(){this._finished||(this._finished=!0,this._onDoneFns.forEach(t=>t()),this._onDoneFns=[])}onStart(t){this._onStartFns.push(t)}onDone(t){this._onDoneFns.push(t)}onDestroy(t){this._onDestroyFns.push(t)}hasStarted(){return this._started}init(){}play(){this.hasStarted()||(this._onStart(),this.triggerMicrotask()),this._started=!0}triggerMicrotask(){th(()=>this._onFinish())}_onStart(){this._onStartFns.forEach(t=>t()),this._onStartFns=[]}pause(){}restart(){}finish(){this._onFinish()}destroy(){this._destroyed||(this._destroyed=!0,this.hasStarted()||this._onStart(),this.finish(),this._onDestroyFns.forEach(t=>t()),this._onDestroyFns=[])}reset(){}setPosition(t){this._position=this.totalTime?t*this.totalTime:1}getPosition(){return this.totalTime?this._position/this.totalTime:1}triggerCallback(t){const e=\"start\"==t?this._onStartFns:this._onDoneFns;e.forEach(t=>t()),e.length=0}}class nh{constructor(t){this._onDoneFns=[],this._onStartFns=[],this._finished=!1,this._started=!1,this._destroyed=!1,this._onDestroyFns=[],this.parentPlayer=null,this.totalTime=0,this.players=t;let e=0,n=0,s=0;const r=this.players.length;0==r?th(()=>this._onFinish()):this.players.forEach(t=>{t.onDone(()=>{++e==r&&this._onFinish()}),t.onDestroy(()=>{++n==r&&this._onDestroy()}),t.onStart(()=>{++s==r&&this._onStart()})}),this.totalTime=this.players.reduce((t,e)=>Math.max(t,e.totalTime),0)}_onFinish(){this._finished||(this._finished=!0,this._onDoneFns.forEach(t=>t()),this._onDoneFns=[])}init(){this.players.forEach(t=>t.init())}onStart(t){this._onStartFns.push(t)}_onStart(){this.hasStarted()||(this._started=!0,this._onStartFns.forEach(t=>t()),this._onStartFns=[])}onDone(t){this._onDoneFns.push(t)}onDestroy(t){this._onDestroyFns.push(t)}hasStarted(){return this._started}play(){this.parentPlayer||this.init(),this._onStart(),this.players.forEach(t=>t.play())}pause(){this.players.forEach(t=>t.pause())}restart(){this.players.forEach(t=>t.restart())}finish(){this._onFinish(),this.players.forEach(t=>t.finish())}destroy(){this._onDestroy()}_onDestroy(){this._destroyed||(this._destroyed=!0,this._onFinish(),this.players.forEach(t=>t.destroy()),this._onDestroyFns.forEach(t=>t()),this._onDestroyFns=[])}reset(){this.players.forEach(t=>t.reset()),this._destroyed=!1,this._finished=!1,this._started=!1}setPosition(t){const e=t*this.totalTime;this.players.forEach(t=>{const n=t.totalTime?Math.min(1,e/t.totalTime):1;t.setPosition(n)})}getPosition(){const t=this.players.reduce((t,e)=>null===t||e.totalTime>t.totalTime?e:t,null);return null!=t?t.getPosition():0}beforeDestroy(){this.players.forEach(t=>{t.beforeDestroy&&t.beforeDestroy()})}triggerCallback(t){const e=\"start\"==t?this._onStartFns:this._onDoneFns;e.forEach(t=>t()),e.length=0}}function sh(){return\"undefined\"!=typeof process&&\"[object process]\"==={}.toString.call(process)}function rh(t){switch(t.length){case 0:return new eh;case 1:return t[0];default:return new nh(t)}}function ih(t,e,n,s,r={},i={}){const o=[],a=[];let l=-1,c=null;if(s.forEach(t=>{const n=t.offset,s=n==l,u=s&&c||{};Object.keys(t).forEach(n=>{let s=n,a=t[n];if(\"offset\"!==n)switch(s=e.normalizePropertyName(s,o),a){case\"!\":a=r[n];break;case qu:a=i[n];break;default:a=e.normalizeStyleValue(n,s,a,o)}u[s]=a}),s||a.push(u),c=u,l=n}),o.length){const t=\"\\n - \";throw new Error(`Unable to animate due to the following errors:${t}${o.join(t)}`)}return a}function oh(t,e,n,s){switch(e){case\"start\":t.onStart(()=>s(n&&ah(n,\"start\",t)));break;case\"done\":t.onDone(()=>s(n&&ah(n,\"done\",t)));break;case\"destroy\":t.onDestroy(()=>s(n&&ah(n,\"destroy\",t)))}}function ah(t,e,n){const s=n.totalTime,r=lh(t.element,t.triggerName,t.fromState,t.toState,e||t.phaseName,null==s?t.totalTime:s,!!n.disabled),i=t._data;return null!=i&&(r._data=i),r}function lh(t,e,n,s,r=\"\",i=0,o){return{element:t,triggerName:e,fromState:n,toState:s,phaseName:r,totalTime:i,disabled:!!o}}function ch(t,e,n){let s;return t instanceof Map?(s=t.get(e),s||t.set(e,s=n)):(s=t[e],s||(s=t[e]=n)),s}function uh(t){const e=t.indexOf(\":\");return[t.substring(1,e),t.substr(e+1)]}let hh=(t,e)=>!1,dh=(t,e)=>!1,ph=(t,e,n)=>[];const fh=sh();(fh||\"undefined\"!=typeof Element)&&(hh=(t,e)=>t.contains(e),dh=(()=>{if(fh||Element.prototype.matches)return(t,e)=>t.matches(e);{const t=Element.prototype,e=t.matchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector;return e?(t,n)=>e.apply(t,[n]):dh}})(),ph=(t,e,n)=>{let s=[];if(n){const n=t.querySelectorAll(e);for(let t=0;t<n.length;t++)s.push(n[t])}else{const n=t.querySelector(e);n&&s.push(n)}return s});let mh=null,gh=!1;function yh(t){mh||(mh=(\"undefined\"!=typeof document?document.body:null)||{},gh=!!mh.style&&\"WebkitAppearance\"in mh.style);let e=!0;return mh.style&&!function(t){return\"ebkit\"==t.substring(1,6)}(t)&&(e=t in mh.style,!e&&gh)&&(e=\"Webkit\"+t.charAt(0).toUpperCase()+t.substr(1)in mh.style),e}const _h=dh,vh=hh,bh=ph;function wh(t){const e={};return Object.keys(t).forEach(n=>{const s=n.replace(/([a-z])([A-Z])/g,\"$1-$2\");e[s]=t[n]}),e}let xh=(()=>{class t{validateStyleProperty(t){return yh(t)}matchesElement(t,e){return _h(t,e)}containsElement(t,e){return vh(t,e)}query(t,e,n){return bh(t,e,n)}computeStyle(t,e,n){return n||\"\"}animate(t,e,n,s,r,i=[],o){return new eh(n,s)}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),Sh=(()=>{class t{}return t.NOOP=new xh,t})();const Ch=\"ng-enter\",Eh=\"ng-leave\",kh=\"ng-trigger\",Th=\".ng-trigger\",Ah=\"ng-animating\",Ih=\".ng-animating\";function Oh(t){if(\"number\"==typeof t)return t;const e=t.match(/^(-?[\\.\\d]+)(m?s)/);return!e||e.length<2?0:Rh(parseFloat(e[1]),e[2])}function Rh(t,e){switch(e){case\"s\":return 1e3*t;default:return t}}function Ph(t,e,n){return t.hasOwnProperty(\"duration\")?t:function(t,e,n){let s,r=0,i=\"\";if(\"string\"==typeof t){const n=t.match(/^(-?[\\.\\d]+)(m?s)(?:\\s+(-?[\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?$/i);if(null===n)return e.push(`The provided timing value \"${t}\" is invalid.`),{duration:0,delay:0,easing:\"\"};s=Rh(parseFloat(n[1]),n[2]);const o=n[3];null!=o&&(r=Rh(parseFloat(o),n[4]));const a=n[5];a&&(i=a)}else s=t;if(!n){let n=!1,i=e.length;s<0&&(e.push(\"Duration values below 0 are not allowed for this animation step.\"),n=!0),r<0&&(e.push(\"Delay values below 0 are not allowed for this animation step.\"),n=!0),n&&e.splice(i,0,`The provided timing value \"${t}\" is invalid.`)}return{duration:s,delay:r,easing:i}}(t,e,n)}function Lh(t,e={}){return Object.keys(t).forEach(n=>{e[n]=t[n]}),e}function Dh(t,e,n={}){if(e)for(let s in t)n[s]=t[s];else Lh(t,n);return n}function Fh(t,e,n){return n?e+\":\"+n+\";\":\"\"}function Nh(t){let e=\"\";for(let n=0;n<t.style.length;n++){const s=t.style.item(n);e+=Fh(0,s,t.style.getPropertyValue(s))}for(const n in t.style)t.style.hasOwnProperty(n)&&!n.startsWith(\"_\")&&(e+=Fh(0,n.replace(/([a-z])([A-Z])/g,\"$1-$2\").toLowerCase(),t.style[n]));t.setAttribute(\"style\",e)}function Vh(t,e,n){t.style&&(Object.keys(e).forEach(s=>{const r=qh(s);n&&!n.hasOwnProperty(s)&&(n[s]=t.style[r]),t.style[r]=e[s]}),sh()&&Nh(t))}function Mh(t,e){t.style&&(Object.keys(e).forEach(e=>{const n=qh(e);t.style[n]=\"\"}),sh()&&Nh(t))}function jh(t){return Array.isArray(t)?1==t.length?t[0]:Ku(t):t}const Uh=new RegExp(\"{{\\\\s*(.+?)\\\\s*}}\",\"g\");function Bh(t){let e=[];if(\"string\"==typeof t){let n;for(;n=Uh.exec(t);)e.push(n[1]);Uh.lastIndex=0}return e}function Hh(t,e,n){const s=t.toString(),r=s.replace(Uh,(t,s)=>{let r=e[s];return e.hasOwnProperty(s)||(n.push(\"Please provide a value for the animation param \"+s),r=\"\"),r.toString()});return r==s?t:r}function zh(t){const e=[];let n=t.next();for(;!n.done;)e.push(n.value),n=t.next();return e}const $h=/-+([a-z0-9])/g;function qh(t){return t.replace($h,(...t)=>t[1].toUpperCase())}function Qh(t,e){return 0===t||0===e}function Wh(t,e,n){const s=Object.keys(n);if(s.length&&e.length){let i=e[0],o=[];if(s.forEach(t=>{i.hasOwnProperty(t)||o.push(t),i[t]=n[t]}),o.length)for(var r=1;r<e.length;r++){let n=e[r];o.forEach(function(e){n[e]=Gh(t,e)})}}return e}function Kh(t,e,n){switch(e.type){case 7:return t.visitTrigger(e,n);case 0:return t.visitState(e,n);case 1:return t.visitTransition(e,n);case 2:return t.visitSequence(e,n);case 3:return t.visitGroup(e,n);case 4:return t.visitAnimate(e,n);case 5:return t.visitKeyframes(e,n);case 6:return t.visitStyle(e,n);case 8:return t.visitReference(e,n);case 9:return t.visitAnimateChild(e,n);case 10:return t.visitAnimateRef(e,n);case 11:return t.visitQuery(e,n);case 12:return t.visitStagger(e,n);default:throw new Error(\"Unable to resolve animation metadata node #\"+e.type)}}function Gh(t,e){return window.getComputedStyle(t)[e]}const Zh=\"*\";function Yh(t,e){const n=[];return\"string\"==typeof t?t.split(/\\s*,\\s*/).forEach(t=>function(t,e,n){if(\":\"==t[0]){const s=function(t,e){switch(t){case\":enter\":return\"void => *\";case\":leave\":return\"* => void\";case\":increment\":return(t,e)=>parseFloat(e)>parseFloat(t);case\":decrement\":return(t,e)=>parseFloat(e)<parseFloat(t);default:return e.push(`The transition alias value \"${t}\" is not supported`),\"* => *\"}}(t,n);if(\"function\"==typeof s)return void e.push(s);t=s}const s=t.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);if(null==s||s.length<4)return n.push(`The provided transition expression \"${t}\" is not supported`),e;const r=s[1],i=s[2],o=s[3];e.push(td(r,o)),\"<\"!=i[0]||r==Zh&&o==Zh||e.push(td(o,r))}(t,n,e)):n.push(t),n}const Xh=new Set([\"true\",\"1\"]),Jh=new Set([\"false\",\"0\"]);function td(t,e){const n=Xh.has(t)||Jh.has(t),s=Xh.has(e)||Jh.has(e);return(r,i)=>{let o=t==Zh||t==r,a=e==Zh||e==i;return!o&&n&&\"boolean\"==typeof r&&(o=r?Xh.has(t):Jh.has(t)),!a&&s&&\"boolean\"==typeof i&&(a=i?Xh.has(e):Jh.has(e)),o&&a}}const ed=new RegExp(\"s*:selfs*,?\",\"g\");function nd(t,e,n){return new sd(t).build(e,n)}class sd{constructor(t){this._driver=t}build(t,e){const n=new rd(e);return this._resetContextStyleTimingState(n),Kh(this,jh(t),n)}_resetContextStyleTimingState(t){t.currentQuerySelector=\"\",t.collectedStyles={},t.collectedStyles[\"\"]={},t.currentTime=0}visitTrigger(t,e){let n=e.queryCount=0,s=e.depCount=0;const r=[],i=[];return\"@\"==t.name.charAt(0)&&e.errors.push(\"animation triggers cannot be prefixed with an `@` sign (e.g. trigger('@foo', [...]))\"),t.definitions.forEach(t=>{if(this._resetContextStyleTimingState(e),0==t.type){const n=t,s=n.name;s.toString().split(/\\s*,\\s*/).forEach(t=>{n.name=t,r.push(this.visitState(n,e))}),n.name=s}else if(1==t.type){const r=this.visitTransition(t,e);n+=r.queryCount,s+=r.depCount,i.push(r)}else e.errors.push(\"only state() and transition() definitions can sit inside of a trigger()\")}),{type:7,name:t.name,states:r,transitions:i,queryCount:n,depCount:s,options:null}}visitState(t,e){const n=this.visitStyle(t.styles,e),s=t.options&&t.options.params||null;if(n.containsDynamicStyles){const r=new Set,i=s||{};if(n.styles.forEach(t=>{if(id(t)){const e=t;Object.keys(e).forEach(t=>{Bh(e[t]).forEach(t=>{i.hasOwnProperty(t)||r.add(t)})})}}),r.size){const n=zh(r.values());e.errors.push(`state(\"${t.name}\", ...) must define default values for all the following style substitutions: ${n.join(\", \")}`)}}return{type:0,name:t.name,style:n,options:s?{params:s}:null}}visitTransition(t,e){e.queryCount=0,e.depCount=0;const n=Kh(this,jh(t.animation),e);return{type:1,matchers:Yh(t.expr,e.errors),animation:n,queryCount:e.queryCount,depCount:e.depCount,options:od(t.options)}}visitSequence(t,e){return{type:2,steps:t.steps.map(t=>Kh(this,t,e)),options:od(t.options)}}visitGroup(t,e){const n=e.currentTime;let s=0;const r=t.steps.map(t=>{e.currentTime=n;const r=Kh(this,t,e);return s=Math.max(s,e.currentTime),r});return e.currentTime=s,{type:3,steps:r,options:od(t.options)}}visitAnimate(t,e){const n=function(t,e){let n=null;if(t.hasOwnProperty(\"duration\"))n=t;else if(\"number\"==typeof t)return ad(Ph(t,e).duration,0,\"\");const s=t;if(s.split(/\\s+/).some(t=>\"{\"==t.charAt(0)&&\"{\"==t.charAt(1))){const t=ad(0,0,\"\");return t.dynamic=!0,t.strValue=s,t}return n=n||Ph(s,e),ad(n.duration,n.delay,n.easing)}(t.timings,e.errors);let s;e.currentAnimateTimings=n;let r=t.styles?t.styles:Gu({});if(5==r.type)s=this.visitKeyframes(r,e);else{let r=t.styles,i=!1;if(!r){i=!0;const t={};n.easing&&(t.easing=n.easing),r=Gu(t)}e.currentTime+=n.duration+n.delay;const o=this.visitStyle(r,e);o.isEmptyStep=i,s=o}return e.currentAnimateTimings=null,{type:4,timings:n,style:s,options:null}}visitStyle(t,e){const n=this._makeStyleAst(t,e);return this._validateStyleAst(n,e),n}_makeStyleAst(t,e){const n=[];Array.isArray(t.styles)?t.styles.forEach(t=>{\"string\"==typeof t?t==qu?n.push(t):e.errors.push(`The provided style string value ${t} is not allowed.`):n.push(t)}):n.push(t.styles);let s=!1,r=null;return n.forEach(t=>{if(id(t)){const e=t,n=e.easing;if(n&&(r=n,delete e.easing),!s)for(let t in e)if(e[t].toString().indexOf(\"{{\")>=0){s=!0;break}}}),{type:6,styles:n,easing:r,offset:t.offset,containsDynamicStyles:s,options:null}}_validateStyleAst(t,e){const n=e.currentAnimateTimings;let s=e.currentTime,r=e.currentTime;n&&r>0&&(r-=n.duration+n.delay),t.styles.forEach(t=>{\"string\"!=typeof t&&Object.keys(t).forEach(n=>{if(!this._driver.validateStyleProperty(n))return void e.errors.push(`The provided animation property \"${n}\" is not a supported CSS property for animations`);const i=e.collectedStyles[e.currentQuerySelector],o=i[n];let a=!0;o&&(r!=s&&r>=o.startTime&&s<=o.endTime&&(e.errors.push(`The CSS property \"${n}\" that exists between the times of \"${o.startTime}ms\" and \"${o.endTime}ms\" is also being animated in a parallel animation between the times of \"${r}ms\" and \"${s}ms\"`),a=!1),r=o.startTime),a&&(i[n]={startTime:r,endTime:s}),e.options&&function(t,e,n){const s=e.params||{},r=Bh(t);r.length&&r.forEach(t=>{s.hasOwnProperty(t)||n.push(`Unable to resolve the local animation param ${t} in the given list of values`)})}(t[n],e.options,e.errors)})})}visitKeyframes(t,e){const n={type:5,styles:[],options:null};if(!e.currentAnimateTimings)return e.errors.push(\"keyframes() must be placed inside of a call to animate()\"),n;let s=0;const r=[];let i=!1,o=!1,a=0;const l=t.steps.map(t=>{const n=this._makeStyleAst(t,e);let l=null!=n.offset?n.offset:function(t){if(\"string\"==typeof t)return null;let e=null;if(Array.isArray(t))t.forEach(t=>{if(id(t)&&t.hasOwnProperty(\"offset\")){const n=t;e=parseFloat(n.offset),delete n.offset}});else if(id(t)&&t.hasOwnProperty(\"offset\")){const n=t;e=parseFloat(n.offset),delete n.offset}return e}(n.styles),c=0;return null!=l&&(s++,c=n.offset=l),o=o||c<0||c>1,i=i||c<a,a=c,r.push(c),n});o&&e.errors.push(\"Please ensure that all keyframe offsets are between 0 and 1\"),i&&e.errors.push(\"Please ensure that all keyframe offsets are in order\");const c=t.steps.length;let u=0;s>0&&s<c?e.errors.push(\"Not all style() steps within the declared keyframes() contain offsets\"):0==s&&(u=1/(c-1));const h=c-1,d=e.currentTime,p=e.currentAnimateTimings,f=p.duration;return l.forEach((t,s)=>{const i=u>0?s==h?1:u*s:r[s],o=i*f;e.currentTime=d+p.delay+o,p.duration=o,this._validateStyleAst(t,e),t.offset=i,n.styles.push(t)}),n}visitReference(t,e){return{type:8,animation:Kh(this,jh(t.animation),e),options:od(t.options)}}visitAnimateChild(t,e){return e.depCount++,{type:9,options:od(t.options)}}visitAnimateRef(t,e){return{type:10,animation:this.visitReference(t.animation,e),options:od(t.options)}}visitQuery(t,e){const n=e.currentQuerySelector,s=t.options||{};e.queryCount++,e.currentQuery=t;const[r,i]=function(t){const e=!!t.split(/\\s*,\\s*/).find(t=>\":self\"==t);return e&&(t=t.replace(ed,\"\")),[t=t.replace(/@\\*/g,Th).replace(/@\\w+/g,t=>\".ng-trigger-\"+t.substr(1)).replace(/:animating/g,Ih),e]}(t.selector);e.currentQuerySelector=n.length?n+\" \"+r:r,ch(e.collectedStyles,e.currentQuerySelector,{});const o=Kh(this,jh(t.animation),e);return e.currentQuery=null,e.currentQuerySelector=n,{type:11,selector:r,limit:s.limit||0,optional:!!s.optional,includeSelf:i,animation:o,originalSelector:t.selector,options:od(t.options)}}visitStagger(t,e){e.currentQuery||e.errors.push(\"stagger() can only be used inside of query()\");const n=\"full\"===t.timings?{duration:0,delay:0,easing:\"full\"}:Ph(t.timings,e.errors,!0);return{type:12,animation:Kh(this,jh(t.animation),e),timings:n,options:null}}}class rd{constructor(t){this.errors=t,this.queryCount=0,this.depCount=0,this.currentTransition=null,this.currentQuery=null,this.currentQuerySelector=null,this.currentAnimateTimings=null,this.currentTime=0,this.collectedStyles={},this.options=null}}function id(t){return!Array.isArray(t)&&\"object\"==typeof t}function od(t){var e;return t?(t=Lh(t)).params&&(t.params=(e=t.params)?Lh(e):null):t={},t}function ad(t,e,n){return{duration:t,delay:e,easing:n}}function ld(t,e,n,s,r,i,o=null,a=!1){return{type:1,element:t,keyframes:e,preStyleProps:n,postStyleProps:s,duration:r,delay:i,totalTime:r+i,easing:o,subTimeline:a}}class cd{constructor(){this._map=new Map}consume(t){let e=this._map.get(t);return e?this._map.delete(t):e=[],e}append(t,e){let n=this._map.get(t);n||this._map.set(t,n=[]),n.push(...e)}has(t){return this._map.has(t)}clear(){this._map.clear()}}const ud=new RegExp(\":enter\",\"g\"),hd=new RegExp(\":leave\",\"g\");function dd(t,e,n,s,r,i={},o={},a,l,c=[]){return(new pd).buildKeyframes(t,e,n,s,r,i,o,a,l,c)}class pd{buildKeyframes(t,e,n,s,r,i,o,a,l,c=[]){l=l||new cd;const u=new md(t,e,l,s,r,c,[]);u.options=a,u.currentTimeline.setStyles([i],null,u.errors,a),Kh(this,n,u);const h=u.timelines.filter(t=>t.containsAnimation());if(h.length&&Object.keys(o).length){const t=h[h.length-1];t.allowOnlyTimelineStyles()||t.setStyles([o],null,u.errors,a)}return h.length?h.map(t=>t.buildKeyframes()):[ld(e,[],[],[],0,0,\"\",!1)]}visitTrigger(t,e){}visitState(t,e){}visitTransition(t,e){}visitAnimateChild(t,e){const n=e.subInstructions.consume(e.element);if(n){const s=e.createSubContext(t.options),r=e.currentTimeline.currentTime,i=this._visitSubInstructions(n,s,s.options);r!=i&&e.transformIntoNewTimeline(i)}e.previousNode=t}visitAnimateRef(t,e){const n=e.createSubContext(t.options);n.transformIntoNewTimeline(),this.visitReference(t.animation,n),e.transformIntoNewTimeline(n.currentTimeline.currentTime),e.previousNode=t}_visitSubInstructions(t,e,n){let s=e.currentTimeline.currentTime;const r=null!=n.duration?Oh(n.duration):null,i=null!=n.delay?Oh(n.delay):null;return 0!==r&&t.forEach(t=>{const n=e.appendInstructionToTimeline(t,r,i);s=Math.max(s,n.duration+n.delay)}),s}visitReference(t,e){e.updateOptions(t.options,!0),Kh(this,t.animation,e),e.previousNode=t}visitSequence(t,e){const n=e.subContextCount;let s=e;const r=t.options;if(r&&(r.params||r.delay)&&(s=e.createSubContext(r),s.transformIntoNewTimeline(),null!=r.delay)){6==s.previousNode.type&&(s.currentTimeline.snapshotCurrentStyles(),s.previousNode=fd);const t=Oh(r.delay);s.delayNextStep(t)}t.steps.length&&(t.steps.forEach(t=>Kh(this,t,s)),s.currentTimeline.applyStylesToKeyframe(),s.subContextCount>n&&s.transformIntoNewTimeline()),e.previousNode=t}visitGroup(t,e){const n=[];let s=e.currentTimeline.currentTime;const r=t.options&&t.options.delay?Oh(t.options.delay):0;t.steps.forEach(i=>{const o=e.createSubContext(t.options);r&&o.delayNextStep(r),Kh(this,i,o),s=Math.max(s,o.currentTimeline.currentTime),n.push(o.currentTimeline)}),n.forEach(t=>e.currentTimeline.mergeTimelineCollectedStyles(t)),e.transformIntoNewTimeline(s),e.previousNode=t}_visitTiming(t,e){if(t.dynamic){const n=t.strValue;return Ph(e.params?Hh(n,e.params,e.errors):n,e.errors)}return{duration:t.duration,delay:t.delay,easing:t.easing}}visitAnimate(t,e){const n=e.currentAnimateTimings=this._visitTiming(t.timings,e),s=e.currentTimeline;n.delay&&(e.incrementTime(n.delay),s.snapshotCurrentStyles());const r=t.style;5==r.type?this.visitKeyframes(r,e):(e.incrementTime(n.duration),this.visitStyle(r,e),s.applyStylesToKeyframe()),e.currentAnimateTimings=null,e.previousNode=t}visitStyle(t,e){const n=e.currentTimeline,s=e.currentAnimateTimings;!s&&n.getCurrentStyleProperties().length&&n.forwardFrame();const r=s&&s.easing||t.easing;t.isEmptyStep?n.applyEmptyStep(r):n.setStyles(t.styles,r,e.errors,e.options),e.previousNode=t}visitKeyframes(t,e){const n=e.currentAnimateTimings,s=e.currentTimeline.duration,r=n.duration,i=e.createSubContext().currentTimeline;i.easing=n.easing,t.styles.forEach(t=>{i.forwardTime((t.offset||0)*r),i.setStyles(t.styles,t.easing,e.errors,e.options),i.applyStylesToKeyframe()}),e.currentTimeline.mergeTimelineCollectedStyles(i),e.transformIntoNewTimeline(s+r),e.previousNode=t}visitQuery(t,e){const n=e.currentTimeline.currentTime,s=t.options||{},r=s.delay?Oh(s.delay):0;r&&(6===e.previousNode.type||0==n&&e.currentTimeline.getCurrentStyleProperties().length)&&(e.currentTimeline.snapshotCurrentStyles(),e.previousNode=fd);let i=n;const o=e.invokeQuery(t.selector,t.originalSelector,t.limit,t.includeSelf,!!s.optional,e.errors);e.currentQueryTotal=o.length;let a=null;o.forEach((n,s)=>{e.currentQueryIndex=s;const o=e.createSubContext(t.options,n);r&&o.delayNextStep(r),n===e.element&&(a=o.currentTimeline),Kh(this,t.animation,o),o.currentTimeline.applyStylesToKeyframe(),i=Math.max(i,o.currentTimeline.currentTime)}),e.currentQueryIndex=0,e.currentQueryTotal=0,e.transformIntoNewTimeline(i),a&&(e.currentTimeline.mergeTimelineCollectedStyles(a),e.currentTimeline.snapshotCurrentStyles()),e.previousNode=t}visitStagger(t,e){const n=e.parentContext,s=e.currentTimeline,r=t.timings,i=Math.abs(r.duration),o=i*(e.currentQueryTotal-1);let a=i*e.currentQueryIndex;switch(r.duration<0?\"reverse\":r.easing){case\"reverse\":a=o-a;break;case\"full\":a=n.currentStaggerTime}const l=e.currentTimeline;a&&l.delayNextStep(a);const c=l.currentTime;Kh(this,t.animation,e),e.previousNode=t,n.currentStaggerTime=s.currentTime-c+(s.startTime-n.currentTimeline.startTime)}}const fd={};class md{constructor(t,e,n,s,r,i,o,a){this._driver=t,this.element=e,this.subInstructions=n,this._enterClassName=s,this._leaveClassName=r,this.errors=i,this.timelines=o,this.parentContext=null,this.currentAnimateTimings=null,this.previousNode=fd,this.subContextCount=0,this.options={},this.currentQueryIndex=0,this.currentQueryTotal=0,this.currentStaggerTime=0,this.currentTimeline=a||new gd(this._driver,e,0),o.push(this.currentTimeline)}get params(){return this.options.params}updateOptions(t,e){if(!t)return;const n=t;let s=this.options;null!=n.duration&&(s.duration=Oh(n.duration)),null!=n.delay&&(s.delay=Oh(n.delay));const r=n.params;if(r){let t=s.params;t||(t=this.options.params={}),Object.keys(r).forEach(n=>{e&&t.hasOwnProperty(n)||(t[n]=Hh(r[n],t,this.errors))})}}_copyOptions(){const t={};if(this.options){const e=this.options.params;if(e){const n=t.params={};Object.keys(e).forEach(t=>{n[t]=e[t]})}}return t}createSubContext(t=null,e,n){const s=e||this.element,r=new md(this._driver,s,this.subInstructions,this._enterClassName,this._leaveClassName,this.errors,this.timelines,this.currentTimeline.fork(s,n||0));return r.previousNode=this.previousNode,r.currentAnimateTimings=this.currentAnimateTimings,r.options=this._copyOptions(),r.updateOptions(t),r.currentQueryIndex=this.currentQueryIndex,r.currentQueryTotal=this.currentQueryTotal,r.parentContext=this,this.subContextCount++,r}transformIntoNewTimeline(t){return this.previousNode=fd,this.currentTimeline=this.currentTimeline.fork(this.element,t),this.timelines.push(this.currentTimeline),this.currentTimeline}appendInstructionToTimeline(t,e,n){const s={duration:null!=e?e:t.duration,delay:this.currentTimeline.currentTime+(null!=n?n:0)+t.delay,easing:\"\"},r=new yd(this._driver,t.element,t.keyframes,t.preStyleProps,t.postStyleProps,s,t.stretchStartingKeyframe);return this.timelines.push(r),s}incrementTime(t){this.currentTimeline.forwardTime(this.currentTimeline.duration+t)}delayNextStep(t){t>0&&this.currentTimeline.delayNextStep(t)}invokeQuery(t,e,n,s,r,i){let o=[];if(s&&o.push(this.element),t.length>0){t=(t=t.replace(ud,\".\"+this._enterClassName)).replace(hd,\".\"+this._leaveClassName);let e=this._driver.query(this.element,t,1!=n);0!==n&&(e=n<0?e.slice(e.length+n,e.length):e.slice(0,n)),o.push(...e)}return r||0!=o.length||i.push(`\\`query(\"${e}\")\\` returned zero elements. (Use \\`query(\"${e}\", { optional: true })\\` if you wish to allow this.)`),o}}class gd{constructor(t,e,n,s){this._driver=t,this.element=e,this.startTime=n,this._elementTimelineStylesLookup=s,this.duration=0,this._previousKeyframe={},this._currentKeyframe={},this._keyframes=new Map,this._styleSummary={},this._pendingStyles={},this._backFill={},this._currentEmptyStepKeyframe=null,this._elementTimelineStylesLookup||(this._elementTimelineStylesLookup=new Map),this._localTimelineStyles=Object.create(this._backFill,{}),this._globalTimelineStyles=this._elementTimelineStylesLookup.get(e),this._globalTimelineStyles||(this._globalTimelineStyles=this._localTimelineStyles,this._elementTimelineStylesLookup.set(e,this._localTimelineStyles)),this._loadKeyframe()}containsAnimation(){switch(this._keyframes.size){case 0:return!1;case 1:return this.getCurrentStyleProperties().length>0;default:return!0}}getCurrentStyleProperties(){return Object.keys(this._currentKeyframe)}get currentTime(){return this.startTime+this.duration}delayNextStep(t){const e=1==this._keyframes.size&&Object.keys(this._pendingStyles).length;this.duration||e?(this.forwardTime(this.currentTime+t),e&&this.snapshotCurrentStyles()):this.startTime+=t}fork(t,e){return this.applyStylesToKeyframe(),new gd(this._driver,t,e||this.currentTime,this._elementTimelineStylesLookup)}_loadKeyframe(){this._currentKeyframe&&(this._previousKeyframe=this._currentKeyframe),this._currentKeyframe=this._keyframes.get(this.duration),this._currentKeyframe||(this._currentKeyframe=Object.create(this._backFill,{}),this._keyframes.set(this.duration,this._currentKeyframe))}forwardFrame(){this.duration+=1,this._loadKeyframe()}forwardTime(t){this.applyStylesToKeyframe(),this.duration=t,this._loadKeyframe()}_updateStyle(t,e){this._localTimelineStyles[t]=e,this._globalTimelineStyles[t]=e,this._styleSummary[t]={time:this.currentTime,value:e}}allowOnlyTimelineStyles(){return this._currentEmptyStepKeyframe!==this._currentKeyframe}applyEmptyStep(t){t&&(this._previousKeyframe.easing=t),Object.keys(this._globalTimelineStyles).forEach(t=>{this._backFill[t]=this._globalTimelineStyles[t]||qu,this._currentKeyframe[t]=qu}),this._currentEmptyStepKeyframe=this._currentKeyframe}setStyles(t,e,n,s){e&&(this._previousKeyframe.easing=e);const r=s&&s.params||{},i=function(t,e){const n={};let s;return t.forEach(t=>{\"*\"===t?(s=s||Object.keys(e),s.forEach(t=>{n[t]=qu})):Dh(t,!1,n)}),n}(t,this._globalTimelineStyles);Object.keys(i).forEach(t=>{const e=Hh(i[t],r,n);this._pendingStyles[t]=e,this._localTimelineStyles.hasOwnProperty(t)||(this._backFill[t]=this._globalTimelineStyles.hasOwnProperty(t)?this._globalTimelineStyles[t]:qu),this._updateStyle(t,e)})}applyStylesToKeyframe(){const t=this._pendingStyles,e=Object.keys(t);0!=e.length&&(this._pendingStyles={},e.forEach(e=>{this._currentKeyframe[e]=t[e]}),Object.keys(this._localTimelineStyles).forEach(t=>{this._currentKeyframe.hasOwnProperty(t)||(this._currentKeyframe[t]=this._localTimelineStyles[t])}))}snapshotCurrentStyles(){Object.keys(this._localTimelineStyles).forEach(t=>{const e=this._localTimelineStyles[t];this._pendingStyles[t]=e,this._updateStyle(t,e)})}getFinalKeyframe(){return this._keyframes.get(this.duration)}get properties(){const t=[];for(let e in this._currentKeyframe)t.push(e);return t}mergeTimelineCollectedStyles(t){Object.keys(t._styleSummary).forEach(e=>{const n=this._styleSummary[e],s=t._styleSummary[e];(!n||s.time>n.time)&&this._updateStyle(e,s.value)})}buildKeyframes(){this.applyStylesToKeyframe();const t=new Set,e=new Set,n=1===this._keyframes.size&&0===this.duration;let s=[];this._keyframes.forEach((r,i)=>{const o=Dh(r,!0);Object.keys(o).forEach(n=>{const s=o[n];\"!\"==s?t.add(n):s==qu&&e.add(n)}),n||(o.offset=i/this.duration),s.push(o)});const r=t.size?zh(t.values()):[],i=e.size?zh(e.values()):[];if(n){const t=s[0],e=Lh(t);t.offset=0,e.offset=1,s=[t,e]}return ld(this.element,s,r,i,this.duration,this.startTime,this.easing,!1)}}class yd extends gd{constructor(t,e,n,s,r,i,o=!1){super(t,e,i.delay),this.element=e,this.keyframes=n,this.preStyleProps=s,this.postStyleProps=r,this._stretchStartingKeyframe=o,this.timings={duration:i.duration,delay:i.delay,easing:i.easing}}containsAnimation(){return this.keyframes.length>1}buildKeyframes(){let t=this.keyframes,{delay:e,duration:n,easing:s}=this.timings;if(this._stretchStartingKeyframe&&e){const r=[],i=n+e,o=e/i,a=Dh(t[0],!1);a.offset=0,r.push(a);const l=Dh(t[0],!1);l.offset=_d(o),r.push(l);const c=t.length-1;for(let s=1;s<=c;s++){let o=Dh(t[s],!1);o.offset=_d((e+o.offset*n)/i),r.push(o)}n=i,e=0,s=\"\",t=r}return ld(this.element,t,this.preStyleProps,this.postStyleProps,n,e,s,!0)}}function _d(t,e=3){const n=Math.pow(10,e-1);return Math.round(t*n)/n}class vd{}class bd extends vd{normalizePropertyName(t,e){return qh(t)}normalizeStyleValue(t,e,n,s){let r=\"\";const i=n.toString().trim();if(wd[e]&&0!==n&&\"0\"!==n)if(\"number\"==typeof n)r=\"px\";else{const e=n.match(/^[+-]?[\\d\\.]+([a-z]*)$/);e&&0==e[1].length&&s.push(`Please provide a CSS unit value for ${t}:${n}`)}return i+r}}const wd=(()=>function(t){const e={};return t.forEach(t=>e[t]=!0),e}(\"width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective\".split(\",\")))();function xd(t,e,n,s,r,i,o,a,l,c,u,h,d){return{type:0,element:t,triggerName:e,isRemovalTransition:r,fromState:n,fromStyles:i,toState:s,toStyles:o,timelines:a,queriedElements:l,preStyleProps:c,postStyleProps:u,totalTime:h,errors:d}}const Sd={};class Cd{constructor(t,e,n){this._triggerName=t,this.ast=e,this._stateStyles=n}match(t,e,n,s){return function(t,e,n,s,r){return t.some(t=>t(e,n,s,r))}(this.ast.matchers,t,e,n,s)}buildStyles(t,e,n){const s=this._stateStyles[\"*\"],r=this._stateStyles[t],i=s?s.buildStyles(e,n):{};return r?r.buildStyles(e,n):i}build(t,e,n,s,r,i,o,a,l,c){const u=[],h=this.ast.options&&this.ast.options.params||Sd,d=this.buildStyles(n,o&&o.params||Sd,u),p=a&&a.params||Sd,f=this.buildStyles(s,p,u),m=new Set,g=new Map,y=new Map,_=\"void\"===s,v={params:Object.assign(Object.assign({},h),p)},b=c?[]:dd(t,e,this.ast.animation,r,i,d,f,v,l,u);let w=0;if(b.forEach(t=>{w=Math.max(t.duration+t.delay,w)}),u.length)return xd(e,this._triggerName,n,s,_,d,f,[],[],g,y,w,u);b.forEach(t=>{const n=t.element,s=ch(g,n,{});t.preStyleProps.forEach(t=>s[t]=!0);const r=ch(y,n,{});t.postStyleProps.forEach(t=>r[t]=!0),n!==e&&m.add(n)});const x=zh(m.values());return xd(e,this._triggerName,n,s,_,d,f,b,x,g,y,w)}}class Ed{constructor(t,e){this.styles=t,this.defaultParams=e}buildStyles(t,e){const n={},s=Lh(this.defaultParams);return Object.keys(t).forEach(e=>{const n=t[e];null!=n&&(s[e]=n)}),this.styles.styles.forEach(t=>{if(\"string\"!=typeof t){const r=t;Object.keys(r).forEach(t=>{let i=r[t];i.length>1&&(i=Hh(i,s,e)),n[t]=i})}}),n}}class kd{constructor(t,e){this.name=t,this.ast=e,this.transitionFactories=[],this.states={},e.states.forEach(t=>{this.states[t.name]=new Ed(t.style,t.options&&t.options.params||{})}),Td(this.states,\"true\",\"1\"),Td(this.states,\"false\",\"0\"),e.transitions.forEach(e=>{this.transitionFactories.push(new Cd(t,e,this.states))}),this.fallbackTransition=new Cd(t,{type:1,animation:{type:2,steps:[],options:null},matchers:[(t,e)=>!0],options:null,queryCount:0,depCount:0},this.states)}get containsQueries(){return this.ast.queryCount>0}matchTransition(t,e,n,s){return this.transitionFactories.find(r=>r.match(t,e,n,s))||null}matchStyles(t,e,n){return this.fallbackTransition.buildStyles(t,e,n)}}function Td(t,e,n){t.hasOwnProperty(e)?t.hasOwnProperty(n)||(t[n]=t[e]):t.hasOwnProperty(n)&&(t[e]=t[n])}const Ad=new cd;class Id{constructor(t,e,n){this.bodyNode=t,this._driver=e,this._normalizer=n,this._animations={},this._playersById={},this.players=[]}register(t,e){const n=[],s=nd(this._driver,e,n);if(n.length)throw new Error(\"Unable to build the animation due to the following errors: \"+n.join(\"\\n\"));this._animations[t]=s}_buildPlayer(t,e,n){const s=t.element,r=ih(0,this._normalizer,0,t.keyframes,e,n);return this._driver.animate(s,r,t.duration,t.delay,t.easing,[],!0)}create(t,e,n={}){const s=[],r=this._animations[t];let i;const o=new Map;if(r?(i=dd(this._driver,e,r,Ch,Eh,{},{},n,Ad,s),i.forEach(t=>{const e=ch(o,t.element,{});t.postStyleProps.forEach(t=>e[t]=null)})):(s.push(\"The requested animation doesn't exist or has already been destroyed\"),i=[]),s.length)throw new Error(\"Unable to create the animation due to the following errors: \"+s.join(\"\\n\"));o.forEach((t,e)=>{Object.keys(t).forEach(n=>{t[n]=this._driver.computeStyle(e,n,qu)})});const a=rh(i.map(t=>{const e=o.get(t.element);return this._buildPlayer(t,{},e)}));return this._playersById[t]=a,a.onDestroy(()=>this.destroy(t)),this.players.push(a),a}destroy(t){const e=this._getPlayer(t);e.destroy(),delete this._playersById[t];const n=this.players.indexOf(e);n>=0&&this.players.splice(n,1)}_getPlayer(t){const e=this._playersById[t];if(!e)throw new Error(\"Unable to find the timeline player referenced by \"+t);return e}listen(t,e,n,s){const r=lh(e,\"\",\"\",\"\");return oh(this._getPlayer(t),n,r,s),()=>{}}command(t,e,n,s){if(\"register\"==n)return void this.register(t,s[0]);if(\"create\"==n)return void this.create(t,e,s[0]||{});const r=this._getPlayer(t);switch(n){case\"play\":r.play();break;case\"pause\":r.pause();break;case\"reset\":r.reset();break;case\"restart\":r.restart();break;case\"finish\":r.finish();break;case\"init\":r.init();break;case\"setPosition\":r.setPosition(parseFloat(s[0]));break;case\"destroy\":this.destroy(t)}}}const Od=\"ng-animate-queued\",Rd=\"ng-animate-disabled\",Pd=\".ng-animate-disabled\",Ld=[],Dd={namespaceId:\"\",setForRemoval:!1,setForMove:!1,hasAnimation:!1,removedBeforeQueried:!1},Fd={namespaceId:\"\",setForMove:!1,setForRemoval:!1,hasAnimation:!1,removedBeforeQueried:!0};class Nd{constructor(t,e=\"\"){this.namespaceId=e;const n=t&&t.hasOwnProperty(\"value\");if(this.value=null!=(s=n?t.value:t)?s:null,n){const e=Lh(t);delete e.value,this.options=e}else this.options={};var s;this.options.params||(this.options.params={})}get params(){return this.options.params}absorbOptions(t){const e=t.params;if(e){const t=this.options.params;Object.keys(e).forEach(n=>{null==t[n]&&(t[n]=e[n])})}}}const Vd=\"void\",Md=new Nd(Vd);class jd{constructor(t,e,n){this.id=t,this.hostElement=e,this._engine=n,this.players=[],this._triggers={},this._queue=[],this._elementListeners=new Map,this._hostClassName=\"ng-tns-\"+t,Qd(e,this._hostClassName)}listen(t,e,n,s){if(!this._triggers.hasOwnProperty(e))throw new Error(`Unable to listen on the animation trigger event \"${n}\" because the animation trigger \"${e}\" doesn't exist!`);if(null==n||0==n.length)throw new Error(`Unable to listen on the animation trigger \"${e}\" because the provided event is undefined!`);if(\"start\"!=(r=n)&&\"done\"!=r)throw new Error(`The provided animation trigger event \"${n}\" for the animation trigger \"${e}\" is not supported!`);var r;const i=ch(this._elementListeners,t,[]),o={name:e,phase:n,callback:s};i.push(o);const a=ch(this._engine.statesByElement,t,{});return a.hasOwnProperty(e)||(Qd(t,kh),Qd(t,\"ng-trigger-\"+e),a[e]=Md),()=>{this._engine.afterFlush(()=>{const t=i.indexOf(o);t>=0&&i.splice(t,1),this._triggers[e]||delete a[e]})}}register(t,e){return!this._triggers[t]&&(this._triggers[t]=e,!0)}_getTrigger(t){const e=this._triggers[t];if(!e)throw new Error(`The provided animation trigger \"${t}\" has not been registered!`);return e}trigger(t,e,n,s=!0){const r=this._getTrigger(e),i=new Bd(this.id,e,t);let o=this._engine.statesByElement.get(t);o||(Qd(t,kh),Qd(t,\"ng-trigger-\"+e),this._engine.statesByElement.set(t,o={}));let a=o[e];const l=new Nd(n,this.id);if(!(n&&n.hasOwnProperty(\"value\"))&&a&&l.absorbOptions(a.options),o[e]=l,a||(a=Md),l.value!==Vd&&a.value===l.value){if(!function(t,e){const n=Object.keys(t),s=Object.keys(e);if(n.length!=s.length)return!1;for(let r=0;r<n.length;r++){const s=n[r];if(!e.hasOwnProperty(s)||t[s]!==e[s])return!1}return!0}(a.params,l.params)){const e=[],n=r.matchStyles(a.value,a.params,e),s=r.matchStyles(l.value,l.params,e);e.length?this._engine.reportError(e):this._engine.afterFlush(()=>{Mh(t,n),Vh(t,s)})}return}const c=ch(this._engine.playersByElement,t,[]);c.forEach(t=>{t.namespaceId==this.id&&t.triggerName==e&&t.queued&&t.destroy()});let u=r.matchTransition(a.value,l.value,t,l.params),h=!1;if(!u){if(!s)return;u=r.fallbackTransition,h=!0}return this._engine.totalQueuedPlayers++,this._queue.push({element:t,triggerName:e,transition:u,fromState:a,toState:l,player:i,isFallbackTransition:h}),h||(Qd(t,Od),i.onStart(()=>{Wd(t,Od)})),i.onDone(()=>{let e=this.players.indexOf(i);e>=0&&this.players.splice(e,1);const n=this._engine.playersByElement.get(t);if(n){let t=n.indexOf(i);t>=0&&n.splice(t,1)}}),this.players.push(i),c.push(i),i}deregister(t){delete this._triggers[t],this._engine.statesByElement.forEach((e,n)=>{delete e[t]}),this._elementListeners.forEach((e,n)=>{this._elementListeners.set(n,e.filter(e=>e.name!=t))})}clearElementCache(t){this._engine.statesByElement.delete(t),this._elementListeners.delete(t);const e=this._engine.playersByElement.get(t);e&&(e.forEach(t=>t.destroy()),this._engine.playersByElement.delete(t))}_signalRemovalForInnerTriggers(t,e){const n=this._engine.driver.query(t,Th,!0);n.forEach(t=>{if(t.__ng_removed)return;const n=this._engine.fetchNamespacesByElement(t);n.size?n.forEach(n=>n.triggerLeaveAnimation(t,e,!1,!0)):this.clearElementCache(t)}),this._engine.afterFlushAnimationsDone(()=>n.forEach(t=>this.clearElementCache(t)))}triggerLeaveAnimation(t,e,n,s){const r=this._engine.statesByElement.get(t);if(r){const i=[];if(Object.keys(r).forEach(e=>{if(this._triggers[e]){const n=this.trigger(t,e,Vd,s);n&&i.push(n)}}),i.length)return this._engine.markElementAsRemoved(this.id,t,!0,e),n&&rh(i).onDone(()=>this._engine.processLeaveNode(t)),!0}return!1}prepareLeaveAnimationListeners(t){const e=this._elementListeners.get(t);if(e){const n=new Set;e.forEach(e=>{const s=e.name;if(n.has(s))return;n.add(s);const r=this._triggers[s].fallbackTransition,i=this._engine.statesByElement.get(t)[s]||Md,o=new Nd(Vd),a=new Bd(this.id,s,t);this._engine.totalQueuedPlayers++,this._queue.push({element:t,triggerName:s,transition:r,fromState:i,toState:o,player:a,isFallbackTransition:!0})})}}removeNode(t,e){const n=this._engine;if(t.childElementCount&&this._signalRemovalForInnerTriggers(t,e),this.triggerLeaveAnimation(t,e,!0))return;let s=!1;if(n.totalAnimations){const e=n.players.length?n.playersByQueriedElement.get(t):[];if(e&&e.length)s=!0;else{let e=t;for(;e=e.parentNode;)if(n.statesByElement.get(e)){s=!0;break}}}if(this.prepareLeaveAnimationListeners(t),s)n.markElementAsRemoved(this.id,t,!1,e);else{const s=t.__ng_removed;s&&s!==Dd||(n.afterFlush(()=>this.clearElementCache(t)),n.destroyInnerAnimations(t),n._onRemovalComplete(t,e))}}insertNode(t,e){Qd(t,this._hostClassName)}drainQueuedTransitions(t){const e=[];return this._queue.forEach(n=>{const s=n.player;if(s.destroyed)return;const r=n.element,i=this._elementListeners.get(r);i&&i.forEach(e=>{if(e.name==n.triggerName){const s=lh(r,n.triggerName,n.fromState.value,n.toState.value);s._data=t,oh(n.player,e.phase,s,e.callback)}}),s.markedForDestroy?this._engine.afterFlush(()=>{s.destroy()}):e.push(n)}),this._queue=[],e.sort((t,e)=>{const n=t.transition.ast.depCount,s=e.transition.ast.depCount;return 0==n||0==s?n-s:this._engine.driver.containsElement(t.element,e.element)?1:-1})}destroy(t){this.players.forEach(t=>t.destroy()),this._signalRemovalForInnerTriggers(this.hostElement,t)}elementContainsData(t){let e=!1;return this._elementListeners.has(t)&&(e=!0),e=!!this._queue.find(e=>e.element===t)||e,e}}class Ud{constructor(t,e,n){this.bodyNode=t,this.driver=e,this._normalizer=n,this.players=[],this.newHostElements=new Map,this.playersByElement=new Map,this.playersByQueriedElement=new Map,this.statesByElement=new Map,this.disabledNodes=new Set,this.totalAnimations=0,this.totalQueuedPlayers=0,this._namespaceLookup={},this._namespaceList=[],this._flushFns=[],this._whenQuietFns=[],this.namespacesByHostElement=new Map,this.collectedEnterElements=[],this.collectedLeaveElements=[],this.onRemovalComplete=(t,e)=>{}}_onRemovalComplete(t,e){this.onRemovalComplete(t,e)}get queuedPlayers(){const t=[];return this._namespaceList.forEach(e=>{e.players.forEach(e=>{e.queued&&t.push(e)})}),t}createNamespace(t,e){const n=new jd(t,e,this);return e.parentNode?this._balanceNamespaceList(n,e):(this.newHostElements.set(e,n),this.collectEnterElement(e)),this._namespaceLookup[t]=n}_balanceNamespaceList(t,e){const n=this._namespaceList.length-1;if(n>=0){let s=!1;for(let r=n;r>=0;r--)if(this.driver.containsElement(this._namespaceList[r].hostElement,e)){this._namespaceList.splice(r+1,0,t),s=!0;break}s||this._namespaceList.splice(0,0,t)}else this._namespaceList.push(t);return this.namespacesByHostElement.set(e,t),t}register(t,e){let n=this._namespaceLookup[t];return n||(n=this.createNamespace(t,e)),n}registerTrigger(t,e,n){let s=this._namespaceLookup[t];s&&s.register(e,n)&&this.totalAnimations++}destroy(t,e){if(!t)return;const n=this._fetchNamespace(t);this.afterFlush(()=>{this.namespacesByHostElement.delete(n.hostElement),delete this._namespaceLookup[t];const e=this._namespaceList.indexOf(n);e>=0&&this._namespaceList.splice(e,1)}),this.afterFlushAnimationsDone(()=>n.destroy(e))}_fetchNamespace(t){return this._namespaceLookup[t]}fetchNamespacesByElement(t){const e=new Set,n=this.statesByElement.get(t);if(n){const t=Object.keys(n);for(let s=0;s<t.length;s++){const r=n[t[s]].namespaceId;if(r){const t=this._fetchNamespace(r);t&&e.add(t)}}}return e}trigger(t,e,n,s){if(Hd(e)){const r=this._fetchNamespace(t);if(r)return r.trigger(e,n,s),!0}return!1}insertNode(t,e,n,s){if(!Hd(e))return;const r=e.__ng_removed;if(r&&r.setForRemoval){r.setForRemoval=!1,r.setForMove=!0;const t=this.collectedLeaveElements.indexOf(e);t>=0&&this.collectedLeaveElements.splice(t,1)}if(t){const s=this._fetchNamespace(t);s&&s.insertNode(e,n)}s&&this.collectEnterElement(e)}collectEnterElement(t){this.collectedEnterElements.push(t)}markElementAsDisabled(t,e){e?this.disabledNodes.has(t)||(this.disabledNodes.add(t),Qd(t,Rd)):this.disabledNodes.has(t)&&(this.disabledNodes.delete(t),Wd(t,Rd))}removeNode(t,e,n,s){if(Hd(e)){const r=t?this._fetchNamespace(t):null;if(r?r.removeNode(e,s):this.markElementAsRemoved(t,e,!1,s),n){const n=this.namespacesByHostElement.get(e);n&&n.id!==t&&n.removeNode(e,s)}}else this._onRemovalComplete(e,s)}markElementAsRemoved(t,e,n,s){this.collectedLeaveElements.push(e),e.__ng_removed={namespaceId:t,setForRemoval:s,hasAnimation:n,removedBeforeQueried:!1}}listen(t,e,n,s,r){return Hd(e)?this._fetchNamespace(t).listen(e,n,s,r):()=>{}}_buildInstruction(t,e,n,s,r){return t.transition.build(this.driver,t.element,t.fromState.value,t.toState.value,n,s,t.fromState.options,t.toState.options,e,r)}destroyInnerAnimations(t){let e=this.driver.query(t,Th,!0);e.forEach(t=>this.destroyActiveAnimationsForElement(t)),0!=this.playersByQueriedElement.size&&(e=this.driver.query(t,Ih,!0),e.forEach(t=>this.finishActiveQueriedAnimationOnElement(t)))}destroyActiveAnimationsForElement(t){const e=this.playersByElement.get(t);e&&e.forEach(t=>{t.queued?t.markedForDestroy=!0:t.destroy()})}finishActiveQueriedAnimationOnElement(t){const e=this.playersByQueriedElement.get(t);e&&e.forEach(t=>t.finish())}whenRenderingDone(){return new Promise(t=>{if(this.players.length)return rh(this.players).onDone(()=>t());t()})}processLeaveNode(t){const e=t.__ng_removed;if(e&&e.setForRemoval){if(t.__ng_removed=Dd,e.namespaceId){this.destroyInnerAnimations(t);const n=this._fetchNamespace(e.namespaceId);n&&n.clearElementCache(t)}this._onRemovalComplete(t,e.setForRemoval)}this.driver.matchesElement(t,Pd)&&this.markElementAsDisabled(t,!1),this.driver.query(t,Pd,!0).forEach(t=>{this.markElementAsDisabled(t,!1)})}flush(t=-1){let e=[];if(this.newHostElements.size&&(this.newHostElements.forEach((t,e)=>this._balanceNamespaceList(t,e)),this.newHostElements.clear()),this.totalAnimations&&this.collectedEnterElements.length)for(let n=0;n<this.collectedEnterElements.length;n++)Qd(this.collectedEnterElements[n],\"ng-star-inserted\");if(this._namespaceList.length&&(this.totalQueuedPlayers||this.collectedLeaveElements.length)){const n=[];try{e=this._flushAnimations(n,t)}finally{for(let t=0;t<n.length;t++)n[t]()}}else for(let n=0;n<this.collectedLeaveElements.length;n++)this.processLeaveNode(this.collectedLeaveElements[n]);if(this.totalQueuedPlayers=0,this.collectedEnterElements.length=0,this.collectedLeaveElements.length=0,this._flushFns.forEach(t=>t()),this._flushFns=[],this._whenQuietFns.length){const t=this._whenQuietFns;this._whenQuietFns=[],e.length?rh(e).onDone(()=>{t.forEach(t=>t())}):t.forEach(t=>t())}}reportError(t){throw new Error(\"Unable to process animations due to the following failed trigger transitions\\n \"+t.join(\"\\n\"))}_flushAnimations(t,e){const n=new cd,s=[],r=new Map,i=[],o=new Map,a=new Map,l=new Map,c=new Set;this.disabledNodes.forEach(t=>{c.add(t);const e=this.driver.query(t,\".ng-animate-queued\",!0);for(let n=0;n<e.length;n++)c.add(e[n])});const u=this.bodyNode,h=Array.from(this.statesByElement.keys()),d=qd(h,this.collectedEnterElements),p=new Map;let f=0;d.forEach((t,e)=>{const n=Ch+f++;p.set(e,n),t.forEach(t=>Qd(t,n))});const m=[],g=new Set,y=new Set;for(let O=0;O<this.collectedLeaveElements.length;O++){const t=this.collectedLeaveElements[O],e=t.__ng_removed;e&&e.setForRemoval&&(m.push(t),g.add(t),e.hasAnimation?this.driver.query(t,\".ng-star-inserted\",!0).forEach(t=>g.add(t)):y.add(t))}const _=new Map,v=qd(h,Array.from(g));v.forEach((t,e)=>{const n=Eh+f++;_.set(e,n),t.forEach(t=>Qd(t,n))}),t.push(()=>{d.forEach((t,e)=>{const n=p.get(e);t.forEach(t=>Wd(t,n))}),v.forEach((t,e)=>{const n=_.get(e);t.forEach(t=>Wd(t,n))}),m.forEach(t=>{this.processLeaveNode(t)})});const b=[],w=[];for(let O=this._namespaceList.length-1;O>=0;O--)this._namespaceList[O].drainQueuedTransitions(e).forEach(t=>{const e=t.player,r=t.element;if(b.push(e),this.collectedEnterElements.length){const t=r.__ng_removed;if(t&&t.setForMove)return void e.destroy()}const c=!u||!this.driver.containsElement(u,r),h=_.get(r),d=p.get(r),f=this._buildInstruction(t,n,d,h,c);if(f.errors&&f.errors.length)w.push(f);else{if(c)return e.onStart(()=>Mh(r,f.fromStyles)),e.onDestroy(()=>Vh(r,f.toStyles)),void s.push(e);if(t.isFallbackTransition)return e.onStart(()=>Mh(r,f.fromStyles)),e.onDestroy(()=>Vh(r,f.toStyles)),void s.push(e);f.timelines.forEach(t=>t.stretchStartingKeyframe=!0),n.append(r,f.timelines),i.push({instruction:f,player:e,element:r}),f.queriedElements.forEach(t=>ch(o,t,[]).push(e)),f.preStyleProps.forEach((t,e)=>{const n=Object.keys(t);if(n.length){let t=a.get(e);t||a.set(e,t=new Set),n.forEach(e=>t.add(e))}}),f.postStyleProps.forEach((t,e)=>{const n=Object.keys(t);let s=l.get(e);s||l.set(e,s=new Set),n.forEach(t=>s.add(t))})}});if(w.length){const t=[];w.forEach(e=>{t.push(`@${e.triggerName} has failed due to:\\n`),e.errors.forEach(e=>t.push(`- ${e}\\n`))}),b.forEach(t=>t.destroy()),this.reportError(t)}const x=new Map,S=new Map;i.forEach(t=>{const e=t.element;n.has(e)&&(S.set(e,e),this._beforeAnimationBuild(t.player.namespaceId,t.instruction,x))}),s.forEach(t=>{const e=t.element;this._getPreviousPlayers(e,!1,t.namespaceId,t.triggerName,null).forEach(t=>{ch(x,e,[]).push(t),t.destroy()})});const C=m.filter(t=>Zd(t,a,l)),E=new Map;$d(E,this.driver,y,l,qu).forEach(t=>{Zd(t,a,l)&&C.push(t)});const k=new Map;d.forEach((t,e)=>{$d(k,this.driver,new Set(t),a,\"!\")}),C.forEach(t=>{const e=E.get(t),n=k.get(t);E.set(t,Object.assign(Object.assign({},e),n))});const T=[],A=[],I={};i.forEach(t=>{const{element:e,player:i,instruction:o}=t;if(n.has(e)){if(c.has(e))return i.onDestroy(()=>Vh(e,o.toStyles)),i.disabled=!0,i.overrideTotalTime(o.totalTime),void s.push(i);let t=I;if(S.size>1){let n=e;const s=[];for(;n=n.parentNode;){const e=S.get(n);if(e){t=e;break}s.push(n)}s.forEach(e=>S.set(e,t))}const n=this._buildAnimation(i.namespaceId,o,x,r,k,E);if(i.setRealPlayer(n),t===I)T.push(i);else{const e=this.playersByElement.get(t);e&&e.length&&(i.parentPlayer=rh(e)),s.push(i)}}else Mh(e,o.fromStyles),i.onDestroy(()=>Vh(e,o.toStyles)),A.push(i),c.has(e)&&s.push(i)}),A.forEach(t=>{const e=r.get(t.element);if(e&&e.length){const n=rh(e);t.setRealPlayer(n)}}),s.forEach(t=>{t.parentPlayer?t.syncPlayerEvents(t.parentPlayer):t.destroy()});for(let O=0;O<m.length;O++){const t=m[O],e=t.__ng_removed;if(Wd(t,Eh),e&&e.hasAnimation)continue;let n=[];if(o.size){let e=o.get(t);e&&e.length&&n.push(...e);let s=this.driver.query(t,Ih,!0);for(let t=0;t<s.length;t++){let e=o.get(s[t]);e&&e.length&&n.push(...e)}}const s=n.filter(t=>!t.destroyed);s.length?Kd(this,t,s):this.processLeaveNode(t)}return m.length=0,T.forEach(t=>{this.players.push(t),t.onDone(()=>{t.destroy();const e=this.players.indexOf(t);this.players.splice(e,1)}),t.play()}),T}elementContainsData(t,e){let n=!1;const s=e.__ng_removed;return s&&s.setForRemoval&&(n=!0),this.playersByElement.has(e)&&(n=!0),this.playersByQueriedElement.has(e)&&(n=!0),this.statesByElement.has(e)&&(n=!0),this._fetchNamespace(t).elementContainsData(e)||n}afterFlush(t){this._flushFns.push(t)}afterFlushAnimationsDone(t){this._whenQuietFns.push(t)}_getPreviousPlayers(t,e,n,s,r){let i=[];if(e){const e=this.playersByQueriedElement.get(t);e&&(i=e)}else{const e=this.playersByElement.get(t);if(e){const t=!r||r==Vd;e.forEach(e=>{e.queued||(t||e.triggerName==s)&&i.push(e)})}}return(n||s)&&(i=i.filter(t=>!(n&&n!=t.namespaceId||s&&s!=t.triggerName))),i}_beforeAnimationBuild(t,e,n){const s=e.element,r=e.isRemovalTransition?void 0:t,i=e.isRemovalTransition?void 0:e.triggerName;for(const o of e.timelines){const t=o.element,a=t!==s,l=ch(n,t,[]);this._getPreviousPlayers(t,a,r,i,e.toState).forEach(t=>{const e=t.getRealPlayer();e.beforeDestroy&&e.beforeDestroy(),t.destroy(),l.push(t)})}Mh(s,e.fromStyles)}_buildAnimation(t,e,n,s,r,i){const o=e.triggerName,a=e.element,l=[],c=new Set,u=new Set,h=e.timelines.map(e=>{const h=e.element;c.add(h);const d=h.__ng_removed;if(d&&d.removedBeforeQueried)return new eh(e.duration,e.delay);const p=h!==a,f=function(t){const e=[];return Gd(t,e),e}((n.get(h)||Ld).map(t=>t.getRealPlayer())).filter(t=>!!t.element&&t.element===h),m=r.get(h),g=i.get(h),y=ih(0,this._normalizer,0,e.keyframes,m,g),_=this._buildPlayer(e,y,f);if(e.subTimeline&&s&&u.add(h),p){const e=new Bd(t,o,h);e.setRealPlayer(_),l.push(e)}return _});l.forEach(t=>{ch(this.playersByQueriedElement,t.element,[]).push(t),t.onDone(()=>function(t,e,n){let s;if(t instanceof Map){if(s=t.get(e),s){if(s.length){const t=s.indexOf(n);s.splice(t,1)}0==s.length&&t.delete(e)}}else if(s=t[e],s){if(s.length){const t=s.indexOf(n);s.splice(t,1)}0==s.length&&delete t[e]}return s}(this.playersByQueriedElement,t.element,t))}),c.forEach(t=>Qd(t,Ah));const d=rh(h);return d.onDestroy(()=>{c.forEach(t=>Wd(t,Ah)),Vh(a,e.toStyles)}),u.forEach(t=>{ch(s,t,[]).push(d)}),d}_buildPlayer(t,e,n){return e.length>0?this.driver.animate(t.element,e,t.duration,t.delay,t.easing,n):new eh(t.duration,t.delay)}}class Bd{constructor(t,e,n){this.namespaceId=t,this.triggerName=e,this.element=n,this._player=new eh,this._containsRealPlayer=!1,this._queuedCallbacks={},this.destroyed=!1,this.markedForDestroy=!1,this.disabled=!1,this.queued=!0,this.totalTime=0}setRealPlayer(t){this._containsRealPlayer||(this._player=t,Object.keys(this._queuedCallbacks).forEach(e=>{this._queuedCallbacks[e].forEach(n=>oh(t,e,void 0,n))}),this._queuedCallbacks={},this._containsRealPlayer=!0,this.overrideTotalTime(t.totalTime),this.queued=!1)}getRealPlayer(){return this._player}overrideTotalTime(t){this.totalTime=t}syncPlayerEvents(t){const e=this._player;e.triggerCallback&&t.onStart(()=>e.triggerCallback(\"start\")),t.onDone(()=>this.finish()),t.onDestroy(()=>this.destroy())}_queueEvent(t,e){ch(this._queuedCallbacks,t,[]).push(e)}onDone(t){this.queued&&this._queueEvent(\"done\",t),this._player.onDone(t)}onStart(t){this.queued&&this._queueEvent(\"start\",t),this._player.onStart(t)}onDestroy(t){this.queued&&this._queueEvent(\"destroy\",t),this._player.onDestroy(t)}init(){this._player.init()}hasStarted(){return!this.queued&&this._player.hasStarted()}play(){!this.queued&&this._player.play()}pause(){!this.queued&&this._player.pause()}restart(){!this.queued&&this._player.restart()}finish(){this._player.finish()}destroy(){this.destroyed=!0,this._player.destroy()}reset(){!this.queued&&this._player.reset()}setPosition(t){this.queued||this._player.setPosition(t)}getPosition(){return this.queued?0:this._player.getPosition()}triggerCallback(t){const e=this._player;e.triggerCallback&&e.triggerCallback(t)}}function Hd(t){return t&&1===t.nodeType}function zd(t,e){const n=t.style.display;return t.style.display=null!=e?e:\"none\",n}function $d(t,e,n,s,r){const i=[];n.forEach(t=>i.push(zd(t)));const o=[];s.forEach((n,s)=>{const i={};n.forEach(t=>{const n=i[t]=e.computeStyle(s,t,r);n&&0!=n.length||(s.__ng_removed=Fd,o.push(s))}),t.set(s,i)});let a=0;return n.forEach(t=>zd(t,i[a++])),o}function qd(t,e){const n=new Map;if(t.forEach(t=>n.set(t,[])),0==e.length)return n;const s=new Set(e),r=new Map;function i(t){if(!t)return 1;let e=r.get(t);if(e)return e;const o=t.parentNode;return e=n.has(o)?o:s.has(o)?1:i(o),r.set(t,e),e}return e.forEach(t=>{const e=i(t);1!==e&&n.get(e).push(t)}),n}function Qd(t,e){if(t.classList)t.classList.add(e);else{let n=t.$$classes;n||(n=t.$$classes={}),n[e]=!0}}function Wd(t,e){if(t.classList)t.classList.remove(e);else{let n=t.$$classes;n&&delete n[e]}}function Kd(t,e,n){rh(n).onDone(()=>t.processLeaveNode(e))}function Gd(t,e){for(let n=0;n<t.length;n++){const s=t[n];s instanceof nh?Gd(s.players,e):e.push(s)}}function Zd(t,e,n){const s=n.get(t);if(!s)return!1;let r=e.get(t);return r?s.forEach(t=>r.add(t)):e.set(t,s),n.delete(t),!0}class Yd{constructor(t,e,n){this.bodyNode=t,this._driver=e,this._triggerCache={},this.onRemovalComplete=(t,e)=>{},this._transitionEngine=new Ud(t,e,n),this._timelineEngine=new Id(t,e,n),this._transitionEngine.onRemovalComplete=(t,e)=>this.onRemovalComplete(t,e)}registerTrigger(t,e,n,s,r){const i=t+\"-\"+s;let o=this._triggerCache[i];if(!o){const t=[],e=nd(this._driver,r,t);if(t.length)throw new Error(`The animation trigger \"${s}\" has failed to build due to the following errors:\\n - ${t.join(\"\\n - \")}`);o=function(t,e){return new kd(t,e)}(s,e),this._triggerCache[i]=o}this._transitionEngine.registerTrigger(e,s,o)}register(t,e){this._transitionEngine.register(t,e)}destroy(t,e){this._transitionEngine.destroy(t,e)}onInsert(t,e,n,s){this._transitionEngine.insertNode(t,e,n,s)}onRemove(t,e,n,s){this._transitionEngine.removeNode(t,e,s||!1,n)}disableAnimations(t,e){this._transitionEngine.markElementAsDisabled(t,e)}process(t,e,n,s){if(\"@\"==n.charAt(0)){const[t,r]=uh(n);this._timelineEngine.command(t,e,r,s)}else this._transitionEngine.trigger(t,e,n,s)}listen(t,e,n,s,r){if(\"@\"==n.charAt(0)){const[t,s]=uh(n);return this._timelineEngine.listen(t,e,s,r)}return this._transitionEngine.listen(t,e,n,s,r)}flush(t=-1){this._transitionEngine.flush(t)}get players(){return this._transitionEngine.players.concat(this._timelineEngine.players)}whenRenderingDone(){return this._transitionEngine.whenRenderingDone()}}function Xd(t,e){let n=null,s=null;return Array.isArray(e)&&e.length?(n=tp(e[0]),e.length>1&&(s=tp(e[e.length-1]))):e&&(n=tp(e)),n||s?new Jd(t,n,s):null}let Jd=(()=>{class t{constructor(e,n,s){this._element=e,this._startStyles=n,this._endStyles=s,this._state=0;let r=t.initialStylesByElement.get(e);r||t.initialStylesByElement.set(e,r={}),this._initialStyles=r}start(){this._state<1&&(this._startStyles&&Vh(this._element,this._startStyles,this._initialStyles),this._state=1)}finish(){this.start(),this._state<2&&(Vh(this._element,this._initialStyles),this._endStyles&&(Vh(this._element,this._endStyles),this._endStyles=null),this._state=1)}destroy(){this.finish(),this._state<3&&(t.initialStylesByElement.delete(this._element),this._startStyles&&(Mh(this._element,this._startStyles),this._endStyles=null),this._endStyles&&(Mh(this._element,this._endStyles),this._endStyles=null),Vh(this._element,this._initialStyles),this._state=3)}}return t.initialStylesByElement=new WeakMap,t})();function tp(t){let e=null;const n=Object.keys(t);for(let s=0;s<n.length;s++){const r=n[s];ep(r)&&(e=e||{},e[r]=t[r])}return e}function ep(t){return\"display\"===t||\"position\"===t}const np=\"animation\",sp=\"animationend\";class rp{constructor(t,e,n,s,r,i,o){this._element=t,this._name=e,this._duration=n,this._delay=s,this._easing=r,this._fillMode=i,this._onDoneFn=o,this._finished=!1,this._destroyed=!1,this._startTime=0,this._position=0,this._eventFn=t=>this._handleCallback(t)}apply(){!function(t,e){const n=up(t,\"\").trim();n.length&&(function(t,e){let n=0;for(let s=0;s<t.length;s++)\",\"===t.charAt(s)&&n++}(n),e=`${n}, ${e}`),cp(t,\"\",e)}(this._element,`${this._duration}ms ${this._easing} ${this._delay}ms 1 normal ${this._fillMode} ${this._name}`),lp(this._element,this._eventFn,!1),this._startTime=Date.now()}pause(){ip(this._element,this._name,\"paused\")}resume(){ip(this._element,this._name,\"running\")}setPosition(t){const e=op(this._element,this._name);this._position=t*this._duration,cp(this._element,\"Delay\",`-${this._position}ms`,e)}getPosition(){return this._position}_handleCallback(t){const e=t._ngTestManualTimestamp||Date.now(),n=1e3*parseFloat(t.elapsedTime.toFixed(3));t.animationName==this._name&&Math.max(e-this._startTime,0)>=this._delay&&n>=this._duration&&this.finish()}finish(){this._finished||(this._finished=!0,this._onDoneFn(),lp(this._element,this._eventFn,!0))}destroy(){this._destroyed||(this._destroyed=!0,this.finish(),function(t,e){const n=up(t,\"\").split(\",\"),s=ap(n,e);s>=0&&(n.splice(s,1),cp(t,\"\",n.join(\",\")))}(this._element,this._name))}}function ip(t,e,n){cp(t,\"PlayState\",n,op(t,e))}function op(t,e){const n=up(t,\"\");return n.indexOf(\",\")>0?ap(n.split(\",\"),e):ap([n],e)}function ap(t,e){for(let n=0;n<t.length;n++)if(t[n].indexOf(e)>=0)return n;return-1}function lp(t,e,n){n?t.removeEventListener(sp,e):t.addEventListener(sp,e)}function cp(t,e,n,s){const r=np+e;if(null!=s){const e=t.style[r];if(e.length){const t=e.split(\",\");t[s]=n,n=t.join(\",\")}}t.style[r]=n}function up(t,e){return t.style[np+e]||\"\"}class hp{constructor(t,e,n,s,r,i,o,a){this.element=t,this.keyframes=e,this.animationName=n,this._duration=s,this._delay=r,this._finalStyles=o,this._specialStyles=a,this._onDoneFns=[],this._onStartFns=[],this._onDestroyFns=[],this._started=!1,this.currentSnapshot={},this._state=0,this.easing=i||\"linear\",this.totalTime=s+r,this._buildStyler()}onStart(t){this._onStartFns.push(t)}onDone(t){this._onDoneFns.push(t)}onDestroy(t){this._onDestroyFns.push(t)}destroy(){this.init(),this._state>=4||(this._state=4,this._styler.destroy(),this._flushStartFns(),this._flushDoneFns(),this._specialStyles&&this._specialStyles.destroy(),this._onDestroyFns.forEach(t=>t()),this._onDestroyFns=[])}_flushDoneFns(){this._onDoneFns.forEach(t=>t()),this._onDoneFns=[]}_flushStartFns(){this._onStartFns.forEach(t=>t()),this._onStartFns=[]}finish(){this.init(),this._state>=3||(this._state=3,this._styler.finish(),this._flushStartFns(),this._specialStyles&&this._specialStyles.finish(),this._flushDoneFns())}setPosition(t){this._styler.setPosition(t)}getPosition(){return this._styler.getPosition()}hasStarted(){return this._state>=2}init(){this._state>=1||(this._state=1,this._styler.apply(),this._delay&&this._styler.pause())}play(){this.init(),this.hasStarted()||(this._flushStartFns(),this._state=2,this._specialStyles&&this._specialStyles.start()),this._styler.resume()}pause(){this.init(),this._styler.pause()}restart(){this.reset(),this.play()}reset(){this._styler.destroy(),this._buildStyler(),this._styler.apply()}_buildStyler(){this._styler=new rp(this.element,this.animationName,this._duration,this._delay,this.easing,\"forwards\",()=>this.finish())}triggerCallback(t){const e=\"start\"==t?this._onStartFns:this._onDoneFns;e.forEach(t=>t()),e.length=0}beforeDestroy(){this.init();const t={};if(this.hasStarted()){const e=this._state>=3;Object.keys(this._finalStyles).forEach(n=>{\"offset\"!=n&&(t[n]=e?this._finalStyles[n]:Gh(this.element,n))})}this.currentSnapshot=t}}class dp extends eh{constructor(t,e){super(),this.element=t,this._startingStyles={},this.__initialized=!1,this._styles=wh(e)}init(){!this.__initialized&&this._startingStyles&&(this.__initialized=!0,Object.keys(this._styles).forEach(t=>{this._startingStyles[t]=this.element.style[t]}),super.init())}play(){this._startingStyles&&(this.init(),Object.keys(this._styles).forEach(t=>this.element.style.setProperty(t,this._styles[t])),super.play())}destroy(){this._startingStyles&&(Object.keys(this._startingStyles).forEach(t=>{const e=this._startingStyles[t];e?this.element.style.setProperty(t,e):this.element.style.removeProperty(t)}),this._startingStyles=null,super.destroy())}}class pp{constructor(){this._count=0,this._head=document.querySelector(\"head\")}validateStyleProperty(t){return yh(t)}matchesElement(t,e){return _h(t,e)}containsElement(t,e){return vh(t,e)}query(t,e,n){return bh(t,e,n)}computeStyle(t,e,n){return window.getComputedStyle(t)[e]}buildKeyframeElement(t,e,n){n=n.map(t=>wh(t));let s=`@keyframes ${e} {\\n`,r=\"\";n.forEach(t=>{r=\" \";const e=parseFloat(t.offset);s+=`${r}${100*e}% {\\n`,r+=\" \",Object.keys(t).forEach(e=>{const n=t[e];switch(e){case\"offset\":return;case\"easing\":return void(n&&(s+=`${r}animation-timing-function: ${n};\\n`));default:return void(s+=`${r}${e}: ${n};\\n`)}}),s+=r+\"}\\n\"}),s+=\"}\\n\";const i=document.createElement(\"style\");return i.textContent=s,i}animate(t,e,n,s,r,i=[],o){const a=i.filter(t=>t instanceof hp),l={};Qh(n,s)&&a.forEach(t=>{let e=t.currentSnapshot;Object.keys(e).forEach(t=>l[t]=e[t])});const c=function(t){let e={};return t&&(Array.isArray(t)?t:[t]).forEach(t=>{Object.keys(t).forEach(n=>{\"offset\"!=n&&\"easing\"!=n&&(e[n]=t[n])})}),e}(e=Wh(t,e,l));if(0==n)return new dp(t,c);const u=\"gen_css_kf_\"+this._count++,h=this.buildKeyframeElement(t,u,e);document.querySelector(\"head\").appendChild(h);const d=Xd(t,e),p=new hp(t,e,u,n,s,r,c,d);return p.onDestroy(()=>{var t;(t=h).parentNode.removeChild(t)}),p}}class fp{constructor(t,e,n,s){this.element=t,this.keyframes=e,this.options=n,this._specialStyles=s,this._onDoneFns=[],this._onStartFns=[],this._onDestroyFns=[],this._initialized=!1,this._finished=!1,this._started=!1,this._destroyed=!1,this.time=0,this.parentPlayer=null,this.currentSnapshot={},this._duration=n.duration,this._delay=n.delay||0,this.time=this._duration+this._delay}_onFinish(){this._finished||(this._finished=!0,this._onDoneFns.forEach(t=>t()),this._onDoneFns=[])}init(){this._buildPlayer(),this._preparePlayerBeforeStart()}_buildPlayer(){if(this._initialized)return;this._initialized=!0;const t=this.keyframes;this.domPlayer=this._triggerWebAnimation(this.element,t,this.options),this._finalKeyframe=t.length?t[t.length-1]:{},this.domPlayer.addEventListener(\"finish\",()=>this._onFinish())}_preparePlayerBeforeStart(){this._delay?this._resetDomPlayerState():this.domPlayer.pause()}_triggerWebAnimation(t,e,n){return t.animate(e,n)}onStart(t){this._onStartFns.push(t)}onDone(t){this._onDoneFns.push(t)}onDestroy(t){this._onDestroyFns.push(t)}play(){this._buildPlayer(),this.hasStarted()||(this._onStartFns.forEach(t=>t()),this._onStartFns=[],this._started=!0,this._specialStyles&&this._specialStyles.start()),this.domPlayer.play()}pause(){this.init(),this.domPlayer.pause()}finish(){this.init(),this._specialStyles&&this._specialStyles.finish(),this._onFinish(),this.domPlayer.finish()}reset(){this._resetDomPlayerState(),this._destroyed=!1,this._finished=!1,this._started=!1}_resetDomPlayerState(){this.domPlayer&&this.domPlayer.cancel()}restart(){this.reset(),this.play()}hasStarted(){return this._started}destroy(){this._destroyed||(this._destroyed=!0,this._resetDomPlayerState(),this._onFinish(),this._specialStyles&&this._specialStyles.destroy(),this._onDestroyFns.forEach(t=>t()),this._onDestroyFns=[])}setPosition(t){this.domPlayer.currentTime=t*this.time}getPosition(){return this.domPlayer.currentTime/this.time}get totalTime(){return this._delay+this._duration}beforeDestroy(){const t={};this.hasStarted()&&Object.keys(this._finalKeyframe).forEach(e=>{\"offset\"!=e&&(t[e]=this._finished?this._finalKeyframe[e]:Gh(this.element,e))}),this.currentSnapshot=t}triggerCallback(t){const e=\"start\"==t?this._onStartFns:this._onDoneFns;e.forEach(t=>t()),e.length=0}}class mp{constructor(){this._isNativeImpl=/\\{\\s*\\[native\\s+code\\]\\s*\\}/.test(gp().toString()),this._cssKeyframesDriver=new pp}validateStyleProperty(t){return yh(t)}matchesElement(t,e){return _h(t,e)}containsElement(t,e){return vh(t,e)}query(t,e,n){return bh(t,e,n)}computeStyle(t,e,n){return window.getComputedStyle(t)[e]}overrideWebAnimationsSupport(t){this._isNativeImpl=t}animate(t,e,n,s,r,i=[],o){if(!o&&!this._isNativeImpl)return this._cssKeyframesDriver.animate(t,e,n,s,r,i);const a={duration:n,delay:s,fill:0==s?\"both\":\"forwards\"};r&&(a.easing=r);const l={},c=i.filter(t=>t instanceof fp);Qh(n,s)&&c.forEach(t=>{let e=t.currentSnapshot;Object.keys(e).forEach(t=>l[t]=e[t])});const u=Xd(t,e=Wh(t,e=e.map(t=>Dh(t,!1)),l));return new fp(t,e,a,u)}}function gp(){return\"undefined\"!=typeof window&&void 0!==window.document&&Element.prototype.animate||{}}let yp=(()=>{class t extends $u{constructor(t,e){super(),this._nextAnimationId=0,this._renderer=t.createRenderer(e.body,{id:\"0\",encapsulation:xt.None,styles:[],data:{animation:[]}})}build(t){const e=this._nextAnimationId.toString();this._nextAnimationId++;const n=Array.isArray(t)?Ku(t):t;return bp(this._renderer,null,e,\"register\",[n]),new _p(e,this._renderer)}}return t.\\u0275fac=function(e){return new(e||t)(ds(jo),ds(sc))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();class _p extends class{}{constructor(t,e){super(),this._id=t,this._renderer=e}create(t,e){return new vp(this._id,t,e||{},this._renderer)}}class vp{constructor(t,e,n,s){this.id=t,this.element=e,this._renderer=s,this.parentPlayer=null,this._started=!1,this.totalTime=0,this._command(\"create\",n)}_listen(t,e){return this._renderer.listen(this.element,`@@${this.id}:${t}`,e)}_command(t,...e){return bp(this._renderer,this.element,this.id,t,e)}onDone(t){this._listen(\"done\",t)}onStart(t){this._listen(\"start\",t)}onDestroy(t){this._listen(\"destroy\",t)}init(){this._command(\"init\")}hasStarted(){return this._started}play(){this._command(\"play\"),this._started=!0}pause(){this._command(\"pause\")}restart(){this._command(\"restart\")}finish(){this._command(\"finish\")}destroy(){this._command(\"destroy\")}reset(){this._command(\"reset\")}setPosition(t){this._command(\"setPosition\",t)}getPosition(){var t,e;return null!==(e=null===(t=this._renderer.engine.players[+this.id])||void 0===t?void 0:t.getPosition())&&void 0!==e?e:0}}function bp(t,e,n,s,r){return t.setProperty(e,`@@${n}:${s}`,r)}const wp=\"@\",xp=\"@.disabled\";let Sp=(()=>{class t{constructor(t,e,n){this.delegate=t,this.engine=e,this._zone=n,this._currentId=0,this._microtaskId=1,this._animationCallbacksBuffer=[],this._rendererCache=new Map,this._cdRecurDepth=0,this.promise=Promise.resolve(0),e.onRemovalComplete=(t,e)=>{e&&e.parentNode(t)&&e.removeChild(t.parentNode,t)}}createRenderer(t,e){const n=this.delegate.createRenderer(t,e);if(!(t&&e&&e.data&&e.data.animation)){let t=this._rendererCache.get(n);return t||(t=new Cp(\"\",n,this.engine),this._rendererCache.set(n,t)),t}const s=e.id,r=e.id+\"-\"+this._currentId;this._currentId++,this.engine.register(r,t);const i=e=>{Array.isArray(e)?e.forEach(i):this.engine.registerTrigger(s,r,t,e.name,e)};return e.data.animation.forEach(i),new Ep(this,r,n,this.engine)}begin(){this._cdRecurDepth++,this.delegate.begin&&this.delegate.begin()}_scheduleCountTask(){this.promise.then(()=>{this._microtaskId++})}scheduleListenerCallback(t,e,n){t>=0&&t<this._microtaskId?this._zone.run(()=>e(n)):(0==this._animationCallbacksBuffer.length&&Promise.resolve(null).then(()=>{this._zone.run(()=>{this._animationCallbacksBuffer.forEach(t=>{const[e,n]=t;e(n)}),this._animationCallbacksBuffer=[]})}),this._animationCallbacksBuffer.push([e,n]))}end(){this._cdRecurDepth--,0==this._cdRecurDepth&&this._zone.runOutsideAngular(()=>{this._scheduleCountTask(),this.engine.flush(this._microtaskId)}),this.delegate.end&&this.delegate.end()}whenRenderingDone(){return this.engine.whenRenderingDone()}}return t.\\u0275fac=function(e){return new(e||t)(ds(jo),ds(Yd),ds(vl))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();class Cp{constructor(t,e,n){this.namespaceId=t,this.delegate=e,this.engine=n,this.destroyNode=this.delegate.destroyNode?t=>e.destroyNode(t):null}get data(){return this.delegate.data}destroy(){this.engine.destroy(this.namespaceId,this.delegate),this.delegate.destroy()}createElement(t,e){return this.delegate.createElement(t,e)}createComment(t){return this.delegate.createComment(t)}createText(t){return this.delegate.createText(t)}appendChild(t,e){this.delegate.appendChild(t,e),this.engine.onInsert(this.namespaceId,e,t,!1)}insertBefore(t,e,n,s=!0){this.delegate.insertBefore(t,e,n),this.engine.onInsert(this.namespaceId,e,t,s)}removeChild(t,e,n){this.engine.onRemove(this.namespaceId,e,this.delegate,n)}selectRootElement(t,e){return this.delegate.selectRootElement(t,e)}parentNode(t){return this.delegate.parentNode(t)}nextSibling(t){return this.delegate.nextSibling(t)}setAttribute(t,e,n,s){this.delegate.setAttribute(t,e,n,s)}removeAttribute(t,e,n){this.delegate.removeAttribute(t,e,n)}addClass(t,e){this.delegate.addClass(t,e)}removeClass(t,e){this.delegate.removeClass(t,e)}setStyle(t,e,n,s){this.delegate.setStyle(t,e,n,s)}removeStyle(t,e,n){this.delegate.removeStyle(t,e,n)}setProperty(t,e,n){e.charAt(0)==wp&&e==xp?this.disableAnimations(t,!!n):this.delegate.setProperty(t,e,n)}setValue(t,e){this.delegate.setValue(t,e)}listen(t,e,n){return this.delegate.listen(t,e,n)}disableAnimations(t,e){this.engine.disableAnimations(t,e)}}class Ep extends Cp{constructor(t,e,n,s){super(e,n,s),this.factory=t,this.namespaceId=e}setProperty(t,e,n){e.charAt(0)==wp?\".\"==e.charAt(1)&&e==xp?this.disableAnimations(t,n=void 0===n||!!n):this.engine.process(this.namespaceId,t,e.substr(1),n):this.delegate.setProperty(t,e,n)}listen(t,e,n){if(e.charAt(0)==wp){const s=function(t){switch(t){case\"body\":return document.body;case\"document\":return document;case\"window\":return window;default:return t}}(t);let r=e.substr(1),i=\"\";return r.charAt(0)!=wp&&([r,i]=function(t){const e=t.indexOf(\".\");return[t.substring(0,e),t.substr(e+1)]}(r)),this.engine.listen(this.namespaceId,s,r,i,t=>{this.factory.scheduleListenerCallback(t._data||-1,n,t)})}return this.delegate.listen(t,e,n)}}let kp=(()=>{class t extends Yd{constructor(t,e,n){super(t.body,e,n)}}return t.\\u0275fac=function(e){return new(e||t)(ds(sc),ds(Sh),ds(vd))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();const Tp=new $n(\"AnimationModuleType\"),Ap=[{provide:Sh,useFactory:function(){return\"function\"==typeof gp()?new mp:new pp}},{provide:Tp,useValue:\"BrowserAnimations\"},{provide:$u,useClass:yp},{provide:vd,useFactory:function(){return new bd}},{provide:Yd,useClass:kp},{provide:jo,useFactory:function(t,e,n){return new Sp(t,e,n)},deps:[Ru,Yd,vl]}];let Ip=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},providers:Ap,imports:[zu]}),t})();function Op(t,e){return new _(n=>{const s=t.length;if(0===s)return void n.complete();const r=new Array(s);let i=0,o=0;for(let a=0;a<s;a++){const l=N(t[a]);let c=!1;n.add(l.subscribe({next:t=>{c||(c=!0,o++),r[a]=t},error:t=>n.error(t),complete:()=>{i++,i!==s&&c||(o===s&&n.next(e?e.reduce((t,e,n)=>(t[e]=r[n],t),{}):r),n.complete())}}))}})}function Rp(t){return null==t||0===t.length}function Pp(t){return null!=t&&\"number\"==typeof t.length}const Lp=new $n(\"NgValidators\"),Dp=new $n(\"NgAsyncValidators\"),Fp=/^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;class Np{static min(t){return e=>{if(Rp(e.value)||Rp(t))return null;const n=parseFloat(e.value);return!isNaN(n)&&n<t?{min:{min:t,actual:e.value}}:null}}static max(t){return e=>{if(Rp(e.value)||Rp(t))return null;const n=parseFloat(e.value);return!isNaN(n)&&n>t?{max:{max:t,actual:e.value}}:null}}static required(t){return Rp(t.value)?{required:!0}:null}static requiredTrue(t){return!0===t.value?null:{required:!0}}static email(t){return Rp(t.value)||Fp.test(t.value)?null:{email:!0}}static minLength(t){return e=>Rp(e.value)||!Pp(e.value)?null:e.value.length<t?{minlength:{requiredLength:t,actualLength:e.value.length}}:null}static maxLength(t){return e=>Pp(e.value)&&e.value.length>t?{maxlength:{requiredLength:t,actualLength:e.value.length}}:null}static pattern(t){if(!t)return Np.nullValidator;let e,n;return\"string\"==typeof t?(n=\"\",\"^\"!==t.charAt(0)&&(n+=\"^\"),n+=t,\"$\"!==t.charAt(t.length-1)&&(n+=\"$\"),e=new RegExp(n)):(n=t.toString(),e=t),t=>{if(Rp(t.value))return null;const s=t.value;return e.test(s)?null:{pattern:{requiredPattern:n,actualValue:s}}}}static nullValidator(t){return null}static compose(t){if(!t)return null;const e=t.filter(Vp);return 0==e.length?null:function(t){return jp(Up(t,e))}}static composeAsync(t){if(!t)return null;const e=t.filter(Vp);return 0==e.length?null:function(t){return function(...t){if(1===t.length){const e=t[0];if(l(e))return Op(e,null);if(c(e)&&Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);return Op(t.map(t=>e[t]),t)}}if(\"function\"==typeof t[t.length-1]){const e=t.pop();return Op(t=1===t.length&&l(t[0])?t[0]:t,null).pipe(k(t=>e(...t)))}return Op(t,null)}(Up(t,e).map(Mp)).pipe(k(jp))}}}function Vp(t){return null!=t}function Mp(t){const e=Qi(t)?N(t):t;return Wi(e),e}function jp(t){let e={};return t.forEach(t=>{e=null!=t?Object.assign(Object.assign({},e),t):e}),0===Object.keys(e).length?null:e}function Up(t,e){return e.map(e=>e(t))}function Bp(t){return t.map(t=>function(t){return!t.validate}(t)?t:e=>t.validate(e))}function Hp(t){return null!=t?Np.compose(Bp(t)):null}function zp(t){return null!=t?Np.composeAsync(Bp(t)):null}function $p(t,e){return null===t?[e]:Array.isArray(t)?[...t,e]:[t,e]}function qp(t){return t._rawValidators}function Qp(t){return t._rawAsyncValidators}let Wp=(()=>{class t{constructor(){this._rawValidators=[],this._rawAsyncValidators=[],this._onDestroyCallbacks=[]}get value(){return this.control?this.control.value:null}get valid(){return this.control?this.control.valid:null}get invalid(){return this.control?this.control.invalid:null}get pending(){return this.control?this.control.pending:null}get disabled(){return this.control?this.control.disabled:null}get enabled(){return this.control?this.control.enabled:null}get errors(){return this.control?this.control.errors:null}get pristine(){return this.control?this.control.pristine:null}get dirty(){return this.control?this.control.dirty:null}get touched(){return this.control?this.control.touched:null}get status(){return this.control?this.control.status:null}get untouched(){return this.control?this.control.untouched:null}get statusChanges(){return this.control?this.control.statusChanges:null}get valueChanges(){return this.control?this.control.valueChanges:null}get path(){return null}_setValidators(t){this._rawValidators=t||[],this._composedValidatorFn=Hp(this._rawValidators)}_setAsyncValidators(t){this._rawAsyncValidators=t||[],this._composedAsyncValidatorFn=zp(this._rawAsyncValidators)}get validator(){return this._composedValidatorFn||null}get asyncValidator(){return this._composedAsyncValidatorFn||null}_registerOnDestroy(t){this._onDestroyCallbacks.push(t)}_invokeOnDestroyCallbacks(){this._onDestroyCallbacks.forEach(t=>t()),this._onDestroyCallbacks=[]}reset(t){this.control&&this.control.reset(t)}hasError(t,e){return!!this.control&&this.control.hasError(t,e)}getError(t,e){return this.control?this.control.getError(t,e):null}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275dir=$t({type:t}),t})(),Kp=(()=>{class t extends Wp{get formDirective(){return null}get path(){return null}}return t.\\u0275fac=function(e){return Gp(e||t)},t.\\u0275dir=$t({type:t,features:[Ti]}),t})();const Gp=Un(Kp);class Zp extends Wp{constructor(){super(...arguments),this._parent=null,this.name=null,this.valueAccessor=null}}let Yp=(()=>{class t extends class{constructor(t){this._cd=t}get ngClassUntouched(){return!!this._cd.control&&this._cd.control.untouched}get ngClassTouched(){return!!this._cd.control&&this._cd.control.touched}get ngClassPristine(){return!!this._cd.control&&this._cd.control.pristine}get ngClassDirty(){return!!this._cd.control&&this._cd.control.dirty}get ngClassValid(){return!!this._cd.control&&this._cd.control.valid}get ngClassInvalid(){return!!this._cd.control&&this._cd.control.invalid}get ngClassPending(){return!!this._cd.control&&this._cd.control.pending}}{constructor(t){super(t)}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Kp,2))},t.\\u0275dir=$t({type:t,selectors:[[\"\",\"formGroupName\",\"\"],[\"\",\"formArrayName\",\"\"],[\"\",\"ngModelGroup\",\"\"],[\"\",\"formGroup\",\"\"],[\"form\",3,\"ngNoForm\",\"\"],[\"\",\"ngForm\",\"\"]],hostVars:14,hostBindings:function(t,e){2&t&&ro(\"ng-untouched\",e.ngClassUntouched)(\"ng-touched\",e.ngClassTouched)(\"ng-pristine\",e.ngClassPristine)(\"ng-dirty\",e.ngClassDirty)(\"ng-valid\",e.ngClassValid)(\"ng-invalid\",e.ngClassInvalid)(\"ng-pending\",e.ngClassPending)},features:[Ti]}),t})(),Xp=(()=>{class t{constructor(){this._accessors=[]}add(t,e){this._accessors.push([t,e])}remove(t){for(let e=this._accessors.length-1;e>=0;--e)if(this._accessors[e][1]===t)return void this._accessors.splice(e,1)}select(t){this._accessors.forEach(e=>{this._isSameGroup(e,t)&&e[1]!==t&&e[1].fireUncheck(t.value)})}_isSameGroup(t,e){return!!t[0].control&&t[0]._parent===e._control._parent&&t[1].name===e.name}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();function Jp(t,e){ef(t,e,!0),e.valueAccessor.writeValue(t.value),function(t,e){e.valueAccessor.registerOnChange(n=>{t._pendingValue=n,t._pendingChange=!0,t._pendingDirty=!0,\"change\"===t.updateOn&&sf(t,e)})}(t,e),function(t,e){const n=(t,n)=>{e.valueAccessor.writeValue(t),n&&e.viewToModelUpdate(t)};t.registerOnChange(n),e._registerOnDestroy(()=>{t._unregisterOnChange(n)})}(t,e),function(t,e){e.valueAccessor.registerOnTouched(()=>{t._pendingTouched=!0,\"blur\"===t.updateOn&&t._pendingChange&&sf(t,e),\"submit\"!==t.updateOn&&t.markAsTouched()})}(t,e),function(t,e){if(e.valueAccessor.setDisabledState){const n=t=>{e.valueAccessor.setDisabledState(t)};t.registerOnDisabledChange(n),e._registerOnDestroy(()=>{t._unregisterOnDisabledChange(n)})}}(t,e)}function tf(t,e){t.forEach(t=>{t.registerOnValidatorChange&&t.registerOnValidatorChange(e)})}function ef(t,e,n){const s=qp(t);null!==e.validator?t.setValidators($p(s,e.validator)):\"function\"==typeof s&&t.setValidators([s]);const r=Qp(t);if(null!==e.asyncValidator?t.setAsyncValidators($p(r,e.asyncValidator)):\"function\"==typeof r&&t.setAsyncValidators([r]),n){const n=()=>t.updateValueAndValidity();tf(e._rawValidators,n),tf(e._rawAsyncValidators,n)}}function nf(t,e,n){if(null!==t){if(null!==e.validator){const n=qp(t);Array.isArray(n)&&n.length>0&&t.setValidators(n.filter(t=>t!==e.validator))}if(null!==e.asyncValidator){const n=Qp(t);Array.isArray(n)&&n.length>0&&t.setAsyncValidators(n.filter(t=>t!==e.asyncValidator))}}if(n){const t=()=>{};tf(e._rawValidators,t),tf(e._rawAsyncValidators,t)}}function sf(t,e){t._pendingDirty&&t.markAsDirty(),t.setValue(t._pendingValue,{emitModelToViewChange:!1}),e.viewToModelUpdate(t._pendingValue),t._pendingChange=!1}function rf(t,e){ef(t,e,!1)}function of(t,e){t._syncPendingControls(),e.forEach(t=>{const e=t.control;\"submit\"===e.updateOn&&e._pendingChange&&(t.viewToModelUpdate(e._pendingValue),e._pendingChange=!1)})}function af(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}const lf=\"VALID\",cf=\"INVALID\",uf=\"PENDING\",hf=\"DISABLED\";function df(t){return(gf(t)?t.validators:t)||null}function pf(t){return Array.isArray(t)?Hp(t):t||null}function ff(t,e){return(gf(e)?e.asyncValidators:t)||null}function mf(t){return Array.isArray(t)?zp(t):t||null}function gf(t){return null!=t&&!Array.isArray(t)&&\"object\"==typeof t}class yf{constructor(t,e){this._hasOwnPendingAsyncValidator=!1,this._onCollectionChange=()=>{},this._parent=null,this.pristine=!0,this.touched=!1,this._onDisabledChange=[],this._rawValidators=t,this._rawAsyncValidators=e,this._composedValidatorFn=pf(this._rawValidators),this._composedAsyncValidatorFn=mf(this._rawAsyncValidators)}get validator(){return this._composedValidatorFn}set validator(t){this._rawValidators=this._composedValidatorFn=t}get asyncValidator(){return this._composedAsyncValidatorFn}set asyncValidator(t){this._rawAsyncValidators=this._composedAsyncValidatorFn=t}get parent(){return this._parent}get valid(){return this.status===lf}get invalid(){return this.status===cf}get pending(){return this.status==uf}get disabled(){return this.status===hf}get enabled(){return this.status!==hf}get dirty(){return!this.pristine}get untouched(){return!this.touched}get updateOn(){return this._updateOn?this._updateOn:this.parent?this.parent.updateOn:\"change\"}setValidators(t){this._rawValidators=t,this._composedValidatorFn=pf(t)}setAsyncValidators(t){this._rawAsyncValidators=t,this._composedAsyncValidatorFn=mf(t)}clearValidators(){this.validator=null}clearAsyncValidators(){this.asyncValidator=null}markAsTouched(t={}){this.touched=!0,this._parent&&!t.onlySelf&&this._parent.markAsTouched(t)}markAllAsTouched(){this.markAsTouched({onlySelf:!0}),this._forEachChild(t=>t.markAllAsTouched())}markAsUntouched(t={}){this.touched=!1,this._pendingTouched=!1,this._forEachChild(t=>{t.markAsUntouched({onlySelf:!0})}),this._parent&&!t.onlySelf&&this._parent._updateTouched(t)}markAsDirty(t={}){this.pristine=!1,this._parent&&!t.onlySelf&&this._parent.markAsDirty(t)}markAsPristine(t={}){this.pristine=!0,this._pendingDirty=!1,this._forEachChild(t=>{t.markAsPristine({onlySelf:!0})}),this._parent&&!t.onlySelf&&this._parent._updatePristine(t)}markAsPending(t={}){this.status=uf,!1!==t.emitEvent&&this.statusChanges.emit(this.status),this._parent&&!t.onlySelf&&this._parent.markAsPending(t)}disable(t={}){const e=this._parentMarkedDirty(t.onlySelf);this.status=hf,this.errors=null,this._forEachChild(e=>{e.disable(Object.assign(Object.assign({},t),{onlySelf:!0}))}),this._updateValue(),!1!==t.emitEvent&&(this.valueChanges.emit(this.value),this.statusChanges.emit(this.status)),this._updateAncestors(Object.assign(Object.assign({},t),{skipPristineCheck:e})),this._onDisabledChange.forEach(t=>t(!0))}enable(t={}){const e=this._parentMarkedDirty(t.onlySelf);this.status=lf,this._forEachChild(e=>{e.enable(Object.assign(Object.assign({},t),{onlySelf:!0}))}),this.updateValueAndValidity({onlySelf:!0,emitEvent:t.emitEvent}),this._updateAncestors(Object.assign(Object.assign({},t),{skipPristineCheck:e})),this._onDisabledChange.forEach(t=>t(!1))}_updateAncestors(t){this._parent&&!t.onlySelf&&(this._parent.updateValueAndValidity(t),t.skipPristineCheck||this._parent._updatePristine(),this._parent._updateTouched())}setParent(t){this._parent=t}updateValueAndValidity(t={}){this._setInitialStatus(),this._updateValue(),this.enabled&&(this._cancelExistingSubscription(),this.errors=this._runValidator(),this.status=this._calculateStatus(),this.status!==lf&&this.status!==uf||this._runAsyncValidator(t.emitEvent)),!1!==t.emitEvent&&(this.valueChanges.emit(this.value),this.statusChanges.emit(this.status)),this._parent&&!t.onlySelf&&this._parent.updateValueAndValidity(t)}_updateTreeValidity(t={emitEvent:!0}){this._forEachChild(e=>e._updateTreeValidity(t)),this.updateValueAndValidity({onlySelf:!0,emitEvent:t.emitEvent})}_setInitialStatus(){this.status=this._allControlsDisabled()?hf:lf}_runValidator(){return this.validator?this.validator(this):null}_runAsyncValidator(t){if(this.asyncValidator){this.status=uf,this._hasOwnPendingAsyncValidator=!0;const e=Mp(this.asyncValidator(this));this._asyncValidationSubscription=e.subscribe(e=>{this._hasOwnPendingAsyncValidator=!1,this.setErrors(e,{emitEvent:t})})}}_cancelExistingSubscription(){this._asyncValidationSubscription&&(this._asyncValidationSubscription.unsubscribe(),this._hasOwnPendingAsyncValidator=!1)}setErrors(t,e={}){this.errors=t,this._updateControlsErrors(!1!==e.emitEvent)}get(t){return function(t,e,n){if(null==e)return null;if(Array.isArray(e)||(e=e.split(\".\")),Array.isArray(e)&&0===e.length)return null;let s=t;return e.forEach(t=>{s=s instanceof vf?s.controls.hasOwnProperty(t)?s.controls[t]:null:s instanceof bf&&s.at(t)||null}),s}(this,t)}getError(t,e){const n=e?this.get(e):this;return n&&n.errors?n.errors[t]:null}hasError(t,e){return!!this.getError(t,e)}get root(){let t=this;for(;t._parent;)t=t._parent;return t}_updateControlsErrors(t){this.status=this._calculateStatus(),t&&this.statusChanges.emit(this.status),this._parent&&this._parent._updateControlsErrors(t)}_initObservables(){this.valueChanges=new Da,this.statusChanges=new Da}_calculateStatus(){return this._allControlsDisabled()?hf:this.errors?cf:this._hasOwnPendingAsyncValidator||this._anyControlsHaveStatus(uf)?uf:this._anyControlsHaveStatus(cf)?cf:lf}_anyControlsHaveStatus(t){return this._anyControls(e=>e.status===t)}_anyControlsDirty(){return this._anyControls(t=>t.dirty)}_anyControlsTouched(){return this._anyControls(t=>t.touched)}_updatePristine(t={}){this.pristine=!this._anyControlsDirty(),this._parent&&!t.onlySelf&&this._parent._updatePristine(t)}_updateTouched(t={}){this.touched=this._anyControlsTouched(),this._parent&&!t.onlySelf&&this._parent._updateTouched(t)}_isBoxedValue(t){return\"object\"==typeof t&&null!==t&&2===Object.keys(t).length&&\"value\"in t&&\"disabled\"in t}_registerOnCollectionChange(t){this._onCollectionChange=t}_setUpdateStrategy(t){gf(t)&&null!=t.updateOn&&(this._updateOn=t.updateOn)}_parentMarkedDirty(t){return!t&&!(!this._parent||!this._parent.dirty)&&!this._parent._anyControlsDirty()}}class _f extends yf{constructor(t=null,e,n){super(df(e),ff(n,e)),this._onChange=[],this._applyFormState(t),this._setUpdateStrategy(e),this._initObservables(),this.updateValueAndValidity({onlySelf:!0,emitEvent:!!n})}setValue(t,e={}){this.value=this._pendingValue=t,this._onChange.length&&!1!==e.emitModelToViewChange&&this._onChange.forEach(t=>t(this.value,!1!==e.emitViewToModelChange)),this.updateValueAndValidity(e)}patchValue(t,e={}){this.setValue(t,e)}reset(t=null,e={}){this._applyFormState(t),this.markAsPristine(e),this.markAsUntouched(e),this.setValue(this.value,e),this._pendingChange=!1}_updateValue(){}_anyControls(t){return!1}_allControlsDisabled(){return this.disabled}registerOnChange(t){this._onChange.push(t)}_unregisterOnChange(t){af(this._onChange,t)}registerOnDisabledChange(t){this._onDisabledChange.push(t)}_unregisterOnDisabledChange(t){af(this._onDisabledChange,t)}_forEachChild(t){}_syncPendingControls(){return!(\"submit\"!==this.updateOn||(this._pendingDirty&&this.markAsDirty(),this._pendingTouched&&this.markAsTouched(),!this._pendingChange)||(this.setValue(this._pendingValue,{onlySelf:!0,emitModelToViewChange:!1}),0))}_applyFormState(t){this._isBoxedValue(t)?(this.value=this._pendingValue=t.value,t.disabled?this.disable({onlySelf:!0,emitEvent:!1}):this.enable({onlySelf:!0,emitEvent:!1})):this.value=this._pendingValue=t}}class vf extends yf{constructor(t,e,n){super(df(e),ff(n,e)),this.controls=t,this._initObservables(),this._setUpdateStrategy(e),this._setUpControls(),this.updateValueAndValidity({onlySelf:!0,emitEvent:!!n})}registerControl(t,e){return this.controls[t]?this.controls[t]:(this.controls[t]=e,e.setParent(this),e._registerOnCollectionChange(this._onCollectionChange),e)}addControl(t,e){this.registerControl(t,e),this.updateValueAndValidity(),this._onCollectionChange()}removeControl(t){this.controls[t]&&this.controls[t]._registerOnCollectionChange(()=>{}),delete this.controls[t],this.updateValueAndValidity(),this._onCollectionChange()}setControl(t,e){this.controls[t]&&this.controls[t]._registerOnCollectionChange(()=>{}),delete this.controls[t],e&&this.registerControl(t,e),this.updateValueAndValidity(),this._onCollectionChange()}contains(t){return this.controls.hasOwnProperty(t)&&this.controls[t].enabled}setValue(t,e={}){this._checkAllValuesPresent(t),Object.keys(t).forEach(n=>{this._throwIfControlMissing(n),this.controls[n].setValue(t[n],{onlySelf:!0,emitEvent:e.emitEvent})}),this.updateValueAndValidity(e)}patchValue(t,e={}){Object.keys(t).forEach(n=>{this.controls[n]&&this.controls[n].patchValue(t[n],{onlySelf:!0,emitEvent:e.emitEvent})}),this.updateValueAndValidity(e)}reset(t={},e={}){this._forEachChild((n,s)=>{n.reset(t[s],{onlySelf:!0,emitEvent:e.emitEvent})}),this._updatePristine(e),this._updateTouched(e),this.updateValueAndValidity(e)}getRawValue(){return this._reduceChildren({},(t,e,n)=>(t[n]=e instanceof _f?e.value:e.getRawValue(),t))}_syncPendingControls(){let t=this._reduceChildren(!1,(t,e)=>!!e._syncPendingControls()||t);return t&&this.updateValueAndValidity({onlySelf:!0}),t}_throwIfControlMissing(t){if(!Object.keys(this.controls).length)throw new Error(\"\\n        There are no form controls registered with this group yet. If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");if(!this.controls[t])throw new Error(`Cannot find form control with name: ${t}.`)}_forEachChild(t){Object.keys(this.controls).forEach(e=>t(this.controls[e],e))}_setUpControls(){this._forEachChild(t=>{t.setParent(this),t._registerOnCollectionChange(this._onCollectionChange)})}_updateValue(){this.value=this._reduceValue()}_anyControls(t){for(const e of Object.keys(this.controls)){const n=this.controls[e];if(this.contains(e)&&t(n))return!0}return!1}_reduceValue(){return this._reduceChildren({},(t,e,n)=>((e.enabled||this.disabled)&&(t[n]=e.value),t))}_reduceChildren(t,e){let n=t;return this._forEachChild((t,s)=>{n=e(n,t,s)}),n}_allControlsDisabled(){for(const t of Object.keys(this.controls))if(this.controls[t].enabled)return!1;return Object.keys(this.controls).length>0||this.disabled}_checkAllValuesPresent(t){this._forEachChild((e,n)=>{if(void 0===t[n])throw new Error(`Must supply a value for form control with name: '${n}'.`)})}}class bf extends yf{constructor(t,e,n){super(df(e),ff(n,e)),this.controls=t,this._initObservables(),this._setUpdateStrategy(e),this._setUpControls(),this.updateValueAndValidity({onlySelf:!0,emitEvent:!!n})}at(t){return this.controls[t]}push(t){this.controls.push(t),this._registerControl(t),this.updateValueAndValidity(),this._onCollectionChange()}insert(t,e){this.controls.splice(t,0,e),this._registerControl(e),this.updateValueAndValidity()}removeAt(t){this.controls[t]&&this.controls[t]._registerOnCollectionChange(()=>{}),this.controls.splice(t,1),this.updateValueAndValidity()}setControl(t,e){this.controls[t]&&this.controls[t]._registerOnCollectionChange(()=>{}),this.controls.splice(t,1),e&&(this.controls.splice(t,0,e),this._registerControl(e)),this.updateValueAndValidity(),this._onCollectionChange()}get length(){return this.controls.length}setValue(t,e={}){this._checkAllValuesPresent(t),t.forEach((t,n)=>{this._throwIfControlMissing(n),this.at(n).setValue(t,{onlySelf:!0,emitEvent:e.emitEvent})}),this.updateValueAndValidity(e)}patchValue(t,e={}){t.forEach((t,n)=>{this.at(n)&&this.at(n).patchValue(t,{onlySelf:!0,emitEvent:e.emitEvent})}),this.updateValueAndValidity(e)}reset(t=[],e={}){this._forEachChild((n,s)=>{n.reset(t[s],{onlySelf:!0,emitEvent:e.emitEvent})}),this._updatePristine(e),this._updateTouched(e),this.updateValueAndValidity(e)}getRawValue(){return this.controls.map(t=>t instanceof _f?t.value:t.getRawValue())}clear(){this.controls.length<1||(this._forEachChild(t=>t._registerOnCollectionChange(()=>{})),this.controls.splice(0),this.updateValueAndValidity())}_syncPendingControls(){let t=this.controls.reduce((t,e)=>!!e._syncPendingControls()||t,!1);return t&&this.updateValueAndValidity({onlySelf:!0}),t}_throwIfControlMissing(t){if(!this.controls.length)throw new Error(\"\\n        There are no form controls registered with this array yet. If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");if(!this.at(t))throw new Error(\"Cannot find form control at index \"+t)}_forEachChild(t){this.controls.forEach((e,n)=>{t(e,n)})}_updateValue(){this.value=this.controls.filter(t=>t.enabled||this.disabled).map(t=>t.value)}_anyControls(t){return this.controls.some(e=>e.enabled&&t(e))}_setUpControls(){this._forEachChild(t=>this._registerControl(t))}_checkAllValuesPresent(t){this._forEachChild((e,n)=>{if(void 0===t[n])throw new Error(`Must supply a value for form control at index: ${n}.`)})}_allControlsDisabled(){for(const t of this.controls)if(t.enabled)return!1;return this.controls.length>0||this.disabled}_registerControl(t){t.setParent(this),t._registerOnCollectionChange(this._onCollectionChange)}}const wf={provide:Kp,useExisting:rt(()=>Sf)},xf=(()=>Promise.resolve(null))();let Sf=(()=>{class t extends Kp{constructor(t,e){super(),this.submitted=!1,this._directives=[],this.ngSubmit=new Da,this.form=new vf({},Hp(t),zp(e))}ngAfterViewInit(){this._setUpdateStrategy()}get formDirective(){return this}get control(){return this.form}get path(){return[]}get controls(){return this.form.controls}addControl(t){xf.then(()=>{const e=this._findContainer(t.path);t.control=e.registerControl(t.name,t.control),Jp(t.control,t),t.control.updateValueAndValidity({emitEvent:!1}),this._directives.push(t)})}getControl(t){return this.form.get(t.path)}removeControl(t){xf.then(()=>{const e=this._findContainer(t.path);e&&e.removeControl(t.name),af(this._directives,t)})}addFormGroup(t){xf.then(()=>{const e=this._findContainer(t.path),n=new vf({});rf(n,t),e.registerControl(t.name,n),n.updateValueAndValidity({emitEvent:!1})})}removeFormGroup(t){xf.then(()=>{const e=this._findContainer(t.path);e&&e.removeControl(t.name)})}getFormGroup(t){return this.form.get(t.path)}updateModel(t,e){xf.then(()=>{this.form.get(t.path).setValue(e)})}setValue(t){this.control.setValue(t)}onSubmit(t){return this.submitted=!0,of(this.form,this._directives),this.ngSubmit.emit(t),!1}onReset(){this.resetForm()}resetForm(t){this.form.reset(t),this.submitted=!1}_setUpdateStrategy(){this.options&&null!=this.options.updateOn&&(this.form._updateOn=this.options.updateOn)}_findContainer(t){return t.pop(),t.length?this.form.get(t):this.form}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Lp,10),Ui(Dp,10))},t.\\u0275dir=$t({type:t,selectors:[[\"form\",3,\"ngNoForm\",\"\",3,\"formGroup\",\"\"],[\"ng-form\"],[\"\",\"ngForm\",\"\"]],hostBindings:function(t,e){1&t&&Ki(\"submit\",function(t){return e.onSubmit(t)})(\"reset\",function(){return e.onReset()})},inputs:{options:[\"ngFormOptions\",\"options\"]},outputs:{ngSubmit:\"ngSubmit\"},exportAs:[\"ngForm\"],features:[Ro([wf]),Ti]}),t})(),Cf=(()=>{class t{}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275dir=$t({type:t,selectors:[[\"form\",3,\"ngNoForm\",\"\",3,\"ngNativeValidate\",\"\"]],hostAttrs:[\"novalidate\",\"\"]}),t})();const Ef=new $n(\"NgModelWithFormControlWarning\"),kf={provide:Kp,useExisting:rt(()=>Tf)};let Tf=(()=>{class t extends Kp{constructor(t,e){super(),this.validators=t,this.asyncValidators=e,this.submitted=!1,this.directives=[],this.form=null,this.ngSubmit=new Da,this._setValidators(t),this._setAsyncValidators(e)}ngOnChanges(t){this._checkFormPresent(),t.hasOwnProperty(\"form\")&&(this._updateValidators(),this._updateDomValue(),this._updateRegistrations(),this._oldForm=this.form)}get formDirective(){return this}get control(){return this.form}get path(){return[]}addControl(t){const e=this.form.get(t.path);return Jp(e,t),e.updateValueAndValidity({emitEvent:!1}),this.directives.push(t),e}getControl(t){return this.form.get(t.path)}removeControl(t){af(this.directives,t)}addFormGroup(t){const e=this.form.get(t.path);rf(e,t),e.updateValueAndValidity({emitEvent:!1})}removeFormGroup(t){}getFormGroup(t){return this.form.get(t.path)}addFormArray(t){const e=this.form.get(t.path);rf(e,t),e.updateValueAndValidity({emitEvent:!1})}removeFormArray(t){}getFormArray(t){return this.form.get(t.path)}updateModel(t,e){this.form.get(t.path).setValue(e)}onSubmit(t){return this.submitted=!0,of(this.form,this.directives),this.ngSubmit.emit(t),!1}onReset(){this.resetForm()}resetForm(t){this.form.reset(t),this.submitted=!1}_updateDomValue(){this.directives.forEach(t=>{const e=this.form.get(t.path);t.control!==e&&(function(t,e){const n=()=>{};e.valueAccessor.registerOnChange(n),e.valueAccessor.registerOnTouched(n),nf(t,e,!0),t&&(e._invokeOnDestroyCallbacks(),t._registerOnCollectionChange(()=>{}))}(t.control||null,t),e&&Jp(e,t),t.control=e)}),this.form._updateTreeValidity({emitEvent:!1})}_updateRegistrations(){this.form._registerOnCollectionChange(()=>this._updateDomValue()),this._oldForm&&this._oldForm._registerOnCollectionChange(()=>{})}_updateValidators(){ef(this.form,this,!1),this._oldForm&&nf(this._oldForm,this,!1)}_checkFormPresent(){}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Lp,10),Ui(Dp,10))},t.\\u0275dir=$t({type:t,selectors:[[\"\",\"formGroup\",\"\"]],hostBindings:function(t,e){1&t&&Ki(\"submit\",function(t){return e.onSubmit(t)})(\"reset\",function(){return e.onReset()})},inputs:{form:[\"formGroup\",\"form\"]},outputs:{ngSubmit:\"ngSubmit\"},exportAs:[\"ngForm\"],features:[Ro([kf]),Ti,ae]}),t})(),Af=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)}}),t})(),If=(()=>{class t{group(t,e=null){const n=this._reduceControls(t);let s=null,r=null,i=void 0;return null!=e&&(function(t){return void 0!==t.asyncValidators||void 0!==t.validators||void 0!==t.updateOn}(e)?(s=null!=e.validators?e.validators:null,r=null!=e.asyncValidators?e.asyncValidators:null,i=null!=e.updateOn?e.updateOn:void 0):(s=null!=e.validator?e.validator:null,r=null!=e.asyncValidator?e.asyncValidator:null)),new vf(n,{asyncValidators:r,updateOn:i,validators:s})}control(t,e,n){return new _f(t,e,n)}array(t,e,n){const s=t.map(t=>this._createControl(t));return new bf(s,e,n)}_reduceControls(t){const e={};return Object.keys(t).forEach(n=>{e[n]=this._createControl(t[n])}),e}_createControl(t){return t instanceof _f||t instanceof vf||t instanceof bf?t:Array.isArray(t)?this.control(t[0],t.length>1?t[1]:null,t.length>2?t[2]:null):this.control(t)}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),Of=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},providers:[Xp],imports:[Af]}),t})(),Rf=(()=>{class t{static withConfig(e){return{ngModule:t,providers:[{provide:Ef,useValue:e.warnOnNgModelWithFormControl}]}}}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},providers:[If,Xp],imports:[Af]}),t})();class Pf extends S{constructor(t){super(),this._value=t}get value(){return this.getValue()}_subscribe(t){const e=super._subscribe(t);return e&&!e.closed&&t.next(this._value),e}getValue(){if(this.hasError)throw this.thrownError;if(this.closed)throw new b;return this._value}next(t){super.next(this._value=t)}}class Lf extends h{constructor(t,e){super()}schedule(t,e=0){return this}}class Df extends Lf{constructor(t,e){super(t,e),this.scheduler=t,this.work=e,this.pending=!1}schedule(t,e=0){if(this.closed)return this;this.state=t;const n=this.id,s=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(s,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(s,this.id,e),this}requestAsyncId(t,e,n=0){return setInterval(t.flush.bind(t,this),n)}recycleAsyncId(t,e,n=0){if(null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)}execute(t,e){if(this.closed)return new Error(\"executing a cancelled action\");this.pending=!1;const n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))}_execute(t,e){let n=!1,s=void 0;try{this.work(t)}catch(r){n=!0,s=!!r&&r||new Error(r)}if(n)return this.unsubscribe(),s}_unsubscribe(){const t=this.id,e=this.scheduler,n=e.actions,s=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==s&&n.splice(s,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null}}let Ff=(()=>{class t{constructor(e,n=t.now){this.SchedulerAction=e,this.now=n}schedule(t,e=0,n){return new this.SchedulerAction(this,t).schedule(n,e)}}return t.now=()=>Date.now(),t})();class Nf extends Ff{constructor(t,e=Ff.now){super(t,()=>Nf.delegate&&Nf.delegate!==this?Nf.delegate.now():e()),this.actions=[],this.active=!1,this.scheduled=void 0}schedule(t,e=0,n){return Nf.delegate&&Nf.delegate!==this?Nf.delegate.schedule(t,e,n):super.schedule(t,e,n)}flush(t){const{actions:e}=this;if(this.active)return void e.push(t);let n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}}const Vf=new Nf(Df);class Mf{constructor(t,e){this.dueTime=t,this.scheduler=e}call(t,e){return e.subscribe(new jf(t,this.dueTime,this.scheduler))}}class jf extends f{constructor(t,e,n){super(t),this.dueTime=e,this.scheduler=n,this.debouncedSubscription=null,this.lastValue=null,this.hasValue=!1}_next(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(Uf,this.dueTime,this))}_complete(){this.debouncedNext(),this.destination.complete()}debouncedNext(){if(this.clearDebounce(),this.hasValue){const{lastValue:t}=this;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}}clearDebounce(){const t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)}}function Uf(t){t.debouncedNext()}function Bf(t,e){return\"function\"==typeof e?n=>n.pipe(Bf((n,s)=>N(t(n,s)).pipe(k((t,r)=>e(n,t,s,r))))):e=>e.lift(new Hf(t))}class Hf{constructor(t){this.project=t}call(t,e){return e.subscribe(new zf(t,this.project))}}class zf extends M{constructor(t,e){super(t),this.project=e,this.index=0}_next(t){let e;const n=this.index++;try{e=this.project(t,n)}catch(s){return void this.destination.error(s)}this._innerSub(e)}_innerSub(t){const e=this.innerSubscription;e&&e.unsubscribe();const n=new V(this),s=this.destination;s.add(n),this.innerSubscription=j(t,n),this.innerSubscription!==n&&s.add(this.innerSubscription)}_complete(){const{innerSubscription:t}=this;t&&!t.closed||super._complete(),this.unsubscribe()}_unsubscribe(){this.innerSubscription=void 0}notifyComplete(){this.innerSubscription=void 0,this.isStopped&&super._complete()}notifyNext(t){this.destination.next(t)}}function $f(t){return e=>e.lift(new qf(t))}class qf{constructor(t){this.notifier=t}call(t,e){const n=new Qf(t),s=j(this.notifier,new V(n));return s&&!n.seenValue?(n.add(s),e.subscribe(n)):n}}class Qf extends M{constructor(t){super(t),this.seenValue=!1}notifyNext(){this.seenValue=!0,this.complete()}notifyComplete(){}}const Wf=(()=>{function t(){return Error.call(this),this.message=\"argument out of range\",this.name=\"ArgumentOutOfRangeError\",this}return t.prototype=Object.create(Error.prototype),t})(),Kf=new _(t=>t.complete());function Gf(t){return t?function(t){return new _(e=>t.schedule(()=>e.complete()))}(t):Kf}function Zf(t){return e=>0===t?Gf():e.lift(new Yf(t))}class Yf{constructor(t){if(this.total=t,this.total<0)throw new Wf}call(t,e){return e.subscribe(new Xf(t,this.total))}}class Xf extends f{constructor(t,e){super(t),this.total=e,this.count=0}_next(t){const e=this.total,n=++this.count;n<=e&&(this.destination.next(t),n===e&&(this.destination.complete(),this.unsubscribe()))}}function Jf(){}function tm(t,e,n){return function(s){return s.lift(new em(t,e,n))}}class em{constructor(t,e,n){this.nextOrObserver=t,this.error=e,this.complete=n}call(t,e){return e.subscribe(new nm(t,this.nextOrObserver,this.error,this.complete))}}class nm extends f{constructor(t,e,n,r){super(t),this._tapNext=Jf,this._tapError=Jf,this._tapComplete=Jf,this._tapError=n||Jf,this._tapComplete=r||Jf,s(e)?(this._context=this,this._tapNext=e):e&&(this._context=e,this._tapNext=e.next||Jf,this._tapError=e.error||Jf,this._tapComplete=e.complete||Jf)}_next(t){try{this._tapNext.call(this._context,t)}catch(e){return void this.destination.error(e)}this.destination.next(t)}_error(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)}_complete(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()}}const sm={provide:il,useFactory:function(t,e){return()=>{if(Pc(e)){const e=Array.from(t.querySelectorAll(`[class*=${rm}]`)),n=/\\bflex-layout-.+?\\b/g;e.forEach(t=>{t.classList.contains(rm+\"ssr\")&&t.parentNode?t.parentNode.removeChild(t):t.className.replace(n,\"\")})}}},deps:[sc,rl],multi:!0},rm=\"flex-layout-\";let im=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},providers:[sm]}),t})();class om{constructor(t=!1,e=\"all\",n=\"\",s=\"\",r=0){this.matches=t,this.mediaQuery=e,this.mqAlias=n,this.suffix=s,this.priority=r,this.property=\"\"}clone(){return new om(this.matches,this.mediaQuery,this.mqAlias,this.suffix)}}let am=(()=>{class t{constructor(){this.stylesheet=new Map}addStyleToElement(t,e,n){const s=this.stylesheet.get(t);s?s.set(e,n):this.stylesheet.set(t,new Map([[e,n]]))}clearStyles(){this.stylesheet.clear()}getStyleForElement(t,e){const n=this.stylesheet.get(t);let s=\"\";if(n){const t=n.get(e);\"number\"!=typeof t&&\"string\"!=typeof t||(s=t+\"\")}return s}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({factory:function(){return new t},token:t,providedIn:\"root\"}),t})();const lm={addFlexToParent:!0,addOrientationBps:!1,disableDefaultBps:!1,disableVendorPrefixes:!1,serverLoaded:!1,useColumnBasisZero:!0,printWithBreakpoints:[],mediaTriggerAutoRestore:!0,ssrObserveBreakpoints:[]},cm=new $n(\"Flex Layout token, config options for the library\",{providedIn:\"root\",factory:()=>lm}),um=new $n(\"FlexLayoutServerLoaded\",{providedIn:\"root\",factory:()=>!1}),hm=new $n(\"Flex Layout token, collect all breakpoints into one provider\",{providedIn:\"root\",factory:()=>null});function dm(t,e){return t=t?t.clone():new om,e&&(t.mqAlias=e.alias,t.mediaQuery=e.mediaQuery,t.suffix=e.suffix,t.priority=e.priority),t}const pm=\"inline\",fm=[\"row\",\"column\",\"row-reverse\",\"column-reverse\"];function mm(t){if(t)switch(t.toLowerCase()){case\"reverse\":case\"wrap-reverse\":case\"reverse-wrap\":t=\"wrap-reverse\";break;case\"no\":case\"none\":case\"nowrap\":t=\"nowrap\";break;default:t=\"wrap\"}return t}let gm=(()=>{class t{constructor(t,e,n,s){this.elementRef=t,this.styleBuilder=e,this.styler=n,this.marshal=s,this.DIRECTIVE_KEY=\"\",this.inputs=[],this.mru={},this.destroySubject=new S,this.styleCache=new Map}get parentElement(){return this.elementRef.nativeElement.parentElement}get nativeElement(){return this.elementRef.nativeElement}get activatedValue(){return this.marshal.getValue(this.nativeElement,this.DIRECTIVE_KEY)}set activatedValue(t){this.marshal.setValue(this.nativeElement,this.DIRECTIVE_KEY,t,this.marshal.activatedAlias)}ngOnChanges(t){Object.keys(t).forEach(e=>{if(-1!==this.inputs.indexOf(e)){const n=e.split(\".\").slice(1).join(\".\");this.setValue(t[e].currentValue,n)}})}ngOnDestroy(){this.destroySubject.next(),this.destroySubject.complete(),this.marshal.releaseElement(this.nativeElement)}init(t=[]){this.marshal.init(this.elementRef.nativeElement,this.DIRECTIVE_KEY,this.updateWithValue.bind(this),this.clearStyles.bind(this),t)}addStyles(t,e){const n=this.styleBuilder,s=n.shouldCache;let r=this.styleCache.get(t);r&&s||(r=n.buildStyles(t,e),s&&this.styleCache.set(t,r)),this.mru=Object.assign({},r),this.applyStyleToElement(r),n.sideEffect(t,r,e)}clearStyles(){Object.keys(this.mru).forEach(t=>{this.mru[t]=\"\"}),this.applyStyleToElement(this.mru),this.mru={}}triggerUpdate(){this.marshal.triggerUpdate(this.nativeElement,this.DIRECTIVE_KEY)}getFlexFlowDirection(t,e=!1){if(t){const[n,s]=this.styler.getFlowDirection(t);if(!s&&e){const e=function(t){let[e,n,s]=function(t){t=t?t.toLowerCase():\"\";let[e,n,s]=t.split(\" \");return fm.find(t=>t===e)||(e=fm[0]),n===pm&&(n=s!==pm?s:\"\",s=pm),[e,mm(n),!!s]}(t);return function(t,e=null,n=!1){return{display:n?\"inline-flex\":\"flex\",\"box-sizing\":\"border-box\",\"flex-direction\":t,\"flex-wrap\":e||null}}(e,n,s)}(n);this.styler.applyStyleToElements(e,[t])}return n.trim()}return\"row\"}hasWrap(t){return this.styler.hasWrap(t)}applyStyleToElement(t,e,n=this.nativeElement){this.styler.applyStyleToElement(n,t,e)}setValue(t,e){this.marshal.setValue(this.nativeElement,this.DIRECTIVE_KEY,t,e)}updateWithValue(t){this.currentValue!==t&&(this.addStyles(t),this.currentValue=t)}}return t.\\u0275fac=function(t){!function(){throw new Error(\"invalid\")}()},t.\\u0275dir=$t({type:t,features:[ae]}),t})();const ym=[{alias:\"xs\",mediaQuery:\"screen and (min-width: 0px) and (max-width: 599.98px)\",priority:1e3},{alias:\"sm\",mediaQuery:\"screen and (min-width: 600px) and (max-width: 959.98px)\",priority:900},{alias:\"md\",mediaQuery:\"screen and (min-width: 960px) and (max-width: 1279.98px)\",priority:800},{alias:\"lg\",mediaQuery:\"screen and (min-width: 1280px) and (max-width: 1919.98px)\",priority:700},{alias:\"xl\",mediaQuery:\"screen and (min-width: 1920px) and (max-width: 4999.98px)\",priority:600},{alias:\"lt-sm\",overlapping:!0,mediaQuery:\"screen and (max-width: 599.98px)\",priority:950},{alias:\"lt-md\",overlapping:!0,mediaQuery:\"screen and (max-width: 959.98px)\",priority:850},{alias:\"lt-lg\",overlapping:!0,mediaQuery:\"screen and (max-width: 1279.98px)\",priority:750},{alias:\"lt-xl\",overlapping:!0,priority:650,mediaQuery:\"screen and (max-width: 1919.98px)\"},{alias:\"gt-xs\",overlapping:!0,mediaQuery:\"screen and (min-width: 600px)\",priority:-950},{alias:\"gt-sm\",overlapping:!0,mediaQuery:\"screen and (min-width: 960px)\",priority:-850},{alias:\"gt-md\",overlapping:!0,mediaQuery:\"screen and (min-width: 1280px)\",priority:-750},{alias:\"gt-lg\",overlapping:!0,mediaQuery:\"screen and (min-width: 1920px)\",priority:-650}],_m=\"(orientation: portrait) and (max-width: 599.98px)\",vm=\"(orientation: landscape) and (max-width: 959.98px)\",bm=\"(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)\",wm=\"(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)\",xm=\"(orientation: portrait) and (min-width: 840px)\",Sm=\"(orientation: landscape) and (min-width: 1280px)\",Cm={HANDSET:`${_m}, ${vm}`,TABLET:`${bm} , ${wm}`,WEB:`${xm}, ${Sm} `,HANDSET_PORTRAIT:\"\"+_m,TABLET_PORTRAIT:bm+\" \",WEB_PORTRAIT:\"\"+xm,HANDSET_LANDSCAPE:\"\"+vm,TABLET_LANDSCAPE:\"\"+wm,WEB_LANDSCAPE:\"\"+Sm},Em=[{alias:\"handset\",priority:2e3,mediaQuery:Cm.HANDSET},{alias:\"handset.landscape\",priority:2e3,mediaQuery:Cm.HANDSET_LANDSCAPE},{alias:\"handset.portrait\",priority:2e3,mediaQuery:Cm.HANDSET_PORTRAIT},{alias:\"tablet\",priority:2100,mediaQuery:Cm.TABLET},{alias:\"tablet.landscape\",priority:2100,mediaQuery:Cm.TABLET_LANDSCAPE},{alias:\"tablet.portrait\",priority:2100,mediaQuery:Cm.TABLET_PORTRAIT},{alias:\"web\",priority:2200,mediaQuery:Cm.WEB,overlapping:!0},{alias:\"web.landscape\",priority:2200,mediaQuery:Cm.WEB_LANDSCAPE,overlapping:!0},{alias:\"web.portrait\",priority:2200,mediaQuery:Cm.WEB_PORTRAIT,overlapping:!0}],km=/(\\.|-|_)/g;function Tm(t){let e=t.length>0?t.charAt(0):\"\",n=t.length>1?t.slice(1):\"\";return e.toUpperCase()+n}const Am=new $n(\"Token (@angular/flex-layout) Breakpoints\",{providedIn:\"root\",factory:()=>{const t=ps(hm),e=ps(cm),n=[].concat.apply([],(t||[]).map(t=>Array.isArray(t)?t:[t]));return function(t,e=[]){const n={};return t.forEach(t=>{n[t.alias]=t}),e.forEach(t=>{n[t.alias]?function(t,...e){if(null==t)throw TypeError(\"Cannot convert undefined or null to object\");for(let n of e)if(null!=n)for(let e in n)n.hasOwnProperty(e)&&(t[e]=n[e])}(n[t.alias],t):n[t.alias]=t}),(s=Object.keys(n).map(t=>n[t])).forEach(t=>{t.suffix||(t.suffix=t.alias.replace(km,\"|\").split(\"|\").map(Tm).join(\"\"),t.overlapping=!!t.overlapping)}),s;var s}((e.disableDefaultBps?[]:ym).concat(e.addOrientationBps?Em:[]),n)}});function Im(t,e){return(e&&e.priority||0)-(t&&t.priority||0)}function Om(t,e){return(t.priority||0)-(e.priority||0)}let Rm=(()=>{class t{constructor(t){this.findByMap=new Map,this.items=[...t].sort(Om)}findByAlias(t){return t?this.findWithPredicate(t,e=>e.alias==t):null}findByQuery(t){return this.findWithPredicate(t,e=>e.mediaQuery==t)}get overlappings(){return this.items.filter(t=>1==t.overlapping)}get aliases(){return this.items.map(t=>t.alias)}get suffixes(){return this.items.map(t=>t.suffix?t.suffix:\"\")}findWithPredicate(t,e){let n=this.findByMap.get(t);return n||(n=this.items.find(e)||null,this.findByMap.set(t,n)),n||null}}return t.\\u0275fac=function(e){return new(e||t)(ds(Am))},t.\\u0275prov=at({factory:function(){return new t(ds(Am))},token:t,providedIn:\"root\"}),t})(),Pm=(()=>{class t{constructor(t,e,n){this._zone=t,this._platformId=e,this._document=n,this.source=new Pf(new om(!0)),this.registry=new Map,this.pendingRemoveListenerFns=[],this._observable$=this.source.asObservable()}get activations(){const t=[];return this.registry.forEach((e,n)=>{e.matches&&t.push(n)}),t}isActive(t){const e=this.registry.get(t);return e?e.matches:this.registerQuery(t).some(t=>t.matches)}observe(t,e=!1){if(t&&t.length){const n=this._observable$.pipe(Xl(n=>!e||t.indexOf(n.mediaQuery)>-1));return q(new _(e=>{const n=this.registerQuery(t);if(n.length){const t=n.pop();n.forEach(t=>{e.next(t)}),this.source.next(t)}e.complete()}),n)}return this._observable$}registerQuery(t){const e=Array.isArray(t)?t:[t],n=[];return function(t,e){const n=t.filter(t=>!Lm[t]);if(n.length>0){const t=n.join(\", \");try{const s=e.createElement(\"style\");s.setAttribute(\"type\",\"text/css\"),s.styleSheet||s.appendChild(e.createTextNode(`\\n/*\\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\\n  see http://bit.ly/2sd4HMP\\n*/\\n@media ${t} {.fx-query-test{ }}\\n`)),e.head.appendChild(s),n.forEach(t=>Lm[t]=s)}catch(s){console.error(s)}}}(e,this._document),e.forEach(t=>{const e=e=>{this._zone.run(()=>this.source.next(new om(e.matches,t)))};let s=this.registry.get(t);s||(s=this.buildMQL(t),s.addListener(e),this.pendingRemoveListenerFns.push(()=>s.removeListener(e)),this.registry.set(t,s)),s.matches&&n.push(new om(!0,t))}),n}ngOnDestroy(){let t;for(;t=this.pendingRemoveListenerFns.pop();)t()}buildMQL(t){return function(t,e){return e&&window.matchMedia(\"all\").addListener?window.matchMedia(t):{matches:\"all\"===t||\"\"===t,media:t,addListener:()=>{},removeListener:()=>{},onchange:null,addEventListener(){},removeEventListener(){},dispatchEvent:()=>!1}}(t,Pc(this._platformId))}}return t.\\u0275fac=function(e){return new(e||t)(ds(vl),ds(rl),ds(sc))},t.\\u0275prov=at({factory:function(){return new t(ds(vl),ds(rl),ds(sc))},token:t,providedIn:\"root\"}),t})();const Lm={},Dm=\"print\",Fm={alias:Dm,mediaQuery:Dm,priority:1e3};let Nm=(()=>{class t{constructor(t,e,n){this.breakpoints=t,this.layoutConfig=e,this._document=n,this.registeredBeforeAfterPrintHooks=!1,this.isPrintingBeforeAfterEvent=!1,this.beforePrintEventListeners=[],this.afterPrintEventListeners=[],this.isPrinting=!1,this.queue=new Vm,this.deactivations=[]}withPrintQuery(t){return[...t,Dm]}isPrintEvent(t){return t.mediaQuery.startsWith(Dm)}get printAlias(){return this.layoutConfig.printWithBreakpoints||[]}get printBreakPoints(){return this.printAlias.map(t=>this.breakpoints.findByAlias(t)).filter(t=>null!==t)}getEventBreakpoints({mediaQuery:t}){const e=this.breakpoints.findByQuery(t);return(e?[...this.printBreakPoints,e]:this.printBreakPoints).sort(Im)}updateEvent(t){let e=this.breakpoints.findByQuery(t.mediaQuery);return this.isPrintEvent(t)&&(e=this.getEventBreakpoints(t)[0],t.mediaQuery=e?e.mediaQuery:\"\"),dm(t,e)}registerBeforeAfterPrintHooks(t){if(!this._document.defaultView||this.registeredBeforeAfterPrintHooks)return;this.registeredBeforeAfterPrintHooks=!0;const e=()=>{this.isPrinting||(this.isPrintingBeforeAfterEvent=!0,this.startPrinting(t,this.getEventBreakpoints(new om(!0,Dm))),t.updateStyles())},n=()=>{this.isPrintingBeforeAfterEvent=!1,this.isPrinting&&(this.stopPrinting(t),t.updateStyles())};this._document.defaultView.addEventListener(\"beforeprint\",e),this._document.defaultView.addEventListener(\"afterprint\",n),this.beforePrintEventListeners.push(e),this.afterPrintEventListeners.push(n)}interceptEvents(t){return this.registerBeforeAfterPrintHooks(t),e=>{this.isPrintEvent(e)?e.matches&&!this.isPrinting?(this.startPrinting(t,this.getEventBreakpoints(e)),t.updateStyles()):e.matches||!this.isPrinting||this.isPrintingBeforeAfterEvent||(this.stopPrinting(t),t.updateStyles()):this.collectActivations(e)}}blockPropagation(){return t=>!(this.isPrinting||this.isPrintEvent(t))}startPrinting(t,e){this.isPrinting=!0,t.activatedBreakpoints=this.queue.addPrintBreakpoints(e)}stopPrinting(t){t.activatedBreakpoints=this.deactivations,this.deactivations=[],this.queue.clear(),this.isPrinting=!1}collectActivations(t){if(!this.isPrinting||this.isPrintingBeforeAfterEvent)if(t.matches)this.isPrintingBeforeAfterEvent||(this.deactivations=[]);else{const e=this.breakpoints.findByQuery(t.mediaQuery);e&&(this.deactivations.push(e),this.deactivations.sort(Im))}}ngOnDestroy(){this.beforePrintEventListeners.forEach(t=>this._document.defaultView.removeEventListener(\"beforeprint\",t)),this.afterPrintEventListeners.forEach(t=>this._document.defaultView.removeEventListener(\"afterprint\",t))}}return t.\\u0275fac=function(e){return new(e||t)(ds(Rm),ds(cm),ds(sc))},t.\\u0275prov=at({factory:function(){return new t(ds(Rm),ds(cm),ds(sc))},token:t,providedIn:\"root\"}),t})();class Vm{constructor(){this.printBreakpoints=[]}addPrintBreakpoints(t){return t.push(Fm),t.sort(Im),t.forEach(t=>this.addBreakpoint(t)),this.printBreakpoints}addBreakpoint(t){t&&void 0===this.printBreakpoints.find(e=>e.mediaQuery===t.mediaQuery)&&(this.printBreakpoints=function(t){return!!t&&t.mediaQuery.startsWith(Dm)}(t)?[t,...this.printBreakpoints]:[...this.printBreakpoints,t])}clear(){this.printBreakpoints=[]}}function Mm(t){for(let e in t){let n=t[e]||\"\";switch(e){case\"display\":t.display=\"flex\"===n?[\"-webkit-flex\",\"flex\"]:\"inline-flex\"===n?[\"-webkit-inline-flex\",\"inline-flex\"]:n;break;case\"align-items\":case\"align-self\":case\"align-content\":case\"flex\":case\"flex-basis\":case\"flex-flow\":case\"flex-grow\":case\"flex-shrink\":case\"flex-wrap\":case\"justify-content\":t[\"-webkit-\"+e]=n;break;case\"flex-direction\":n=n||\"row\",t[\"-webkit-flex-direction\"]=n,t[\"flex-direction\"]=n;break;case\"order\":t.order=t[\"-webkit-\"+e]=isNaN(+n)?\"0\":n}}return t}let jm=(()=>{class t{constructor(t,e,n,s){this._serverStylesheet=t,this._serverModuleLoaded=e,this._platformId=n,this.layoutConfig=s}applyStyleToElement(t,e,n=null){let s={};\"string\"==typeof e&&(s[e]=n,e=s),s=this.layoutConfig.disableVendorPrefixes?e:Mm(e),this._applyMultiValueStyleToElement(s,t)}applyStyleToElements(t,e=[]){const n=this.layoutConfig.disableVendorPrefixes?t:Mm(t);e.forEach(t=>{this._applyMultiValueStyleToElement(n,t)})}getFlowDirection(t){const e=\"flex-direction\";let n=this.lookupStyle(t,e);return[n||\"row\",this.lookupInlineStyle(t,e)||Lc(this._platformId)&&this._serverModuleLoaded?n:\"\"]}hasWrap(t){return\"wrap\"===this.lookupStyle(t,\"flex-wrap\")}lookupAttributeValue(t,e){return t.getAttribute(e)||\"\"}lookupInlineStyle(t,e){return Pc(this._platformId)?t.style.getPropertyValue(e):this._getServerStyle(t,e)}lookupStyle(t,e,n=!1){let s=\"\";return t&&((s=this.lookupInlineStyle(t,e))||(Pc(this._platformId)?n||(s=getComputedStyle(t).getPropertyValue(e)):this._serverModuleLoaded&&(s=this._serverStylesheet.getStyleForElement(t,e)))),s?s.trim():\"\"}_applyMultiValueStyleToElement(t,e){Object.keys(t).sort().forEach(n=>{const s=t[n],r=Array.isArray(s)?s:[s];r.sort();for(let t of r)t=t?t+\"\":\"\",Pc(this._platformId)||!this._serverModuleLoaded?Pc(this._platformId)?e.style.setProperty(n,t):this._setServerStyle(e,n,t):this._serverStylesheet.addStyleToElement(e,n,t)})}_setServerStyle(t,e,n){e=e.replace(/([a-z])([A-Z])/g,\"$1-$2\").toLowerCase();const s=this._readStyleAttribute(t);s[e]=n||\"\",this._writeStyleAttribute(t,s)}_getServerStyle(t,e){return this._readStyleAttribute(t)[e]||\"\"}_readStyleAttribute(t){const e={},n=t.getAttribute(\"style\");if(n){const t=n.split(/;+/g);for(let n=0;n<t.length;n++){const s=t[n].trim();if(s.length>0){const t=s.indexOf(\":\");if(-1===t)throw new Error(\"Invalid CSS style: \"+s);e[s.substr(0,t).trim()]=s.substr(t+1).trim()}}}return e}_writeStyleAttribute(t,e){let n=\"\";for(const s in e)e[s]&&(n+=s+\":\"+e[s]+\";\");t.setAttribute(\"style\",n)}}return t.\\u0275fac=function(e){return new(e||t)(ds(am),ds(um),ds(rl),ds(cm))},t.\\u0275prov=at({factory:function(){return new t(ds(am),ds(um),ds(rl),ds(cm))},token:t,providedIn:\"root\"}),t})();class Um{constructor(){this.shouldCache=!0}sideEffect(t,e,n){}}let Bm=(()=>{class t{constructor(t,e,n){this.matchMedia=t,this.breakpoints=e,this.hook=n,this.activatedBreakpoints=[],this.elementMap=new Map,this.elementKeyMap=new WeakMap,this.watcherMap=new WeakMap,this.updateMap=new WeakMap,this.clearMap=new WeakMap,this.subject=new S,this.observeActivations()}get activatedAlias(){return this.activatedBreakpoints[0]?this.activatedBreakpoints[0].alias:\"\"}onMediaChange(t){const e=this.findByQuery(t.mediaQuery);e&&((t=dm(t,e)).matches&&-1===this.activatedBreakpoints.indexOf(e)?(this.activatedBreakpoints.push(e),this.activatedBreakpoints.sort(Im),this.updateStyles()):t.matches||-1===this.activatedBreakpoints.indexOf(e)||(this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(e),1),this.activatedBreakpoints.sort(Im),this.updateStyles()))}init(t,e,n,s,r=[]){Hm(this.updateMap,t,e,n),Hm(this.clearMap,t,e,s),this.buildElementKeyMap(t,e),this.watchExtraTriggers(t,e,r)}getValue(t,e,n){const s=this.elementMap.get(t);if(s){const t=void 0!==n?s.get(n):this.getActivatedValues(s,e);if(t)return t.get(e)}}hasValue(t,e){const n=this.elementMap.get(t);if(n){const t=this.getActivatedValues(n,e);if(t)return void 0!==t.get(e)||!1}return!1}setValue(t,e,n,s){let r=this.elementMap.get(t);if(r){const i=(r.get(s)||new Map).set(e,n);r.set(s,i),this.elementMap.set(t,r)}else r=(new Map).set(s,(new Map).set(e,n)),this.elementMap.set(t,r);const i=this.getValue(t,e);void 0!==i&&this.updateElement(t,e,i)}trackValue(t,e){return this.subject.asObservable().pipe(Xl(n=>n.element===t&&n.key===e))}updateStyles(){this.elementMap.forEach((t,e)=>{const n=new Set(this.elementKeyMap.get(e));let s=this.getActivatedValues(t);s&&s.forEach((t,s)=>{this.updateElement(e,s,t),n.delete(s)}),n.forEach(n=>{if(s=this.getActivatedValues(t,n),s){const t=s.get(n);this.updateElement(e,n,t)}else this.clearElement(e,n)})})}clearElement(t,e){const n=this.clearMap.get(t);if(n){const s=n.get(e);s&&(s(),this.subject.next({element:t,key:e,value:\"\"}))}}updateElement(t,e,n){const s=this.updateMap.get(t);if(s){const r=s.get(e);r&&(r(n),this.subject.next({element:t,key:e,value:n}))}}releaseElement(t){const e=this.watcherMap.get(t);e&&(e.forEach(t=>t.unsubscribe()),this.watcherMap.delete(t));const n=this.elementMap.get(t);n&&(n.forEach((t,e)=>n.delete(e)),this.elementMap.delete(t))}triggerUpdate(t,e){const n=this.elementMap.get(t);if(n){const s=this.getActivatedValues(n,e);s&&(e?this.updateElement(t,e,s.get(e)):s.forEach((e,n)=>this.updateElement(t,n,e)))}}buildElementKeyMap(t,e){let n=this.elementKeyMap.get(t);n||(n=new Set,this.elementKeyMap.set(t,n)),n.add(e)}watchExtraTriggers(t,e,n){if(n&&n.length){let s=this.watcherMap.get(t);if(s||(s=new Map,this.watcherMap.set(t,s)),!s.get(e)){const r=q(...n).subscribe(()=>{const n=this.getValue(t,e);this.updateElement(t,e,n)});s.set(e,r)}}}findByQuery(t){return this.breakpoints.findByQuery(t)}getActivatedValues(t,e){for(let s=0;s<this.activatedBreakpoints.length;s++){const n=t.get(this.activatedBreakpoints[s].alias);if(n&&(void 0===e||n.has(e)&&null!=n.get(e)))return n}const n=t.get(\"\");return void 0===e||n&&n.has(e)?n:void 0}observeActivations(){const t=this.breakpoints.items.map(t=>t.mediaQuery);this.matchMedia.observe(this.hook.withPrintQuery(t)).pipe(tm(this.hook.interceptEvents(this)),Xl(this.hook.blockPropagation())).subscribe(this.onMediaChange.bind(this))}}return t.\\u0275fac=function(e){return new(e||t)(ds(Pm),ds(Rm),ds(Nm))},t.\\u0275prov=at({factory:function(){return new t(ds(Pm),ds(Rm),ds(Nm))},token:t,providedIn:\"root\"}),t})();function Hm(t,e,n,s){if(void 0!==s){let r=t.get(e);r||(r=new Map,t.set(e,r)),r.set(n,s)}}function zm(t){return null!=t&&\"\"+t!=\"false\"}function $m(t){return t instanceof Mo?t.nativeElement:t}new Map,new WeakMap;let qm=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},imports:[[im]]}),t})();const Qm=new $n(\"cdk-dir-doc\",{providedIn:\"root\",factory:function(){return ps(sc)}});let Wm=(()=>{class t{constructor(t){if(this.value=\"ltr\",this.change=new Da,t){const e=t.documentElement?t.documentElement.dir:null,n=(t.body?t.body.dir:null)||e;this.value=\"ltr\"===n||\"rtl\"===n?n:\"ltr\"}}ngOnDestroy(){this.change.complete()}}return t.\\u0275fac=function(e){return new(e||t)(ds(Qm,8))},t.\\u0275prov=at({factory:function(){return new t(ds(Qm,8))},token:t,providedIn:\"root\"}),t})(),Km=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)}}),t})();const Gm=\"inline\",Zm=[\"row\",\"column\",\"row-reverse\",\"column-reverse\"];function Ym(t){t=t?t.toLowerCase():\"\";let[e,n,s]=t.split(\" \");return Zm.find(t=>t===e)||(e=Zm[0]),n===Gm&&(n=s!==Gm?s:\"\",s=Gm),[e,Jm(n),!!s]}function Xm(t){let[e]=Ym(t);return e.indexOf(\"row\")>-1}function Jm(t){if(t)switch(t.toLowerCase()){case\"reverse\":case\"wrap-reverse\":case\"reverse-wrap\":t=\"wrap-reverse\";break;case\"no\":case\"none\":case\"nowrap\":t=\"nowrap\";break;default:t=\"wrap\"}return t}let tg=(()=>{class t extends Um{buildStyles(t){return function(t){let[e,n,s]=Ym(t);return function(t,e=null,n=!1){return{display:n?\"inline-flex\":\"flex\",\"box-sizing\":\"border-box\",\"flex-direction\":t,\"flex-wrap\":e||null}}(e,n,s)}(t)}}return t.\\u0275fac=function(e){return eg(e||t)},t.\\u0275prov=at({factory:function(){return new t},token:t,providedIn:\"root\"}),t})();const eg=Un(tg),ng=[\"fxLayout\",\"fxLayout.xs\",\"fxLayout.sm\",\"fxLayout.md\",\"fxLayout.lg\",\"fxLayout.xl\",\"fxLayout.lt-sm\",\"fxLayout.lt-md\",\"fxLayout.lt-lg\",\"fxLayout.lt-xl\",\"fxLayout.gt-xs\",\"fxLayout.gt-sm\",\"fxLayout.gt-md\",\"fxLayout.gt-lg\"];let sg=(()=>{class t extends gm{constructor(t,e,n,s){super(t,n,e,s),this.DIRECTIVE_KEY=\"layout\",this.styleCache=og,this.init()}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Mo),Ui(jm),Ui(tg),Ui(Bm))},t.\\u0275dir=$t({type:t,features:[Ti]}),t})(),rg=(()=>{class t extends sg{constructor(){super(...arguments),this.inputs=ng}}return t.\\u0275fac=function(e){return ig(e||t)},t.\\u0275dir=$t({type:t,selectors:[[\"\",\"fxLayout\",\"\"],[\"\",\"fxLayout.xs\",\"\"],[\"\",\"fxLayout.sm\",\"\"],[\"\",\"fxLayout.md\",\"\"],[\"\",\"fxLayout.lg\",\"\"],[\"\",\"fxLayout.xl\",\"\"],[\"\",\"fxLayout.lt-sm\",\"\"],[\"\",\"fxLayout.lt-md\",\"\"],[\"\",\"fxLayout.lt-lg\",\"\"],[\"\",\"fxLayout.lt-xl\",\"\"],[\"\",\"fxLayout.gt-xs\",\"\"],[\"\",\"fxLayout.gt-sm\",\"\"],[\"\",\"fxLayout.gt-md\",\"\"],[\"\",\"fxLayout.gt-lg\",\"\"]],inputs:{fxLayout:\"fxLayout\",\"fxLayout.xs\":\"fxLayout.xs\",\"fxLayout.sm\":\"fxLayout.sm\",\"fxLayout.md\":\"fxLayout.md\",\"fxLayout.lg\":\"fxLayout.lg\",\"fxLayout.xl\":\"fxLayout.xl\",\"fxLayout.lt-sm\":\"fxLayout.lt-sm\",\"fxLayout.lt-md\":\"fxLayout.lt-md\",\"fxLayout.lt-lg\":\"fxLayout.lt-lg\",\"fxLayout.lt-xl\":\"fxLayout.lt-xl\",\"fxLayout.gt-xs\":\"fxLayout.gt-xs\",\"fxLayout.gt-sm\":\"fxLayout.gt-sm\",\"fxLayout.gt-md\":\"fxLayout.gt-md\",\"fxLayout.gt-lg\":\"fxLayout.gt-lg\"},features:[Ti]}),t})();const ig=Un(rg),og=new Map;new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map;let ag=(()=>{class t extends Um{buildStyles(t,e){const n={},[s,r]=t.split(\" \");switch(s){case\"center\":n[\"justify-content\"]=\"center\";break;case\"space-around\":n[\"justify-content\"]=\"space-around\";break;case\"space-between\":n[\"justify-content\"]=\"space-between\";break;case\"space-evenly\":n[\"justify-content\"]=\"space-evenly\";break;case\"end\":case\"flex-end\":n[\"justify-content\"]=\"flex-end\";break;case\"start\":case\"flex-start\":default:n[\"justify-content\"]=\"flex-start\"}switch(r){case\"start\":case\"flex-start\":n[\"align-items\"]=n[\"align-content\"]=\"flex-start\";break;case\"center\":n[\"align-items\"]=n[\"align-content\"]=\"center\";break;case\"end\":case\"flex-end\":n[\"align-items\"]=n[\"align-content\"]=\"flex-end\";break;case\"space-between\":n[\"align-content\"]=\"space-between\",n[\"align-items\"]=\"stretch\";break;case\"space-around\":n[\"align-content\"]=\"space-around\",n[\"align-items\"]=\"stretch\";break;case\"baseline\":n[\"align-content\"]=\"stretch\",n[\"align-items\"]=\"baseline\";break;case\"stretch\":default:n[\"align-items\"]=n[\"align-content\"]=\"stretch\"}return function(t,...e){if(null==t)throw TypeError(\"Cannot convert undefined or null to object\");for(let n of e)if(null!=n)for(let e in n)n.hasOwnProperty(e)&&(t[e]=n[e]);return t}(n,{display:e.inline?\"inline-flex\":\"flex\",\"flex-direction\":e.layout,\"box-sizing\":\"border-box\",\"max-width\":\"stretch\"===r?Xm(e.layout)?null:\"100%\":null,\"max-height\":\"stretch\"===r&&Xm(e.layout)?\"100%\":null})}}return t.\\u0275fac=function(e){return lg(e||t)},t.\\u0275prov=at({factory:function(){return new t},token:t,providedIn:\"root\"}),t})();const lg=Un(ag),cg=[\"fxLayoutAlign\",\"fxLayoutAlign.xs\",\"fxLayoutAlign.sm\",\"fxLayoutAlign.md\",\"fxLayoutAlign.lg\",\"fxLayoutAlign.xl\",\"fxLayoutAlign.lt-sm\",\"fxLayoutAlign.lt-md\",\"fxLayoutAlign.lt-lg\",\"fxLayoutAlign.lt-xl\",\"fxLayoutAlign.gt-xs\",\"fxLayoutAlign.gt-sm\",\"fxLayoutAlign.gt-md\",\"fxLayoutAlign.gt-lg\"];let ug=(()=>{class t extends gm{constructor(t,e,n,s){super(t,n,e,s),this.DIRECTIVE_KEY=\"layout-align\",this.layout=\"row\",this.inline=!1,this.init(),this.marshal.trackValue(this.nativeElement,\"layout\").pipe($f(this.destroySubject)).subscribe(this.onLayoutChange.bind(this))}updateWithValue(t){const e=this.layout||\"row\",n=this.inline;\"row\"===e&&n?this.styleCache=yg:\"row\"!==e||n?\"row-reverse\"===e&&n?this.styleCache=vg:\"row-reverse\"!==e||n?\"column\"===e&&n?this.styleCache=_g:\"column\"!==e||n?\"column-reverse\"===e&&n?this.styleCache=bg:\"column-reverse\"!==e||n||(this.styleCache=gg):this.styleCache=fg:this.styleCache=mg:this.styleCache=pg,this.addStyles(t,{layout:e,inline:n})}onLayoutChange(t){const e=t.value.split(\" \");this.layout=e[0],this.inline=t.value.includes(\"inline\"),Zm.find(t=>t===this.layout)||(this.layout=\"row\"),this.triggerUpdate()}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Mo),Ui(jm),Ui(ag),Ui(Bm))},t.\\u0275dir=$t({type:t,features:[Ti]}),t})(),hg=(()=>{class t extends ug{constructor(){super(...arguments),this.inputs=cg}}return t.\\u0275fac=function(e){return dg(e||t)},t.\\u0275dir=$t({type:t,selectors:[[\"\",\"fxLayoutAlign\",\"\"],[\"\",\"fxLayoutAlign.xs\",\"\"],[\"\",\"fxLayoutAlign.sm\",\"\"],[\"\",\"fxLayoutAlign.md\",\"\"],[\"\",\"fxLayoutAlign.lg\",\"\"],[\"\",\"fxLayoutAlign.xl\",\"\"],[\"\",\"fxLayoutAlign.lt-sm\",\"\"],[\"\",\"fxLayoutAlign.lt-md\",\"\"],[\"\",\"fxLayoutAlign.lt-lg\",\"\"],[\"\",\"fxLayoutAlign.lt-xl\",\"\"],[\"\",\"fxLayoutAlign.gt-xs\",\"\"],[\"\",\"fxLayoutAlign.gt-sm\",\"\"],[\"\",\"fxLayoutAlign.gt-md\",\"\"],[\"\",\"fxLayoutAlign.gt-lg\",\"\"]],inputs:{fxLayoutAlign:\"fxLayoutAlign\",\"fxLayoutAlign.xs\":\"fxLayoutAlign.xs\",\"fxLayoutAlign.sm\":\"fxLayoutAlign.sm\",\"fxLayoutAlign.md\":\"fxLayoutAlign.md\",\"fxLayoutAlign.lg\":\"fxLayoutAlign.lg\",\"fxLayoutAlign.xl\":\"fxLayoutAlign.xl\",\"fxLayoutAlign.lt-sm\":\"fxLayoutAlign.lt-sm\",\"fxLayoutAlign.lt-md\":\"fxLayoutAlign.lt-md\",\"fxLayoutAlign.lt-lg\":\"fxLayoutAlign.lt-lg\",\"fxLayoutAlign.lt-xl\":\"fxLayoutAlign.lt-xl\",\"fxLayoutAlign.gt-xs\":\"fxLayoutAlign.gt-xs\",\"fxLayoutAlign.gt-sm\":\"fxLayoutAlign.gt-sm\",\"fxLayoutAlign.gt-md\":\"fxLayoutAlign.gt-md\",\"fxLayoutAlign.gt-lg\":\"fxLayoutAlign.gt-lg\"},features:[Ti]}),t})();const dg=Un(hg),pg=new Map,fg=new Map,mg=new Map,gg=new Map,yg=new Map,_g=new Map,vg=new Map,bg=new Map;let wg=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},imports:[[im,Km]]}),t})();new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map,new Map;let xg=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},imports:[[im]]}),t})();new zo(\"11.0.0-beta.33\");let Sg=(()=>{class t{constructor(t,e){Lc(e)&&!t&&console.warn(\"Warning: Flex Layout loaded on the server without FlexLayoutServerModule\")}static withConfig(e,n=[]){return{ngModule:t,providers:e.serverLoaded?[{provide:cm,useValue:Object.assign(Object.assign({},lm),e)},{provide:hm,useValue:n,multi:!0},{provide:um,useValue:!0}]:[{provide:cm,useValue:Object.assign(Object.assign({},lm),e)},{provide:hm,useValue:n,multi:!0}]}}}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)(ds(um),ds(rl))},imports:[[wg,qm,xg],wg,qm,xg]}),t})();class Cg extends f{notifyNext(t,e,n,s,r){this.destination.next(e)}notifyError(t,e){this.destination.error(t)}notifyComplete(t){this.destination.complete()}}class Eg extends f{constructor(t,e,n){super(),this.parent=t,this.outerValue=e,this.outerIndex=n,this.index=0}_next(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)}_error(t){this.parent.notifyError(t,this),this.unsubscribe()}_complete(){this.parent.notifyComplete(this),this.unsubscribe()}}function kg(t,e,n,s,r=new Eg(t,n,s)){if(!r.closed)return e instanceof _?e.subscribe(r):D(e)(r)}const Tg={};class Ag{constructor(t){this.resultSelector=t}call(t,e){return e.subscribe(new Ig(t,this.resultSelector))}}class Ig extends Cg{constructor(t,e){super(t),this.resultSelector=e,this.active=0,this.values=[],this.observables=[]}_next(t){this.values.push(Tg),this.observables.push(t)}_complete(){const t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(let n=0;n<e;n++)this.add(kg(this,t[n],void 0,n))}}notifyComplete(t){0==(this.active-=1)&&this.destination.complete()}notifyNext(t,e,n){const s=this.values,r=this.toRespond?s[n]===Tg?--this.toRespond:this.toRespond:0;s[n]=e,0===r&&(this.resultSelector?this._tryResultSelector(s):this.destination.next(s.slice()))}_tryResultSelector(t){let e;try{e=this.resultSelector.apply(this,t)}catch(n){return void this.destination.error(n)}this.destination.next(e)}}const Og=(()=>{function t(){return Error.call(this),this.message=\"no elements in sequence\",this.name=\"EmptyError\",this}return t.prototype=Object.create(Error.prototype),t})();function Rg(t){return new _(e=>{let n;try{n=t()}catch(s){return void e.error(s)}return(n?N(n):Gf()).subscribe(e)})}function Pg(){return z(1)}function Lg(t){return function(e){return 0===t?Gf():e.lift(new Dg(t))}}class Dg{constructor(t){if(this.total=t,this.total<0)throw new Wf}call(t,e){return e.subscribe(new Fg(t,this.total))}}class Fg extends f{constructor(t,e){super(t),this.total=e,this.ring=new Array,this.count=0}_next(t){const e=this.ring,n=this.total,s=this.count++;e.length<n?e.push(t):e[s%n]=t}_complete(){const t=this.destination;let e=this.count;if(e>0){const n=this.count>=this.total?this.total:this.count,s=this.ring;for(let r=0;r<n;r++){const r=e++%n;t.next(s[r])}}t.complete()}}function Ng(t=jg){return e=>e.lift(new Vg(t))}class Vg{constructor(t){this.errorFactory=t}call(t,e){return e.subscribe(new Mg(t,this.errorFactory))}}class Mg extends f{constructor(t,e){super(t),this.errorFactory=e,this.hasValue=!1}_next(t){this.hasValue=!0,this.destination.next(t)}_complete(){if(this.hasValue)return this.destination.complete();{let e;try{e=this.errorFactory()}catch(t){e=t}this.destination.error(e)}}}function jg(){return new Og}function Ug(t=null){return e=>e.lift(new Bg(t))}class Bg{constructor(t){this.defaultValue=t}call(t,e){return e.subscribe(new Hg(t,this.defaultValue))}}class Hg extends f{constructor(t,e){super(t),this.defaultValue=e,this.isEmpty=!0}_next(t){this.isEmpty=!1,this.destination.next(t)}_complete(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()}}function zg(...t){return Pg()(Zl(...t))}function $g(...t){const e=t[t.length-1];return E(e)?(t.pop(),n=>zg(t,n,e)):e=>zg(t,e)}class qg{constructor(t,e,n=!1){this.accumulator=t,this.seed=e,this.hasSeed=n}call(t,e){return e.subscribe(new Qg(t,this.accumulator,this.seed,this.hasSeed))}}class Qg extends f{constructor(t,e,n,s){super(t),this.accumulator=e,this._seed=n,this.hasSeed=s,this.index=0}get seed(){return this._seed}set seed(t){this.hasSeed=!0,this._seed=t}_next(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)}_tryNext(t){const e=this.index++;let n;try{n=this.accumulator(this.seed,t,e)}catch(s){this.destination.error(s)}this.seed=n,this.destination.next(n)}}function Wg(t){return function(e){const n=new Kg(t),s=e.lift(n);return n.caught=s}}class Kg{constructor(t){this.selector=t}call(t,e){return e.subscribe(new Gg(t,this.selector,this.caught))}}class Gg extends M{constructor(t,e,n){super(t),this.selector=e,this.caught=n}error(t){if(!this.isStopped){let n;try{n=this.selector(t,this.caught)}catch(e){return void super.error(e)}this._unsubscribeAndRecycle();const s=new V(this);this.add(s);const r=j(n,s);r!==s&&this.add(r)}}}function Zg(t,e){const n=arguments.length>=2;return s=>s.pipe(t?Xl((e,n)=>t(e,n,s)):y,Zf(1),n?Ug(e):Ng(()=>new Og))}class Yg{constructor(t){this.callback=t}call(t,e){return e.subscribe(new Xg(t,this.callback))}}class Xg extends f{constructor(t,e){super(t),this.add(new h(e))}}class Jg{constructor(t,e){this.id=t,this.url=e}}class ty extends Jg{constructor(t,e,n=\"imperative\",s=null){super(t,e),this.navigationTrigger=n,this.restoredState=s}toString(){return`NavigationStart(id: ${this.id}, url: '${this.url}')`}}class ey extends Jg{constructor(t,e,n){super(t,e),this.urlAfterRedirects=n}toString(){return`NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`}}class ny extends Jg{constructor(t,e,n){super(t,e),this.reason=n}toString(){return`NavigationCancel(id: ${this.id}, url: '${this.url}')`}}class sy extends Jg{constructor(t,e,n){super(t,e),this.error=n}toString(){return`NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`}}class ry extends Jg{constructor(t,e,n,s){super(t,e),this.urlAfterRedirects=n,this.state=s}toString(){return`RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class iy extends Jg{constructor(t,e,n,s){super(t,e),this.urlAfterRedirects=n,this.state=s}toString(){return`GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class oy extends Jg{constructor(t,e,n,s,r){super(t,e),this.urlAfterRedirects=n,this.state=s,this.shouldActivate=r}toString(){return`GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`}}class ay extends Jg{constructor(t,e,n,s){super(t,e),this.urlAfterRedirects=n,this.state=s}toString(){return`ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class ly extends Jg{constructor(t,e,n,s){super(t,e),this.urlAfterRedirects=n,this.state=s}toString(){return`ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class cy{constructor(t){this.route=t}toString(){return`RouteConfigLoadStart(path: ${this.route.path})`}}class uy{constructor(t){this.route=t}toString(){return`RouteConfigLoadEnd(path: ${this.route.path})`}}class hy{constructor(t){this.snapshot=t}toString(){return`ChildActivationStart(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||\"\"}')`}}class dy{constructor(t){this.snapshot=t}toString(){return`ChildActivationEnd(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||\"\"}')`}}class py{constructor(t){this.snapshot=t}toString(){return`ActivationStart(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||\"\"}')`}}class fy{constructor(t){this.snapshot=t}toString(){return`ActivationEnd(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||\"\"}')`}}class my{constructor(t,e,n){this.routerEvent=t,this.position=e,this.anchor=n}toString(){return`Scroll(anchor: '${this.anchor}', position: '${this.position?`${this.position[0]}, ${this.position[1]}`:null}')`}}const gy=\"primary\";class yy{constructor(t){this.params=t||{}}has(t){return Object.prototype.hasOwnProperty.call(this.params,t)}get(t){if(this.has(t)){const e=this.params[t];return Array.isArray(e)?e[0]:e}return null}getAll(t){if(this.has(t)){const e=this.params[t];return Array.isArray(e)?e:[e]}return[]}get keys(){return Object.keys(this.params)}}function _y(t){return new yy(t)}function vy(t){const e=Error(\"NavigationCancelingError: \"+t);return e.ngNavigationCancelingError=!0,e}function by(t,e,n){const s=n.path.split(\"/\");if(s.length>t.length)return null;if(\"full\"===n.pathMatch&&(e.hasChildren()||s.length<t.length))return null;const r={};for(let i=0;i<s.length;i++){const e=s[i],n=t[i];if(e.startsWith(\":\"))r[e.substring(1)]=n;else if(e!==n.path)return null}return{consumed:t.slice(0,s.length),posParams:r}}function wy(t,e){const n=Object.keys(t),s=Object.keys(e);if(!n||!s||n.length!=s.length)return!1;let r;for(let i=0;i<n.length;i++)if(r=n[i],!xy(t[r],e[r]))return!1;return!0}function xy(t,e){if(Array.isArray(t)&&Array.isArray(e)){if(t.length!==e.length)return!1;const n=[...t].sort(),s=[...e].sort();return n.every((t,e)=>s[e]===t)}return t===e}function Sy(t){return Array.prototype.concat.apply([],t)}function Cy(t){return t.length>0?t[t.length-1]:null}function Ey(t,e){for(const n in t)t.hasOwnProperty(n)&&e(t[n],n)}function ky(t){return Wi(t)?t:Qi(t)?N(Promise.resolve(t)):Zl(t)}function Ty(t,e,n){return n?function(t,e){return wy(t,e)}(t.queryParams,e.queryParams)&&Ay(t.root,e.root):function(t,e){return Object.keys(e).length<=Object.keys(t).length&&Object.keys(e).every(n=>xy(t[n],e[n]))}(t.queryParams,e.queryParams)&&Iy(t.root,e.root)}function Ay(t,e){if(!Dy(t.segments,e.segments))return!1;if(t.numberOfChildren!==e.numberOfChildren)return!1;for(const n in e.children){if(!t.children[n])return!1;if(!Ay(t.children[n],e.children[n]))return!1}return!0}function Iy(t,e){return Oy(t,e,e.segments)}function Oy(t,e,n){if(t.segments.length>n.length)return!!Dy(t.segments.slice(0,n.length),n)&&!e.hasChildren();if(t.segments.length===n.length){if(!Dy(t.segments,n))return!1;for(const n in e.children){if(!t.children[n])return!1;if(!Iy(t.children[n],e.children[n]))return!1}return!0}{const s=n.slice(0,t.segments.length),r=n.slice(t.segments.length);return!!Dy(t.segments,s)&&!!t.children.primary&&Oy(t.children.primary,e,r)}}class Ry{constructor(t,e,n){this.root=t,this.queryParams=e,this.fragment=n}get queryParamMap(){return this._queryParamMap||(this._queryParamMap=_y(this.queryParams)),this._queryParamMap}toString(){return My.serialize(this)}}class Py{constructor(t,e){this.segments=t,this.children=e,this.parent=null,Ey(e,(t,e)=>t.parent=this)}hasChildren(){return this.numberOfChildren>0}get numberOfChildren(){return Object.keys(this.children).length}toString(){return jy(this)}}class Ly{constructor(t,e){this.path=t,this.parameters=e}get parameterMap(){return this._parameterMap||(this._parameterMap=_y(this.parameters)),this._parameterMap}toString(){return Qy(this)}}function Dy(t,e){return t.length===e.length&&t.every((t,n)=>t.path===e[n].path)}function Fy(t,e){let n=[];return Ey(t.children,(t,s)=>{s===gy&&(n=n.concat(e(t,s)))}),Ey(t.children,(t,s)=>{s!==gy&&(n=n.concat(e(t,s)))}),n}class Ny{}class Vy{parse(t){const e=new Yy(t);return new Ry(e.parseRootSegment(),e.parseQueryParams(),e.parseFragment())}serialize(t){return`${\"/\"+Uy(t.root,!0)}${function(t){const e=Object.keys(t).map(e=>{const n=t[e];return Array.isArray(n)?n.map(t=>`${Hy(e)}=${Hy(t)}`).join(\"&\"):`${Hy(e)}=${Hy(n)}`});return e.length?\"?\"+e.join(\"&\"):\"\"}(t.queryParams)}${\"string\"==typeof t.fragment?\"#\"+encodeURI(t.fragment):\"\"}`}}const My=new Vy;function jy(t){return t.segments.map(t=>Qy(t)).join(\"/\")}function Uy(t,e){if(!t.hasChildren())return jy(t);if(e){const e=t.children.primary?Uy(t.children.primary,!1):\"\",n=[];return Ey(t.children,(t,e)=>{e!==gy&&n.push(`${e}:${Uy(t,!1)}`)}),n.length>0?`${e}(${n.join(\"//\")})`:e}{const e=Fy(t,(e,n)=>n===gy?[Uy(t.children.primary,!1)]:[`${n}:${Uy(e,!1)}`]);return 1===Object.keys(t.children).length&&null!=t.children.primary?`${jy(t)}/${e[0]}`:`${jy(t)}/(${e.join(\"//\")})`}}function By(t){return encodeURIComponent(t).replace(/%40/g,\"@\").replace(/%3A/gi,\":\").replace(/%24/g,\"$\").replace(/%2C/gi,\",\")}function Hy(t){return By(t).replace(/%3B/gi,\";\")}function zy(t){return By(t).replace(/\\(/g,\"%28\").replace(/\\)/g,\"%29\").replace(/%26/gi,\"&\")}function $y(t){return decodeURIComponent(t)}function qy(t){return $y(t.replace(/\\+/g,\"%20\"))}function Qy(t){return`${zy(t.path)}${e=t.parameters,Object.keys(e).map(t=>`;${zy(t)}=${zy(e[t])}`).join(\"\")}`;var e}const Wy=/^[^\\/()?;=#]+/;function Ky(t){const e=t.match(Wy);return e?e[0]:\"\"}const Gy=/^[^=?&#]+/,Zy=/^[^?&#]+/;class Yy{constructor(t){this.url=t,this.remaining=t}parseRootSegment(){return this.consumeOptional(\"/\"),\"\"===this.remaining||this.peekStartsWith(\"?\")||this.peekStartsWith(\"#\")?new Py([],{}):new Py([],this.parseChildren())}parseQueryParams(){const t={};if(this.consumeOptional(\"?\"))do{this.parseQueryParam(t)}while(this.consumeOptional(\"&\"));return t}parseFragment(){return this.consumeOptional(\"#\")?decodeURIComponent(this.remaining):null}parseChildren(){if(\"\"===this.remaining)return{};this.consumeOptional(\"/\");const t=[];for(this.peekStartsWith(\"(\")||t.push(this.parseSegment());this.peekStartsWith(\"/\")&&!this.peekStartsWith(\"//\")&&!this.peekStartsWith(\"/(\");)this.capture(\"/\"),t.push(this.parseSegment());let e={};this.peekStartsWith(\"/(\")&&(this.capture(\"/\"),e=this.parseParens(!0));let n={};return this.peekStartsWith(\"(\")&&(n=this.parseParens(!1)),(t.length>0||Object.keys(e).length>0)&&(n.primary=new Py(t,e)),n}parseSegment(){const t=Ky(this.remaining);if(\"\"===t&&this.peekStartsWith(\";\"))throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);return this.capture(t),new Ly($y(t),this.parseMatrixParams())}parseMatrixParams(){const t={};for(;this.consumeOptional(\";\");)this.parseParam(t);return t}parseParam(t){const e=Ky(this.remaining);if(!e)return;this.capture(e);let n=\"\";if(this.consumeOptional(\"=\")){const t=Ky(this.remaining);t&&(n=t,this.capture(n))}t[$y(e)]=$y(n)}parseQueryParam(t){const e=function(t){const e=t.match(Gy);return e?e[0]:\"\"}(this.remaining);if(!e)return;this.capture(e);let n=\"\";if(this.consumeOptional(\"=\")){const t=function(t){const e=t.match(Zy);return e?e[0]:\"\"}(this.remaining);t&&(n=t,this.capture(n))}const s=qy(e),r=qy(n);if(t.hasOwnProperty(s)){let e=t[s];Array.isArray(e)||(e=[e],t[s]=e),e.push(r)}else t[s]=r}parseParens(t){const e={};for(this.capture(\"(\");!this.consumeOptional(\")\")&&this.remaining.length>0;){const n=Ky(this.remaining),s=this.remaining[n.length];if(\"/\"!==s&&\")\"!==s&&\";\"!==s)throw new Error(`Cannot parse url '${this.url}'`);let r=void 0;n.indexOf(\":\")>-1?(r=n.substr(0,n.indexOf(\":\")),this.capture(r),this.capture(\":\")):t&&(r=gy);const i=this.parseChildren();e[r]=1===Object.keys(i).length?i.primary:new Py([],i),this.consumeOptional(\"//\")}return e}peekStartsWith(t){return this.remaining.startsWith(t)}consumeOptional(t){return!!this.peekStartsWith(t)&&(this.remaining=this.remaining.substring(t.length),!0)}capture(t){if(!this.consumeOptional(t))throw new Error(`Expected \"${t}\".`)}}class Xy{constructor(t){this._root=t}get root(){return this._root.value}parent(t){const e=this.pathFromRoot(t);return e.length>1?e[e.length-2]:null}children(t){const e=Jy(t,this._root);return e?e.children.map(t=>t.value):[]}firstChild(t){const e=Jy(t,this._root);return e&&e.children.length>0?e.children[0].value:null}siblings(t){const e=t_(t,this._root);return e.length<2?[]:e[e.length-2].children.map(t=>t.value).filter(e=>e!==t)}pathFromRoot(t){return t_(t,this._root).map(t=>t.value)}}function Jy(t,e){if(t===e.value)return e;for(const n of e.children){const e=Jy(t,n);if(e)return e}return null}function t_(t,e){if(t===e.value)return[e];for(const n of e.children){const s=t_(t,n);if(s.length)return s.unshift(e),s}return[]}class e_{constructor(t,e){this.value=t,this.children=e}toString(){return`TreeNode(${this.value})`}}function n_(t){const e={};return t&&t.children.forEach(t=>e[t.value.outlet]=t),e}class s_ extends Xy{constructor(t,e){super(t),this.snapshot=e,c_(this,t)}toString(){return this.snapshot.toString()}}function r_(t,e){const n=function(t,e){const n=new a_([],{},{},\"\",{},gy,e,null,t.root,-1,{});return new l_(\"\",new e_(n,[]))}(t,e),s=new Pf([new Ly(\"\",{})]),r=new Pf({}),i=new Pf({}),o=new Pf({}),a=new Pf(\"\"),l=new i_(s,r,o,a,i,gy,e,n.root);return l.snapshot=n.root,new s_(new e_(l,[]),n)}class i_{constructor(t,e,n,s,r,i,o,a){this.url=t,this.params=e,this.queryParams=n,this.fragment=s,this.data=r,this.outlet=i,this.component=o,this._futureSnapshot=a}get routeConfig(){return this._futureSnapshot.routeConfig}get root(){return this._routerState.root}get parent(){return this._routerState.parent(this)}get firstChild(){return this._routerState.firstChild(this)}get children(){return this._routerState.children(this)}get pathFromRoot(){return this._routerState.pathFromRoot(this)}get paramMap(){return this._paramMap||(this._paramMap=this.params.pipe(k(t=>_y(t)))),this._paramMap}get queryParamMap(){return this._queryParamMap||(this._queryParamMap=this.queryParams.pipe(k(t=>_y(t)))),this._queryParamMap}toString(){return this.snapshot?this.snapshot.toString():`Future(${this._futureSnapshot})`}}function o_(t,e=\"emptyOnly\"){const n=t.pathFromRoot;let s=0;if(\"always\"!==e)for(s=n.length-1;s>=1;){const t=n[s],e=n[s-1];if(t.routeConfig&&\"\"===t.routeConfig.path)s--;else{if(e.component)break;s--}}return function(t){return t.reduce((t,e)=>({params:Object.assign(Object.assign({},t.params),e.params),data:Object.assign(Object.assign({},t.data),e.data),resolve:Object.assign(Object.assign({},t.resolve),e._resolvedData)}),{params:{},data:{},resolve:{}})}(n.slice(s))}class a_{constructor(t,e,n,s,r,i,o,a,l,c,u){this.url=t,this.params=e,this.queryParams=n,this.fragment=s,this.data=r,this.outlet=i,this.component=o,this.routeConfig=a,this._urlSegment=l,this._lastPathIndex=c,this._resolve=u}get root(){return this._routerState.root}get parent(){return this._routerState.parent(this)}get firstChild(){return this._routerState.firstChild(this)}get children(){return this._routerState.children(this)}get pathFromRoot(){return this._routerState.pathFromRoot(this)}get paramMap(){return this._paramMap||(this._paramMap=_y(this.params)),this._paramMap}get queryParamMap(){return this._queryParamMap||(this._queryParamMap=_y(this.queryParams)),this._queryParamMap}toString(){return`Route(url:'${this.url.map(t=>t.toString()).join(\"/\")}', path:'${this.routeConfig?this.routeConfig.path:\"\"}')`}}class l_ extends Xy{constructor(t,e){super(e),this.url=t,c_(this,e)}toString(){return u_(this._root)}}function c_(t,e){e.value._routerState=t,e.children.forEach(e=>c_(t,e))}function u_(t){const e=t.children.length>0?` { ${t.children.map(u_).join(\", \")} } `:\"\";return`${t.value}${e}`}function h_(t){if(t.snapshot){const e=t.snapshot,n=t._futureSnapshot;t.snapshot=n,wy(e.queryParams,n.queryParams)||t.queryParams.next(n.queryParams),e.fragment!==n.fragment&&t.fragment.next(n.fragment),wy(e.params,n.params)||t.params.next(n.params),function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;++n)if(!wy(t[n],e[n]))return!1;return!0}(e.url,n.url)||t.url.next(n.url),wy(e.data,n.data)||t.data.next(n.data)}else t.snapshot=t._futureSnapshot,t.data.next(t._futureSnapshot.data)}function d_(t,e){var n,s;return wy(t.params,e.params)&&Dy(n=t.url,s=e.url)&&n.every((t,e)=>wy(t.parameters,s[e].parameters))&&!(!t.parent!=!e.parent)&&(!t.parent||d_(t.parent,e.parent))}function p_(t,e,n){if(n&&t.shouldReuseRoute(e.value,n.value.snapshot)){const s=n.value;s._futureSnapshot=e.value;const r=function(t,e,n){return e.children.map(e=>{for(const s of n.children)if(t.shouldReuseRoute(e.value,s.value.snapshot))return p_(t,e,s);return p_(t,e)})}(t,e,n);return new e_(s,r)}{const n=t.retrieve(e.value);if(n){const t=n.route;return f_(e,t),t}{const n=new i_(new Pf((s=e.value).url),new Pf(s.params),new Pf(s.queryParams),new Pf(s.fragment),new Pf(s.data),s.outlet,s.component,s),r=e.children.map(e=>p_(t,e));return new e_(n,r)}}var s}function f_(t,e){if(t.value.routeConfig!==e.value.routeConfig)throw new Error(\"Cannot reattach ActivatedRouteSnapshot created from a different route\");if(t.children.length!==e.children.length)throw new Error(\"Cannot reattach ActivatedRouteSnapshot with a different number of children\");e.value._futureSnapshot=t.value;for(let n=0;n<t.children.length;++n)f_(t.children[n],e.children[n])}function m_(t){return\"object\"==typeof t&&null!=t&&!t.outlets&&!t.segmentPath}function g_(t){return\"object\"==typeof t&&null!=t&&t.outlets}function y_(t,e,n,s,r){let i={};return s&&Ey(s,(t,e)=>{i[e]=Array.isArray(t)?t.map(t=>\"\"+t):\"\"+t}),new Ry(n.root===t?e:__(n.root,t,e),i,r)}function __(t,e,n){const s={};return Ey(t.children,(t,r)=>{s[r]=t===e?n:__(t,e,n)}),new Py(t.segments,s)}class v_{constructor(t,e,n){if(this.isAbsolute=t,this.numberOfDoubleDots=e,this.commands=n,t&&n.length>0&&m_(n[0]))throw new Error(\"Root segment cannot have matrix parameters\");const s=n.find(g_);if(s&&s!==Cy(n))throw new Error(\"{outlets:{}} has to be the last command\")}toRoot(){return this.isAbsolute&&1===this.commands.length&&\"/\"==this.commands[0]}}class b_{constructor(t,e,n){this.segmentGroup=t,this.processChildren=e,this.index=n}}function w_(t,e,n){if(t||(t=new Py([],{})),0===t.segments.length&&t.hasChildren())return x_(t,e,n);const s=function(t,e,n){let s=0,r=e;const i={match:!1,pathIndex:0,commandIndex:0};for(;r<t.segments.length;){if(s>=n.length)return i;const e=t.segments[r],o=n[s];if(g_(o))break;const a=\"\"+o,l=s<n.length-1?n[s+1]:null;if(r>0&&void 0===a)break;if(a&&l&&\"object\"==typeof l&&void 0===l.outlets){if(!k_(a,l,e))return i;s+=2}else{if(!k_(a,{},e))return i;s++}r++}return{match:!0,pathIndex:r,commandIndex:s}}(t,e,n),r=n.slice(s.commandIndex);if(s.match&&s.pathIndex<t.segments.length){const e=new Py(t.segments.slice(0,s.pathIndex),{});return e.children.primary=new Py(t.segments.slice(s.pathIndex),t.children),x_(e,0,r)}return s.match&&0===r.length?new Py(t.segments,{}):s.match&&!t.hasChildren()?S_(t,e,n):s.match?x_(t,0,r):S_(t,e,n)}function x_(t,e,n){if(0===n.length)return new Py(t.segments,{});{const s=function(t){return g_(t[0])?t[0].outlets:{[gy]:t}}(n),r={};return Ey(s,(n,s)=>{\"string\"==typeof n&&(n=[n]),null!==n&&(r[s]=w_(t.children[s],e,n))}),Ey(t.children,(t,e)=>{void 0===s[e]&&(r[e]=t)}),new Py(t.segments,r)}}function S_(t,e,n){const s=t.segments.slice(0,e);let r=0;for(;r<n.length;){const i=n[r];if(g_(i)){const t=C_(i.outlets);return new Py(s,t)}if(0===r&&m_(n[0])){s.push(new Ly(t.segments[e].path,n[0])),r++;continue}const o=g_(i)?i.outlets.primary:\"\"+i,a=r<n.length-1?n[r+1]:null;o&&a&&m_(a)?(s.push(new Ly(o,E_(a))),r+=2):(s.push(new Ly(o,{})),r++)}return new Py(s,{})}function C_(t){const e={};return Ey(t,(t,n)=>{\"string\"==typeof t&&(t=[t]),null!==t&&(e[n]=S_(new Py([],{}),0,t))}),e}function E_(t){const e={};return Ey(t,(t,n)=>e[n]=\"\"+t),e}function k_(t,e,n){return t==n.path&&wy(e,n.parameters)}class T_{constructor(t,e,n,s){this.routeReuseStrategy=t,this.futureState=e,this.currState=n,this.forwardEvent=s}activate(t){const e=this.futureState._root,n=this.currState?this.currState._root:null;this.deactivateChildRoutes(e,n,t),h_(this.futureState.root),this.activateChildRoutes(e,n,t)}deactivateChildRoutes(t,e,n){const s=n_(e);t.children.forEach(t=>{const e=t.value.outlet;this.deactivateRoutes(t,s[e],n),delete s[e]}),Ey(s,(t,e)=>{this.deactivateRouteAndItsChildren(t,n)})}deactivateRoutes(t,e,n){const s=t.value,r=e?e.value:null;if(s===r)if(s.component){const r=n.getContext(s.outlet);r&&this.deactivateChildRoutes(t,e,r.children)}else this.deactivateChildRoutes(t,e,n);else r&&this.deactivateRouteAndItsChildren(e,n)}deactivateRouteAndItsChildren(t,e){this.routeReuseStrategy.shouldDetach(t.value.snapshot)?this.detachAndStoreRouteSubtree(t,e):this.deactivateRouteAndOutlet(t,e)}detachAndStoreRouteSubtree(t,e){const n=e.getContext(t.value.outlet);if(n&&n.outlet){const e=n.outlet.detach(),s=n.children.onOutletDeactivated();this.routeReuseStrategy.store(t.value.snapshot,{componentRef:e,route:t,contexts:s})}}deactivateRouteAndOutlet(t,e){const n=e.getContext(t.value.outlet);if(n){const s=n_(t),r=t.value.component?n.children:e;Ey(s,(t,e)=>this.deactivateRouteAndItsChildren(t,r)),n.outlet&&(n.outlet.deactivate(),n.children.onOutletDeactivated())}}activateChildRoutes(t,e,n){const s=n_(e);t.children.forEach(t=>{this.activateRoutes(t,s[t.value.outlet],n),this.forwardEvent(new fy(t.value.snapshot))}),t.children.length&&this.forwardEvent(new dy(t.value.snapshot))}activateRoutes(t,e,n){const s=t.value,r=e?e.value:null;if(h_(s),s===r)if(s.component){const r=n.getOrCreateContext(s.outlet);this.activateChildRoutes(t,e,r.children)}else this.activateChildRoutes(t,e,n);else if(s.component){const e=n.getOrCreateContext(s.outlet);if(this.routeReuseStrategy.shouldAttach(s.snapshot)){const t=this.routeReuseStrategy.retrieve(s.snapshot);this.routeReuseStrategy.store(s.snapshot,null),e.children.onOutletReAttached(t.contexts),e.attachRef=t.componentRef,e.route=t.route.value,e.outlet&&e.outlet.attach(t.componentRef,t.route.value),A_(t.route)}else{const n=function(t){for(let e=t.parent;e;e=e.parent){const t=e.routeConfig;if(t&&t._loadedConfig)return t._loadedConfig;if(t&&t.component)return null}return null}(s.snapshot),r=n?n.module.componentFactoryResolver:null;e.attachRef=null,e.route=s,e.resolver=r,e.outlet&&e.outlet.activateWith(s,r),this.activateChildRoutes(t,null,e.children)}}else this.activateChildRoutes(t,null,n)}}function A_(t){h_(t.value),t.children.forEach(A_)}class I_{constructor(t,e){this.routes=t,this.module=e}}function O_(t){return\"function\"==typeof t}function R_(t){return t instanceof Ry}const P_=Symbol(\"INITIAL_VALUE\");function L_(){return Bf(t=>function(...t){let e=void 0,n=void 0;return E(t[t.length-1])&&(n=t.pop()),\"function\"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&l(t[0])&&(t=t[0]),$(t,n).lift(new Ag(e))}(...t.map(t=>t.pipe(Zf(1),$g(P_)))).pipe(function(t,e){let n=!1;return arguments.length>=2&&(n=!0),function(s){return s.lift(new qg(t,e,n))}}((t,e)=>{let n=!1;return e.reduce((t,s,r)=>{if(t!==P_)return t;if(s===P_&&(n=!0),!n){if(!1===s)return s;if(r===e.length-1||R_(s))return s}return t},t)},P_),Xl(t=>t!==P_),k(t=>R_(t)?t:!0===t),Zf(1)))}let D_=(()=>{class t{}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275cmp=Mt({type:t,selectors:[[\"ng-component\"]],decls:1,vars:0,template:function(t,e){1&t&&qi(0,\"router-outlet\")},directives:function(){return[Av]},encapsulation:2}),t})();function F_(t,e=\"\"){for(let n=0;n<t.length;n++){const s=t[n];N_(s,V_(e,s))}}function N_(t,e){t.children&&F_(t.children,e)}function V_(t,e){return e?t||e.path?t&&!e.path?t+\"/\":!t&&e.path?e.path:`${t}/${e.path}`:\"\":t}function M_(t){const e=t.children&&t.children.map(M_),n=e?Object.assign(Object.assign({},t),{children:e}):Object.assign({},t);return!n.component&&(e||n.loadChildren)&&n.outlet&&n.outlet!==gy&&(n.component=D_),n}function j_(t){return t.outlet||gy}class U_{constructor(t){this.segmentGroup=t||null}}class B_{constructor(t){this.urlTree=t}}function H_(t){return new _(e=>e.error(new U_(t)))}function z_(t){return new _(e=>e.error(new B_(t)))}function $_(t){return new _(e=>e.error(new Error(`Only absolute redirects can have named outlets. redirectTo: '${t}'`)))}class q_{constructor(t,e,n,s,r){this.configLoader=e,this.urlSerializer=n,this.urlTree=s,this.config=r,this.allowRedirects=!0,this.ngModule=t.get(ga)}apply(){return this.expandSegmentGroup(this.ngModule,this.config,this.urlTree.root,gy).pipe(k(t=>this.createUrlTree(t,this.urlTree.queryParams,this.urlTree.fragment))).pipe(Wg(t=>{if(t instanceof B_)return this.allowRedirects=!1,this.match(t.urlTree);if(t instanceof U_)throw this.noMatchError(t);throw t}))}match(t){return this.expandSegmentGroup(this.ngModule,this.config,t.root,gy).pipe(k(e=>this.createUrlTree(e,t.queryParams,t.fragment))).pipe(Wg(t=>{if(t instanceof U_)throw this.noMatchError(t);throw t}))}noMatchError(t){return new Error(`Cannot match any routes. URL Segment: '${t.segmentGroup}'`)}createUrlTree(t,e,n){const s=t.segments.length>0?new Py([],{[gy]:t}):t;return new Ry(s,e,n)}expandSegmentGroup(t,e,n,s){return 0===n.segments.length&&n.hasChildren()?this.expandChildren(t,e,n).pipe(k(t=>new Py([],t))):this.expandSegment(t,n,e,n.segments,s,!0)}expandChildren(t,e,n){return function(t,e){if(0===Object.keys(t).length)return Zl({});const n=[],s=[],r={};return Ey(t,(t,i)=>{const o=e(i,t).pipe(k(t=>r[i]=t));i===gy?n.push(o):s.push(o)}),Zl.apply(null,n.concat(s)).pipe(Pg(),function(t,e){const n=arguments.length>=2;return s=>s.pipe(t?Xl((e,n)=>t(e,n,s)):y,Lg(1),n?Ug(e):Ng(()=>new Og))}(),k(()=>r))}(n.children,(n,s)=>this.expandSegmentGroup(t,e,s,n))}expandSegment(t,e,n,s,r,i){const o=function(t){return t.reduce((t,e)=>{const n=j_(e);return t.has(n)?t.get(n).push(e):t.set(n,[e]),t},new Map)}(n);o.has(r)||o.set(r,[]);const a=n=>N(n).pipe(Yl(o=>this.expandSegmentAgainstRoute(t,e,n,o,s,r,i).pipe(Wg(t=>{if(t instanceof U_)return Zl(null);throw t}))),Zg(t=>null!==t),Wg(t=>{if(t instanceof Og||\"EmptyError\"===t.name){if(this.noLeftoversInUrl(e,s,r))return Zl(new Py([],{}));throw new U_(e)}throw t}));return N(Array.from(o.entries()).map(([t,e])=>{const n=a(e);return t===r?n:n.pipe(k(()=>null),Wg(()=>Zl(null)))})).pipe(t=>t.lift(new Ag(void 0)),Zg(),k(t=>t.find(t=>null!==t)))}noLeftoversInUrl(t,e,n){return 0===e.length&&!t.children[n]}expandSegmentAgainstRoute(t,e,n,s,r,i,o){return j_(s)!==i&&\"\"!==s.path?H_(e):void 0===s.redirectTo?this.matchSegmentAgainstRoute(t,e,s,r):o&&this.allowRedirects?this.expandSegmentAgainstRouteUsingRedirect(t,e,n,s,r,i):H_(e)}expandSegmentAgainstRouteUsingRedirect(t,e,n,s,r,i){return\"**\"===s.path?this.expandWildCardWithParamsAgainstRouteUsingRedirect(t,n,s,i):this.expandRegularSegmentAgainstRouteUsingRedirect(t,e,n,s,r,i)}expandWildCardWithParamsAgainstRouteUsingRedirect(t,e,n,s){const r=this.applyRedirectCommands([],n.redirectTo,{});return n.redirectTo.startsWith(\"/\")?z_(r):this.lineralizeSegments(n,r).pipe(U(n=>{const r=new Py(n,{});return this.expandSegment(t,r,e,n,s,!1)}))}expandRegularSegmentAgainstRouteUsingRedirect(t,e,n,s,r,i){const{matched:o,consumedSegments:a,lastChild:l,positionalParamSegments:c}=Q_(e,s,r);if(!o)return H_(e);const u=this.applyRedirectCommands(a,s.redirectTo,c);return s.redirectTo.startsWith(\"/\")?z_(u):this.lineralizeSegments(s,u).pipe(U(s=>this.expandSegment(t,e,n,s.concat(r.slice(l)),i,!1)))}matchSegmentAgainstRoute(t,e,n,s){if(\"**\"===n.path)return n.loadChildren?this.configLoader.load(t.injector,n).pipe(k(t=>(n._loadedConfig=t,new Py(s,{})))):Zl(new Py(s,{}));const{matched:r,consumedSegments:i,lastChild:o}=Q_(e,n,s);if(!r)return H_(e);const a=s.slice(o);return this.getChildConfig(t,n,s).pipe(U(t=>{const n=t.module,s=t.routes,{segmentGroup:r,slicedSegments:o}=function(t,e,n,s){return n.length>0&&function(t,e,n){return n.some(n=>K_(t,e,n)&&j_(n)!==gy)}(t,n,s)?{segmentGroup:W_(new Py(e,function(t,e){const n={};n.primary=e;for(const s of t)\"\"===s.path&&j_(s)!==gy&&(n[j_(s)]=new Py([],{}));return n}(s,new Py(n,t.children)))),slicedSegments:[]}:0===n.length&&function(t,e,n){return n.some(n=>K_(t,e,n))}(t,n,s)?{segmentGroup:W_(new Py(t.segments,function(t,e,n,s){const r={};for(const i of n)K_(t,e,i)&&!s[j_(i)]&&(r[j_(i)]=new Py([],{}));return Object.assign(Object.assign({},s),r)}(t,n,s,t.children))),slicedSegments:n}:{segmentGroup:t,slicedSegments:n}}(e,i,a,s);return 0===o.length&&r.hasChildren()?this.expandChildren(n,s,r).pipe(k(t=>new Py(i,t))):0===s.length&&0===o.length?Zl(new Py(i,{})):this.expandSegment(n,r,s,o,gy,!0).pipe(k(t=>new Py(i.concat(t.segments),t.children)))}))}getChildConfig(t,e,n){return e.children?Zl(new I_(e.children,t)):e.loadChildren?void 0!==e._loadedConfig?Zl(e._loadedConfig):this.runCanLoadGuards(t.injector,e,n).pipe(U(n=>n?this.configLoader.load(t.injector,e).pipe(k(t=>(e._loadedConfig=t,t))):function(t){return new _(e=>e.error(vy(`Cannot load children because the guard of the route \"path: '${t.path}'\" returned false`)))}(e))):Zl(new I_([],t))}runCanLoadGuards(t,e,n){const s=e.canLoad;return s&&0!==s.length?Zl(s.map(s=>{const r=t.get(s);let i;if(function(t){return t&&O_(t.canLoad)}(r))i=r.canLoad(e,n);else{if(!O_(r))throw new Error(\"Invalid CanLoad guard\");i=r(e,n)}return ky(i)})).pipe(L_(),tm(t=>{if(!R_(t))return;const e=vy(`Redirecting to \"${this.urlSerializer.serialize(t)}\"`);throw e.url=t,e}),k(t=>!0===t)):Zl(!0)}lineralizeSegments(t,e){let n=[],s=e.root;for(;;){if(n=n.concat(s.segments),0===s.numberOfChildren)return Zl(n);if(s.numberOfChildren>1||!s.children.primary)return $_(t.redirectTo);s=s.children.primary}}applyRedirectCommands(t,e,n){return this.applyRedirectCreatreUrlTree(e,this.urlSerializer.parse(e),t,n)}applyRedirectCreatreUrlTree(t,e,n,s){const r=this.createSegmentGroup(t,e.root,n,s);return new Ry(r,this.createQueryParams(e.queryParams,this.urlTree.queryParams),e.fragment)}createQueryParams(t,e){const n={};return Ey(t,(t,s)=>{if(\"string\"==typeof t&&t.startsWith(\":\")){const r=t.substring(1);n[s]=e[r]}else n[s]=t}),n}createSegmentGroup(t,e,n,s){const r=this.createSegments(t,e.segments,n,s);let i={};return Ey(e.children,(e,r)=>{i[r]=this.createSegmentGroup(t,e,n,s)}),new Py(r,i)}createSegments(t,e,n,s){return e.map(e=>e.path.startsWith(\":\")?this.findPosParam(t,e,s):this.findOrReturn(e,n))}findPosParam(t,e,n){const s=n[e.path.substring(1)];if(!s)throw new Error(`Cannot redirect to '${t}'. Cannot find '${e.path}'.`);return s}findOrReturn(t,e){let n=0;for(const s of e){if(s.path===t.path)return e.splice(n),s;n++}return t}}function Q_(t,e,n){if(\"\"===e.path)return\"full\"===e.pathMatch&&(t.hasChildren()||n.length>0)?{matched:!1,consumedSegments:[],lastChild:0,positionalParamSegments:{}}:{matched:!0,consumedSegments:[],lastChild:0,positionalParamSegments:{}};const s=(e.matcher||by)(n,t,e);return s?{matched:!0,consumedSegments:s.consumed,lastChild:s.consumed.length,positionalParamSegments:s.posParams}:{matched:!1,consumedSegments:[],lastChild:0,positionalParamSegments:{}}}function W_(t){if(1===t.numberOfChildren&&t.children.primary){const e=t.children.primary;return new Py(t.segments.concat(e.segments),e.children)}return t}function K_(t,e,n){return(!(t.hasChildren()||e.length>0)||\"full\"!==n.pathMatch)&&\"\"===n.path&&void 0!==n.redirectTo}class G_{constructor(t){this.path=t,this.route=this.path[this.path.length-1]}}class Z_{constructor(t,e){this.component=t,this.route=e}}function Y_(t,e,n){const s=t._root;return J_(s,e?e._root:null,n,[s.value])}function X_(t,e,n){const s=function(t){if(!t)return null;for(let e=t.parent;e;e=e.parent){const t=e.routeConfig;if(t&&t._loadedConfig)return t._loadedConfig}return null}(e);return(s?s.module.injector:n).get(t)}function J_(t,e,n,s,r={canDeactivateChecks:[],canActivateChecks:[]}){const i=n_(e);return t.children.forEach(t=>{!function(t,e,n,s,r={canDeactivateChecks:[],canActivateChecks:[]}){const i=t.value,o=e?e.value:null,a=n?n.getContext(t.value.outlet):null;if(o&&i.routeConfig===o.routeConfig){const l=function(t,e,n){if(\"function\"==typeof n)return n(t,e);switch(n){case\"pathParamsChange\":return!Dy(t.url,e.url);case\"pathParamsOrQueryParamsChange\":return!Dy(t.url,e.url)||!wy(t.queryParams,e.queryParams);case\"always\":return!0;case\"paramsOrQueryParamsChange\":return!d_(t,e)||!wy(t.queryParams,e.queryParams);case\"paramsChange\":default:return!d_(t,e)}}(o,i,i.routeConfig.runGuardsAndResolvers);l?r.canActivateChecks.push(new G_(s)):(i.data=o.data,i._resolvedData=o._resolvedData),J_(t,e,i.component?a?a.children:null:n,s,r),l&&a&&a.outlet&&a.outlet.isActivated&&r.canDeactivateChecks.push(new Z_(a.outlet.component,o))}else o&&tv(e,a,r),r.canActivateChecks.push(new G_(s)),J_(t,null,i.component?a?a.children:null:n,s,r)}(t,i[t.value.outlet],n,s.concat([t.value]),r),delete i[t.value.outlet]}),Ey(i,(t,e)=>tv(t,n.getContext(e),r)),r}function tv(t,e,n){const s=n_(t),r=t.value;Ey(s,(t,s)=>{tv(t,r.component?e?e.children.getContext(s):null:e,n)}),n.canDeactivateChecks.push(new Z_(r.component&&e&&e.outlet&&e.outlet.isActivated?e.outlet.component:null,r))}function ev(t,e){return null!==t&&e&&e(new py(t)),Zl(!0)}function nv(t,e){return null!==t&&e&&e(new hy(t)),Zl(!0)}function sv(t,e,n){const s=e.routeConfig?e.routeConfig.canActivate:null;return s&&0!==s.length?Zl(s.map(s=>Rg(()=>{const r=X_(s,e,n);let i;if(function(t){return t&&O_(t.canActivate)}(r))i=ky(r.canActivate(e,t));else{if(!O_(r))throw new Error(\"Invalid CanActivate guard\");i=ky(r(e,t))}return i.pipe(Zg())}))).pipe(L_()):Zl(!0)}function rv(t,e,n){const s=e[e.length-1],r=e.slice(0,e.length-1).reverse().map(t=>function(t){const e=t.routeConfig?t.routeConfig.canActivateChild:null;return e&&0!==e.length?{node:t,guards:e}:null}(t)).filter(t=>null!==t).map(e=>Rg(()=>Zl(e.guards.map(r=>{const i=X_(r,e.node,n);let o;if(function(t){return t&&O_(t.canActivateChild)}(i))o=ky(i.canActivateChild(s,t));else{if(!O_(i))throw new Error(\"Invalid CanActivateChild guard\");o=ky(i(s,t))}return o.pipe(Zg())})).pipe(L_())));return Zl(r).pipe(L_())}class iv{}class ov{constructor(t,e,n,s,r,i){this.rootComponentType=t,this.config=e,this.urlTree=n,this.url=s,this.paramsInheritanceStrategy=r,this.relativeLinkResolution=i}recognize(){try{const t=cv(this.urlTree.root,[],[],this.config,this.relativeLinkResolution).segmentGroup,e=this.processSegmentGroup(this.config,t,gy),n=new a_([],Object.freeze({}),Object.freeze(Object.assign({},this.urlTree.queryParams)),this.urlTree.fragment,{},gy,this.rootComponentType,null,this.urlTree.root,-1,{}),s=new e_(n,e),r=new l_(this.url,s);return this.inheritParamsAndData(r._root),Zl(r)}catch(t){return new _(e=>e.error(t))}}inheritParamsAndData(t){const e=t.value,n=o_(e,this.paramsInheritanceStrategy);e.params=Object.freeze(n.params),e.data=Object.freeze(n.data),t.children.forEach(t=>this.inheritParamsAndData(t))}processSegmentGroup(t,e,n){return 0===e.segments.length&&e.hasChildren()?this.processChildren(t,e):this.processSegment(t,e,e.segments,n)}processChildren(t,e){const n=Fy(e,(e,n)=>this.processSegmentGroup(t,e,n));return function(t){const e={};t.forEach(t=>{const n=e[t.value.outlet];if(n){const e=n.url.map(t=>t.toString()).join(\"/\"),s=t.value.url.map(t=>t.toString()).join(\"/\");throw new Error(`Two segments cannot have the same outlet name: '${e}' and '${s}'.`)}e[t.value.outlet]=t.value})}(n),n.sort((t,e)=>t.value.outlet===gy?-1:e.value.outlet===gy?1:t.value.outlet.localeCompare(e.value.outlet)),n}processSegment(t,e,n,s){for(const i of t)try{return this.processSegmentAgainstRoute(i,e,n,s)}catch(r){if(!(r instanceof iv))throw r}if(this.noLeftoversInUrl(e,n,s))return[];throw new iv}noLeftoversInUrl(t,e,n){return 0===e.length&&!t.children[n]}processSegmentAgainstRoute(t,e,n,s){if(t.redirectTo)throw new iv;if((t.outlet||gy)!==s)throw new iv;let r,i=[],o=[];if(\"**\"===t.path){const i=n.length>0?Cy(n).parameters:{};r=new a_(n,i,Object.freeze(Object.assign({},this.urlTree.queryParams)),this.urlTree.fragment,hv(t),s,t.component,t,av(e),lv(e)+n.length,dv(t))}else{const a=function(t,e,n){if(\"\"===e.path){if(\"full\"===e.pathMatch&&(t.hasChildren()||n.length>0))throw new iv;return{consumedSegments:[],lastChild:0,parameters:{}}}const s=(e.matcher||by)(n,t,e);if(!s)throw new iv;const r={};Ey(s.posParams,(t,e)=>{r[e]=t.path});const i=s.consumed.length>0?Object.assign(Object.assign({},r),s.consumed[s.consumed.length-1].parameters):r;return{consumedSegments:s.consumed,lastChild:s.consumed.length,parameters:i}}(e,t,n);i=a.consumedSegments,o=n.slice(a.lastChild),r=new a_(i,a.parameters,Object.freeze(Object.assign({},this.urlTree.queryParams)),this.urlTree.fragment,hv(t),s,t.component,t,av(e),lv(e)+i.length,dv(t))}const a=function(t){return t.children?t.children:t.loadChildren?t._loadedConfig.routes:[]}(t),{segmentGroup:l,slicedSegments:c}=cv(e,i,o,a,this.relativeLinkResolution);if(0===c.length&&l.hasChildren()){const t=this.processChildren(a,l);return[new e_(r,t)]}if(0===a.length&&0===c.length)return[new e_(r,[])];const u=this.processSegment(a,l,c,gy);return[new e_(r,u)]}}function av(t){let e=t;for(;e._sourceSegment;)e=e._sourceSegment;return e}function lv(t){let e=t,n=e._segmentIndexShift?e._segmentIndexShift:0;for(;e._sourceSegment;)e=e._sourceSegment,n+=e._segmentIndexShift?e._segmentIndexShift:0;return n-1}function cv(t,e,n,s,r){if(n.length>0&&function(t,e,n){return n.some(n=>uv(t,e,n)&&j_(n)!==gy)}(t,n,s)){const r=new Py(e,function(t,e,n,s){const r={};r.primary=s,s._sourceSegment=t,s._segmentIndexShift=e.length;for(const i of n)if(\"\"===i.path&&j_(i)!==gy){const n=new Py([],{});n._sourceSegment=t,n._segmentIndexShift=e.length,r[j_(i)]=n}return r}(t,e,s,new Py(n,t.children)));return r._sourceSegment=t,r._segmentIndexShift=e.length,{segmentGroup:r,slicedSegments:[]}}if(0===n.length&&function(t,e,n){return n.some(n=>uv(t,e,n))}(t,n,s)){const i=new Py(t.segments,function(t,e,n,s,r,i){const o={};for(const a of s)if(uv(t,n,a)&&!r[j_(a)]){const n=new Py([],{});n._sourceSegment=t,n._segmentIndexShift=\"legacy\"===i?t.segments.length:e.length,o[j_(a)]=n}return Object.assign(Object.assign({},r),o)}(t,e,n,s,t.children,r));return i._sourceSegment=t,i._segmentIndexShift=e.length,{segmentGroup:i,slicedSegments:n}}const i=new Py(t.segments,t.children);return i._sourceSegment=t,i._segmentIndexShift=e.length,{segmentGroup:i,slicedSegments:n}}function uv(t,e,n){return(!(t.hasChildren()||e.length>0)||\"full\"!==n.pathMatch)&&\"\"===n.path&&void 0===n.redirectTo}function hv(t){return t.data||{}}function dv(t){return t.resolve||{}}function pv(t){return function(e){return e.pipe(Bf(e=>{const n=t(e);return n?N(n).pipe(k(()=>e)):N([e])}))}}class fv extends class{shouldDetach(t){return!1}store(t,e){}shouldAttach(t){return!1}retrieve(t){return null}shouldReuseRoute(t,e){return t.routeConfig===e.routeConfig}}{}const mv=new $n(\"ROUTES\");class gv{constructor(t,e,n,s){this.loader=t,this.compiler=e,this.onLoadStartListener=n,this.onLoadEndListener=s}load(t,e){return this.onLoadStartListener&&this.onLoadStartListener(e),this.loadModuleFactory(e.loadChildren).pipe(k(n=>{this.onLoadEndListener&&this.onLoadEndListener(e);const s=n.create(t);return new I_(Sy(s.injector.get(mv)).map(M_),s)}))}loadModuleFactory(t){return\"string\"==typeof t?N(this.loader.load(t)):ky(t()).pipe(U(t=>t instanceof ya?Zl(t):N(this.compiler.compileModuleAsync(t))))}}class yv{constructor(){this.outlet=null,this.route=null,this.resolver=null,this.children=new _v,this.attachRef=null}}class _v{constructor(){this.contexts=new Map}onChildOutletCreated(t,e){const n=this.getOrCreateContext(t);n.outlet=e,this.contexts.set(t,n)}onChildOutletDestroyed(t){const e=this.getContext(t);e&&(e.outlet=null)}onOutletDeactivated(){const t=this.contexts;return this.contexts=new Map,t}onOutletReAttached(t){this.contexts=t}getOrCreateContext(t){let e=this.getContext(t);return e||(e=new yv,this.contexts.set(t,e)),e}getContext(t){return this.contexts.get(t)||null}}class vv{shouldProcessUrl(t){return!0}extract(t){return t}merge(t,e){return t}}function bv(t){throw t}function wv(t,e,n){return e.parse(\"/\")}function xv(t,e){return Zl(null)}let Sv=(()=>{class t{constructor(t,e,n,s,r,i,o,a){this.rootComponentType=t,this.urlSerializer=e,this.rootContexts=n,this.location=s,this.config=a,this.lastSuccessfulNavigation=null,this.currentNavigation=null,this.lastLocationChangeInfo=null,this.navigationId=0,this.isNgZoneEnabled=!1,this.events=new S,this.errorHandler=bv,this.malformedUriErrorHandler=wv,this.navigated=!1,this.lastSuccessfulId=-1,this.hooks={beforePreactivation:xv,afterPreactivation:xv},this.urlHandlingStrategy=new vv,this.routeReuseStrategy=new fv,this.onSameUrlNavigation=\"ignore\",this.paramsInheritanceStrategy=\"emptyOnly\",this.urlUpdateStrategy=\"deferred\",this.relativeLinkResolution=\"corrected\",this.ngModule=r.get(ga),this.console=r.get(ol);const l=r.get(vl);this.isNgZoneEnabled=l instanceof vl,this.resetConfig(a),this.currentUrlTree=new Ry(new Py([],{}),{},null),this.rawUrlTree=this.currentUrlTree,this.browserUrlTree=this.currentUrlTree,this.configLoader=new gv(i,o,t=>this.triggerEvent(new cy(t)),t=>this.triggerEvent(new uy(t))),this.routerState=r_(this.currentUrlTree,this.rootComponentType),this.transitions=new Pf({id:0,currentUrlTree:this.currentUrlTree,currentRawUrl:this.currentUrlTree,extractedUrl:this.urlHandlingStrategy.extract(this.currentUrlTree),urlAfterRedirects:this.urlHandlingStrategy.extract(this.currentUrlTree),rawUrl:this.currentUrlTree,extras:{},resolve:null,reject:null,promise:Promise.resolve(!0),source:\"imperative\",restoredState:null,currentSnapshot:this.routerState.snapshot,targetSnapshot:null,currentRouterState:this.routerState,targetRouterState:null,guards:{canActivateChecks:[],canDeactivateChecks:[]},guardsResult:null}),this.navigations=this.setupNavigations(this.transitions),this.processNavigations()}setupNavigations(t){const e=this.events;return t.pipe(Xl(t=>0!==t.id),k(t=>Object.assign(Object.assign({},t),{extractedUrl:this.urlHandlingStrategy.extract(t.rawUrl)})),Bf(t=>{let n=!1,s=!1;return Zl(t).pipe(tm(t=>{this.currentNavigation={id:t.id,initialUrl:t.currentRawUrl,extractedUrl:t.extractedUrl,trigger:t.source,extras:t.extras,previousNavigation:this.lastSuccessfulNavigation?Object.assign(Object.assign({},this.lastSuccessfulNavigation),{previousNavigation:null}):null}}),Bf(t=>{const n=!this.navigated||t.extractedUrl.toString()!==this.browserUrlTree.toString();if((\"reload\"===this.onSameUrlNavigation||n)&&this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl))return Zl(t).pipe(Bf(t=>{const n=this.transitions.getValue();return e.next(new ty(t.id,this.serializeUrl(t.extractedUrl),t.source,t.restoredState)),n!==this.transitions.getValue()?Kf:[t]}),Bf(t=>Promise.resolve(t)),(s=this.ngModule.injector,r=this.configLoader,i=this.urlSerializer,o=this.config,function(t){return t.pipe(Bf(t=>function(t,e,n,s,r){return new q_(t,e,n,s,r).apply()}(s,r,i,t.extractedUrl,o).pipe(k(e=>Object.assign(Object.assign({},t),{urlAfterRedirects:e})))))}),tm(t=>{this.currentNavigation=Object.assign(Object.assign({},this.currentNavigation),{finalUrl:t.urlAfterRedirects})}),function(t,e,n,s,r){return function(i){return i.pipe(U(i=>function(t,e,n,s,r=\"emptyOnly\",i=\"legacy\"){return new ov(t,e,n,s,r,i).recognize()}(t,e,i.urlAfterRedirects,n(i.urlAfterRedirects),s,r).pipe(k(t=>Object.assign(Object.assign({},i),{targetSnapshot:t})))))}}(this.rootComponentType,this.config,t=>this.serializeUrl(t),this.paramsInheritanceStrategy,this.relativeLinkResolution),tm(t=>{\"eager\"===this.urlUpdateStrategy&&(t.extras.skipLocationChange||this.setBrowserUrl(t.urlAfterRedirects,!!t.extras.replaceUrl,t.id,t.extras.state),this.browserUrlTree=t.urlAfterRedirects)}),tm(t=>{const n=new ry(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(t.urlAfterRedirects),t.targetSnapshot);e.next(n)}));var s,r,i,o;if(n&&this.rawUrlTree&&this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)){const{id:n,extractedUrl:s,source:r,restoredState:i,extras:o}=t,a=new ty(n,this.serializeUrl(s),r,i);e.next(a);const l=r_(s,this.rootComponentType).snapshot;return Zl(Object.assign(Object.assign({},t),{targetSnapshot:l,urlAfterRedirects:s,extras:Object.assign(Object.assign({},o),{skipLocationChange:!1,replaceUrl:!1})}))}return this.rawUrlTree=t.rawUrl,this.browserUrlTree=t.urlAfterRedirects,t.resolve(null),Kf}),pv(t=>{const{targetSnapshot:e,id:n,extractedUrl:s,rawUrl:r,extras:{skipLocationChange:i,replaceUrl:o}}=t;return this.hooks.beforePreactivation(e,{navigationId:n,appliedUrlTree:s,rawUrlTree:r,skipLocationChange:!!i,replaceUrl:!!o})}),tm(t=>{const e=new iy(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(t.urlAfterRedirects),t.targetSnapshot);this.triggerEvent(e)}),k(t=>Object.assign(Object.assign({},t),{guards:Y_(t.targetSnapshot,t.currentSnapshot,this.rootContexts)})),function(t,e){return function(n){return n.pipe(U(n=>{const{targetSnapshot:s,currentSnapshot:r,guards:{canActivateChecks:i,canDeactivateChecks:o}}=n;return 0===o.length&&0===i.length?Zl(Object.assign(Object.assign({},n),{guardsResult:!0})):function(t,e,n,s){return N(t).pipe(U(t=>function(t,e,n,s,r){const i=e&&e.routeConfig?e.routeConfig.canDeactivate:null;return i&&0!==i.length?Zl(i.map(i=>{const o=X_(i,e,r);let a;if(function(t){return t&&O_(t.canDeactivate)}(o))a=ky(o.canDeactivate(t,e,n,s));else{if(!O_(o))throw new Error(\"Invalid CanDeactivate guard\");a=ky(o(t,e,n,s))}return a.pipe(Zg())})).pipe(L_()):Zl(!0)}(t.component,t.route,n,e,s)),Zg(t=>!0!==t,!0))}(o,s,r,t).pipe(U(n=>n&&\"boolean\"==typeof n?function(t,e,n,s){return N(e).pipe(Yl(e=>N([nv(e.route.parent,s),ev(e.route,s),rv(t,e.path,n),sv(t,e.route,n)]).pipe(Pg(),Zg(t=>!0!==t,!0))),Zg(t=>!0!==t,!0))}(s,i,t,e):Zl(n)),k(t=>Object.assign(Object.assign({},n),{guardsResult:t})))}))}}(this.ngModule.injector,t=>this.triggerEvent(t)),tm(t=>{if(R_(t.guardsResult)){const e=vy(`Redirecting to \"${this.serializeUrl(t.guardsResult)}\"`);throw e.url=t.guardsResult,e}}),tm(t=>{const e=new oy(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(t.urlAfterRedirects),t.targetSnapshot,!!t.guardsResult);this.triggerEvent(e)}),Xl(t=>{if(!t.guardsResult){this.resetUrlToCurrentUrlTree();const n=new ny(t.id,this.serializeUrl(t.extractedUrl),\"\");return e.next(n),t.resolve(!1),!1}return!0}),pv(t=>{if(t.guards.canActivateChecks.length)return Zl(t).pipe(tm(t=>{const e=new ay(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(t.urlAfterRedirects),t.targetSnapshot);this.triggerEvent(e)}),Bf(t=>{let n=!1;return Zl(t).pipe((s=this.paramsInheritanceStrategy,r=this.ngModule.injector,function(t){return t.pipe(U(t=>{const{targetSnapshot:e,guards:{canActivateChecks:n}}=t;if(!n.length)return Zl(t);let i=0;return N(n).pipe(Yl(t=>function(t,e,n,s){return function(t,e,n,s){const r=Object.keys(t);if(0===r.length)return Zl({});const i={};return N(r).pipe(U(r=>function(t,e,n,s){const r=X_(t,e,s);return ky(r.resolve?r.resolve(e,n):r(e,n))}(t[r],e,n,s).pipe(tm(t=>{i[r]=t}))),Lg(1),U(()=>Object.keys(i).length===r.length?Zl(i):Kf))}(t._resolve,t,e,s).pipe(k(e=>(t._resolvedData=e,t.data=Object.assign(Object.assign({},t.data),o_(t,n).resolve),null)))}(t.route,e,s,r)),tm(()=>i++),Lg(1),U(e=>i===n.length?Zl(t):Kf))}))}),tm({next:()=>n=!0,complete:()=>{if(!n){const n=new ny(t.id,this.serializeUrl(t.extractedUrl),\"At least one route resolver didn't emit any value.\");e.next(n),t.resolve(!1)}}}));var s,r}),tm(t=>{const e=new ly(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(t.urlAfterRedirects),t.targetSnapshot);this.triggerEvent(e)}))}),pv(t=>{const{targetSnapshot:e,id:n,extractedUrl:s,rawUrl:r,extras:{skipLocationChange:i,replaceUrl:o}}=t;return this.hooks.afterPreactivation(e,{navigationId:n,appliedUrlTree:s,rawUrlTree:r,skipLocationChange:!!i,replaceUrl:!!o})}),k(t=>{const e=function(t,e,n){const s=p_(t,e._root,n?n._root:void 0);return new s_(s,e)}(this.routeReuseStrategy,t.targetSnapshot,t.currentRouterState);return Object.assign(Object.assign({},t),{targetRouterState:e})}),tm(t=>{this.currentUrlTree=t.urlAfterRedirects,this.rawUrlTree=this.urlHandlingStrategy.merge(this.currentUrlTree,t.rawUrl),this.routerState=t.targetRouterState,\"deferred\"===this.urlUpdateStrategy&&(t.extras.skipLocationChange||this.setBrowserUrl(this.rawUrlTree,!!t.extras.replaceUrl,t.id,t.extras.state),this.browserUrlTree=t.urlAfterRedirects)}),(i=this.rootContexts,o=this.routeReuseStrategy,a=t=>this.triggerEvent(t),k(t=>(new T_(o,t.targetRouterState,t.currentRouterState,a).activate(i),t))),tm({next(){n=!0},complete(){n=!0}}),(r=()=>{if(!n&&!s){this.resetUrlToCurrentUrlTree();const n=new ny(t.id,this.serializeUrl(t.extractedUrl),`Navigation ID ${t.id} is not equal to the current navigation id ${this.navigationId}`);e.next(n),t.resolve(!1)}this.currentNavigation=null},t=>t.lift(new Yg(r))),Wg(n=>{if(s=!0,(r=n)&&r.ngNavigationCancelingError){const s=R_(n.url);s||(this.navigated=!0,this.resetStateAndUrl(t.currentRouterState,t.currentUrlTree,t.rawUrl));const r=new ny(t.id,this.serializeUrl(t.extractedUrl),n.message);e.next(r),s?setTimeout(()=>{const e=this.urlHandlingStrategy.merge(n.url,this.rawUrlTree);return this.scheduleNavigation(e,\"imperative\",null,{skipLocationChange:t.extras.skipLocationChange,replaceUrl:\"eager\"===this.urlUpdateStrategy},{resolve:t.resolve,reject:t.reject,promise:t.promise})},0):t.resolve(!1)}else{this.resetStateAndUrl(t.currentRouterState,t.currentUrlTree,t.rawUrl);const s=new sy(t.id,this.serializeUrl(t.extractedUrl),n);e.next(s);try{t.resolve(this.errorHandler(n))}catch(i){t.reject(i)}}var r;return Kf}));var r,i,o,a}))}resetRootComponentType(t){this.rootComponentType=t,this.routerState.root.component=this.rootComponentType}getTransition(){const t=this.transitions.value;return t.urlAfterRedirects=this.browserUrlTree,t}setTransition(t){this.transitions.next(Object.assign(Object.assign({},this.getTransition()),t))}initialNavigation(){this.setUpLocationChangeListener(),0===this.navigationId&&this.navigateByUrl(this.location.path(!0),{replaceUrl:!0})}setUpLocationChangeListener(){this.locationSubscription||(this.locationSubscription=this.location.subscribe(t=>{const e=this.extractLocationChangeInfoFromEvent(t);this.shouldScheduleNavigation(this.lastLocationChangeInfo,e)&&setTimeout(()=>{const{source:t,state:n,urlTree:s}=e,r={replaceUrl:!0};if(n){const t=Object.assign({},n);delete t.navigationId,0!==Object.keys(t).length&&(r.state=t)}this.scheduleNavigation(s,t,n,r)},0),this.lastLocationChangeInfo=e}))}extractLocationChangeInfoFromEvent(t){var e;return{source:\"popstate\"===t.type?\"popstate\":\"hashchange\",urlTree:this.parseUrl(t.url),state:(null===(e=t.state)||void 0===e?void 0:e.navigationId)?t.state:null,transitionId:this.getTransition().id}}shouldScheduleNavigation(t,e){if(!t)return!0;const n=e.urlTree.toString()===t.urlTree.toString();return!(e.transitionId===t.transitionId&&n&&(\"hashchange\"===e.source&&\"popstate\"===t.source||\"popstate\"===e.source&&\"hashchange\"===t.source))}get url(){return this.serializeUrl(this.currentUrlTree)}getCurrentNavigation(){return this.currentNavigation}triggerEvent(t){this.events.next(t)}resetConfig(t){F_(t),this.config=t.map(M_),this.navigated=!1,this.lastSuccessfulId=-1}ngOnDestroy(){this.dispose()}dispose(){this.locationSubscription&&(this.locationSubscription.unsubscribe(),this.locationSubscription=void 0)}createUrlTree(t,e={}){const{relativeTo:n,queryParams:s,fragment:r,queryParamsHandling:i,preserveFragment:o}=e,a=n||this.routerState.root,l=o?this.currentUrlTree.fragment:r;let c=null;switch(i){case\"merge\":c=Object.assign(Object.assign({},this.currentUrlTree.queryParams),s);break;case\"preserve\":c=this.currentUrlTree.queryParams;break;default:c=s||null}return null!==c&&(c=this.removeEmptyProps(c)),function(t,e,n,s,r){if(0===n.length)return y_(e.root,e.root,e,s,r);const i=function(t){if(\"string\"==typeof t[0]&&1===t.length&&\"/\"===t[0])return new v_(!0,0,t);let e=0,n=!1;const s=t.reduce((t,s,r)=>{if(\"object\"==typeof s&&null!=s){if(s.outlets){const e={};return Ey(s.outlets,(t,n)=>{e[n]=\"string\"==typeof t?t.split(\"/\"):t}),[...t,{outlets:e}]}if(s.segmentPath)return[...t,s.segmentPath]}return\"string\"!=typeof s?[...t,s]:0===r?(s.split(\"/\").forEach((s,r)=>{0==r&&\".\"===s||(0==r&&\"\"===s?n=!0:\"..\"===s?e++:\"\"!=s&&t.push(s))}),t):[...t,s]},[]);return new v_(n,e,s)}(n);if(i.toRoot())return y_(e.root,new Py([],{}),e,s,r);const o=function(t,e,n){if(t.isAbsolute)return new b_(e.root,!0,0);if(-1===n.snapshot._lastPathIndex){const t=n.snapshot._urlSegment;return new b_(t,t===e.root,0)}const s=m_(t.commands[0])?0:1;return function(t,e,n){let s=t,r=e,i=n;for(;i>r;){if(i-=r,s=s.parent,!s)throw new Error(\"Invalid number of '../'\");r=s.segments.length}return new b_(s,!1,r-i)}(n.snapshot._urlSegment,n.snapshot._lastPathIndex+s,t.numberOfDoubleDots)}(i,e,t),a=o.processChildren?x_(o.segmentGroup,o.index,i.commands):w_(o.segmentGroup,o.index,i.commands);return y_(o.segmentGroup,a,e,s,r)}(a,this.currentUrlTree,t,c,l)}navigateByUrl(t,e={skipLocationChange:!1}){const n=R_(t)?t:this.parseUrl(t),s=this.urlHandlingStrategy.merge(n,this.rawUrlTree);return this.scheduleNavigation(s,\"imperative\",null,e)}navigate(t,e={skipLocationChange:!1}){return function(t){for(let e=0;e<t.length;e++){const n=t[e];if(null==n)throw new Error(`The requested path contains ${n} segment at index ${e}`)}}(t),this.navigateByUrl(this.createUrlTree(t,e),e)}serializeUrl(t){return this.urlSerializer.serialize(t)}parseUrl(t){let e;try{e=this.urlSerializer.parse(t)}catch(n){e=this.malformedUriErrorHandler(n,this.urlSerializer,t)}return e}isActive(t,e){if(R_(t))return Ty(this.currentUrlTree,t,e);const n=this.parseUrl(t);return Ty(this.currentUrlTree,n,e)}removeEmptyProps(t){return Object.keys(t).reduce((e,n)=>{const s=t[n];return null!=s&&(e[n]=s),e},{})}processNavigations(){this.navigations.subscribe(t=>{this.navigated=!0,this.lastSuccessfulId=t.id,this.events.next(new ey(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(this.currentUrlTree))),this.lastSuccessfulNavigation=this.currentNavigation,this.currentNavigation=null,t.resolve(!0)},t=>{this.console.warn(\"Unhandled Navigation Error: \")})}scheduleNavigation(t,e,n,s,r){const i=this.getTransition(),o=\"imperative\"!==e&&\"imperative\"===(null==i?void 0:i.source),a=(this.lastSuccessfulId===i.id||this.currentNavigation?i.rawUrl:i.urlAfterRedirects).toString()===t.toString();if(o&&a)return Promise.resolve(!0);let l,c,u;r?(l=r.resolve,c=r.reject,u=r.promise):u=new Promise((t,e)=>{l=t,c=e});const h=++this.navigationId;return this.setTransition({id:h,source:e,restoredState:n,currentUrlTree:this.currentUrlTree,currentRawUrl:this.rawUrlTree,rawUrl:t,extras:s,resolve:l,reject:c,promise:u,currentSnapshot:this.routerState.snapshot,currentRouterState:this.routerState}),u.catch(t=>Promise.reject(t))}setBrowserUrl(t,e,n,s){const r=this.urlSerializer.serialize(t);s=s||{},this.location.isCurrentPathEqualTo(r)||e?this.location.replaceState(r,\"\",Object.assign(Object.assign({},s),{navigationId:n})):this.location.go(r,\"\",Object.assign(Object.assign({},s),{navigationId:n}))}resetStateAndUrl(t,e,n){this.routerState=t,this.currentUrlTree=e,this.rawUrlTree=this.urlHandlingStrategy.merge(this.currentUrlTree,n),this.resetUrlToCurrentUrlTree()}resetUrlToCurrentUrlTree(){this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree),\"\",{navigationId:this.lastSuccessfulId})}}return t.\\u0275fac=function(e){return new(e||t)(ds(Qn),ds(Ny),ds(_v),ds(_c),ds(Ei),ds(Hl),ds(gl),ds(void 0))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),Cv=(()=>{class t{constructor(t,e,n,s,r){this.router=t,this.route=e,this.commands=[],this.onChanges=new S,null==n&&s.setAttribute(r.nativeElement,\"tabindex\",\"0\")}ngOnChanges(t){this.onChanges.next(this)}set routerLink(t){this.commands=null!=t?Array.isArray(t)?t:[t]:[]}onClick(){const t={skipLocationChange:kv(this.skipLocationChange),replaceUrl:kv(this.replaceUrl),state:this.state};return this.router.navigateByUrl(this.urlTree,t),!0}get urlTree(){return this.router.createUrlTree(this.commands,{relativeTo:this.route,queryParams:this.queryParams,fragment:this.fragment,queryParamsHandling:this.queryParamsHandling,preserveFragment:kv(this.preserveFragment)})}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Sv),Ui(i_),Bn(\"tabindex\"),Ui(Uo),Ui(Mo))},t.\\u0275dir=$t({type:t,selectors:[[\"\",\"routerLink\",\"\",5,\"a\",5,\"area\"]],hostBindings:function(t,e){1&t&&Ki(\"click\",function(){return e.onClick()})},inputs:{routerLink:\"routerLink\",queryParams:\"queryParams\",fragment:\"fragment\",queryParamsHandling:\"queryParamsHandling\",preserveFragment:\"preserveFragment\",skipLocationChange:\"skipLocationChange\",replaceUrl:\"replaceUrl\",state:\"state\"},features:[ae]}),t})(),Ev=(()=>{class t{constructor(t,e,n){this.router=t,this.route=e,this.locationStrategy=n,this.commands=[],this.onChanges=new S,this.subscription=t.events.subscribe(t=>{t instanceof ey&&this.updateTargetUrlAndHref()})}set routerLink(t){this.commands=null!=t?Array.isArray(t)?t:[t]:[]}ngOnChanges(t){this.updateTargetUrlAndHref(),this.onChanges.next(this)}ngOnDestroy(){this.subscription.unsubscribe()}onClick(t,e,n,s,r){if(0!==t||e||n||s||r)return!0;if(\"string\"==typeof this.target&&\"_self\"!=this.target)return!0;const i={skipLocationChange:kv(this.skipLocationChange),replaceUrl:kv(this.replaceUrl),state:this.state};return this.router.navigateByUrl(this.urlTree,i),!1}updateTargetUrlAndHref(){this.href=this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree))}get urlTree(){return this.router.createUrlTree(this.commands,{relativeTo:this.route,queryParams:this.queryParams,fragment:this.fragment,queryParamsHandling:this.queryParamsHandling,preserveFragment:kv(this.preserveFragment)})}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Sv),Ui(i_),Ui(pc))},t.\\u0275dir=$t({type:t,selectors:[[\"a\",\"routerLink\",\"\"],[\"area\",\"routerLink\",\"\"]],hostVars:2,hostBindings:function(t,e){1&t&&Ki(\"click\",function(t){return e.onClick(t.button,t.ctrlKey,t.shiftKey,t.altKey,t.metaKey)}),2&t&&(mo(\"href\",e.href,bs),Mi(\"target\",e.target))},inputs:{routerLink:\"routerLink\",target:\"target\",queryParams:\"queryParams\",fragment:\"fragment\",queryParamsHandling:\"queryParamsHandling\",preserveFragment:\"preserveFragment\",skipLocationChange:\"skipLocationChange\",replaceUrl:\"replaceUrl\",state:\"state\"},features:[ae]}),t})();function kv(t){return\"\"===t||!!t}let Tv=(()=>{class t{constructor(t,e,n,s,r,i){this.router=t,this.element=e,this.renderer=n,this.cdr=s,this.link=r,this.linkWithHref=i,this.classes=[],this.isActive=!1,this.routerLinkActiveOptions={exact:!1},this.routerEventsSubscription=t.events.subscribe(t=>{t instanceof ey&&this.update()})}ngAfterContentInit(){N([this.links.changes,this.linksWithHrefs.changes,Zl(null)]).pipe(z()).subscribe(t=>{this.update(),this.subscribeToEachLinkOnChanges()})}subscribeToEachLinkOnChanges(){var t;null===(t=this.linkInputChangesSubscription)||void 0===t||t.unsubscribe();const e=[...this.links.toArray(),...this.linksWithHrefs.toArray(),this.link,this.linkWithHref].filter(t=>!!t).map(t=>t.onChanges);this.linkInputChangesSubscription=N(e).pipe(z()).subscribe(t=>{this.isActive!==this.isLinkActive(this.router)(t)&&this.update()})}set routerLinkActive(t){const e=Array.isArray(t)?t:t.split(\" \");this.classes=e.filter(t=>!!t)}ngOnChanges(t){this.update()}ngOnDestroy(){var t;this.routerEventsSubscription.unsubscribe(),null===(t=this.linkInputChangesSubscription)||void 0===t||t.unsubscribe()}update(){this.links&&this.linksWithHrefs&&this.router.navigated&&Promise.resolve().then(()=>{const t=this.hasActiveLinks();this.isActive!==t&&(this.isActive=t,this.cdr.markForCheck(),this.classes.forEach(e=>{t?this.renderer.addClass(this.element.nativeElement,e):this.renderer.removeClass(this.element.nativeElement,e)}))})}isLinkActive(t){return e=>t.isActive(e.urlTree,this.routerLinkActiveOptions.exact)}hasActiveLinks(){const t=this.isLinkActive(this.router);return this.link&&t(this.link)||this.linkWithHref&&t(this.linkWithHref)||this.links.some(t)||this.linksWithHrefs.some(t)}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Sv),Ui(Mo),Ui(Uo),Ui(aa),Ui(Cv,8),Ui(Ev,8))},t.\\u0275dir=$t({type:t,selectors:[[\"\",\"routerLinkActive\",\"\"]],contentQueries:function(t,e,n){if(1&t&&(Wa(n,Cv,!0),Wa(n,Ev,!0)),2&t){let t;Qa(t=Ka())&&(e.links=t),Qa(t=Ka())&&(e.linksWithHrefs=t)}},inputs:{routerLinkActiveOptions:\"routerLinkActiveOptions\",routerLinkActive:\"routerLinkActive\"},exportAs:[\"routerLinkActive\"],features:[ae]}),t})(),Av=(()=>{class t{constructor(t,e,n,s,r){this.parentContexts=t,this.location=e,this.resolver=n,this.changeDetector=r,this.activated=null,this._activatedRoute=null,this.activateEvents=new Da,this.deactivateEvents=new Da,this.name=s||gy,t.onChildOutletCreated(this.name,this)}ngOnDestroy(){this.parentContexts.onChildOutletDestroyed(this.name)}ngOnInit(){if(!this.activated){const t=this.parentContexts.getContext(this.name);t&&t.route&&(t.attachRef?this.attach(t.attachRef,t.route):this.activateWith(t.route,t.resolver||null))}}get isActivated(){return!!this.activated}get component(){if(!this.activated)throw new Error(\"Outlet is not activated\");return this.activated.instance}get activatedRoute(){if(!this.activated)throw new Error(\"Outlet is not activated\");return this._activatedRoute}get activatedRouteData(){return this._activatedRoute?this._activatedRoute.snapshot.data:{}}detach(){if(!this.activated)throw new Error(\"Outlet is not activated\");this.location.detach();const t=this.activated;return this.activated=null,this._activatedRoute=null,t}attach(t,e){this.activated=t,this._activatedRoute=e,this.location.insert(t.hostView)}deactivate(){if(this.activated){const t=this.component;this.activated.destroy(),this.activated=null,this._activatedRoute=null,this.deactivateEvents.emit(t)}}activateWith(t,e){if(this.isActivated)throw new Error(\"Cannot activate an already activated outlet\");this._activatedRoute=t;const n=(e=e||this.resolver).resolveComponentFactory(t._futureSnapshot.routeConfig.component),s=this.parentContexts.getOrCreateContext(this.name).children,r=new Iv(t,s,this.location.injector);this.activated=this.location.createComponent(n,this.location.length,r),this.changeDetector.markForCheck(),this.activateEvents.emit(this.activated.instance)}}return t.\\u0275fac=function(e){return new(e||t)(Ui(_v),Ui(va),Ui(Do),Bn(\"name\"),Ui(aa))},t.\\u0275dir=$t({type:t,selectors:[[\"router-outlet\"]],outputs:{activateEvents:\"activate\",deactivateEvents:\"deactivate\"},exportAs:[\"outlet\"]}),t})();class Iv{constructor(t,e,n){this.route=t,this.childContexts=e,this.parent=n}get(t,e){return t===i_?this.route:t===_v?this.childContexts:this.parent.get(t,e)}}class Ov{}class Rv{preload(t,e){return Zl(null)}}let Pv=(()=>{class t{constructor(t,e,n,s,r){this.router=t,this.injector=s,this.preloadingStrategy=r,this.loader=new gv(e,n,e=>t.triggerEvent(new cy(e)),e=>t.triggerEvent(new uy(e)))}setUpPreloading(){this.subscription=this.router.events.pipe(Xl(t=>t instanceof ey),Yl(()=>this.preload())).subscribe(()=>{})}preload(){const t=this.injector.get(ga);return this.processRoutes(t,this.router.config)}ngOnDestroy(){this.subscription&&this.subscription.unsubscribe()}processRoutes(t,e){const n=[];for(const s of e)if(s.loadChildren&&!s.canLoad&&s._loadedConfig){const t=s._loadedConfig;n.push(this.processRoutes(t.module,t.routes))}else s.loadChildren&&!s.canLoad?n.push(this.preloadConfig(t,s)):s.children&&n.push(this.processRoutes(t,s.children));return N(n).pipe(z(),k(t=>{}))}preloadConfig(t,e){return this.preloadingStrategy.preload(e,()=>this.loader.load(t.injector,e).pipe(U(t=>(e._loadedConfig=t,this.processRoutes(t.module,t.routes)))))}}return t.\\u0275fac=function(e){return new(e||t)(ds(Sv),ds(Hl),ds(gl),ds(Ei),ds(Ov))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})(),Lv=(()=>{class t{constructor(t,e,n={}){this.router=t,this.viewportScroller=e,this.options=n,this.lastId=0,this.lastSource=\"imperative\",this.restoredId=0,this.store={},n.scrollPositionRestoration=n.scrollPositionRestoration||\"disabled\",n.anchorScrolling=n.anchorScrolling||\"disabled\"}init(){\"disabled\"!==this.options.scrollPositionRestoration&&this.viewportScroller.setHistoryScrollRestoration(\"manual\"),this.routerEventsSubscription=this.createScrollEvents(),this.scrollEventsSubscription=this.consumeScrollEvents()}createScrollEvents(){return this.router.events.subscribe(t=>{t instanceof ty?(this.store[this.lastId]=this.viewportScroller.getScrollPosition(),this.lastSource=t.navigationTrigger,this.restoredId=t.restoredState?t.restoredState.navigationId:0):t instanceof ey&&(this.lastId=t.id,this.scheduleScrollEvent(t,this.router.parseUrl(t.urlAfterRedirects).fragment))})}consumeScrollEvents(){return this.router.events.subscribe(t=>{t instanceof my&&(t.position?\"top\"===this.options.scrollPositionRestoration?this.viewportScroller.scrollToPosition([0,0]):\"enabled\"===this.options.scrollPositionRestoration&&this.viewportScroller.scrollToPosition(t.position):t.anchor&&\"enabled\"===this.options.anchorScrolling?this.viewportScroller.scrollToAnchor(t.anchor):\"disabled\"!==this.options.scrollPositionRestoration&&this.viewportScroller.scrollToPosition([0,0]))})}scheduleScrollEvent(t,e){this.router.triggerEvent(new my(t,\"popstate\"===this.lastSource?this.store[this.restoredId]:null,e))}ngOnDestroy(){this.routerEventsSubscription&&this.routerEventsSubscription.unsubscribe(),this.scrollEventsSubscription&&this.scrollEventsSubscription.unsubscribe()}}return t.\\u0275fac=function(e){return new(e||t)(ds(Sv),ds(Dc),ds(void 0))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();const Dv=new $n(\"ROUTER_CONFIGURATION\"),Fv=new $n(\"ROUTER_FORROOT_GUARD\"),Nv=[_c,{provide:Ny,useClass:Vy},{provide:Sv,useFactory:function(t,e,n,s,r,i,o,a={},l,c){const u=new Sv(null,t,e,n,s,r,i,Sy(o));if(l&&(u.urlHandlingStrategy=l),c&&(u.routeReuseStrategy=c),function(t,e){t.errorHandler&&(e.errorHandler=t.errorHandler),t.malformedUriErrorHandler&&(e.malformedUriErrorHandler=t.malformedUriErrorHandler),t.onSameUrlNavigation&&(e.onSameUrlNavigation=t.onSameUrlNavigation),t.paramsInheritanceStrategy&&(e.paramsInheritanceStrategy=t.paramsInheritanceStrategy),t.relativeLinkResolution&&(e.relativeLinkResolution=t.relativeLinkResolution),t.urlUpdateStrategy&&(e.urlUpdateStrategy=t.urlUpdateStrategy)}(a,u),a.enableTracing){const t=nc();u.events.subscribe(e=>{t.logGroup(\"Router Event: \"+e.constructor.name),t.log(e.toString()),t.log(e),t.logGroupEnd()})}return u},deps:[Ny,_v,_c,Ei,Hl,gl,mv,Dv,[class{},new ns],[class{},new ns]]},_v,{provide:i_,useFactory:function(t){return t.routerState.root},deps:[Sv]},{provide:Hl,useClass:ql},Pv,Rv,class{preload(t,e){return e().pipe(Wg(()=>Zl(null)))}},{provide:Dv,useValue:{enableTracing:!1}}];function Vv(){return new Fl(\"Router\",Sv)}let Mv=(()=>{class t{constructor(t,e){}static forRoot(e,n){return{ngModule:t,providers:[Nv,Hv(e),{provide:Fv,useFactory:Bv,deps:[[Sv,new ns,new rs]]},{provide:Dv,useValue:n||{}},{provide:pc,useFactory:Uv,deps:[rc,[new es(mc),new ns],Dv]},{provide:Lv,useFactory:jv,deps:[Sv,Dc,Dv]},{provide:Ov,useExisting:n&&n.preloadingStrategy?n.preloadingStrategy:Rv},{provide:Fl,multi:!0,useFactory:Vv},[zv,{provide:Xa,multi:!0,useFactory:$v,deps:[zv]},{provide:Qv,useFactory:qv,deps:[zv]},{provide:il,multi:!0,useExisting:Qv}]]}}static forChild(e){return{ngModule:t,providers:[Hv(e)]}}}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)(ds(Fv,8),ds(Sv,8))}}),t})();function jv(t,e,n){return n.scrollOffset&&e.setOffset(n.scrollOffset),new Lv(t,e,n)}function Uv(t,e,n={}){return n.useHash?new yc(t,e):new gc(t,e)}function Bv(t){return\"guarded\"}function Hv(t){return[{provide:qn,multi:!0,useValue:t},{provide:mv,multi:!0,useValue:t}]}let zv=(()=>{class t{constructor(t){this.injector=t,this.initNavigation=!1,this.resultOfPreactivationDone=new S}appInitializer(){return this.injector.get(oc,Promise.resolve(null)).then(()=>{let t=null;const e=new Promise(e=>t=e),n=this.injector.get(Sv),s=this.injector.get(Dv);return\"disabled\"===s.initialNavigation?(n.setUpLocationChangeListener(),t(!0)):\"enabled\"===s.initialNavigation||\"enabledBlocking\"===s.initialNavigation?(n.hooks.afterPreactivation=()=>this.initNavigation?Zl(null):(this.initNavigation=!0,t(!0),this.resultOfPreactivationDone),n.initialNavigation()):t(!0),e})}bootstrapListener(t){const e=this.injector.get(Dv),n=this.injector.get(Pv),s=this.injector.get(Lv),r=this.injector.get(Sv),i=this.injector.get(Ul);t===i.components[0]&&(\"enabledNonBlocking\"!==e.initialNavigation&&void 0!==e.initialNavigation||r.initialNavigation(),n.setUpPreloading(),s.init(),r.resetRootComponentType(i.componentTypes[0]),this.resultOfPreactivationDone.next(null),this.resultOfPreactivationDone.complete())}}return t.\\u0275fac=function(e){return new(e||t)(ds(Ei))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac}),t})();function $v(t){return t.appInitializer.bind(t)}function qv(t){return t.bootstrapListener.bind(t)}const Qv=new $n(\"Router Initializer\");let Wv;try{Wv=\"undefined\"!=typeof Intl&&Intl.v8BreakIterator}catch(Kw){Wv=!1}let Kv,Gv,Zv=(()=>{class t{constructor(t){this._platformId=t,this.isBrowser=this._platformId?Pc(this._platformId):\"object\"==typeof document&&!!document,this.EDGE=this.isBrowser&&/(edge)/i.test(navigator.userAgent),this.TRIDENT=this.isBrowser&&/(msie|trident)/i.test(navigator.userAgent),this.BLINK=this.isBrowser&&!(!window.chrome&&!Wv)&&\"undefined\"!=typeof CSS&&!this.EDGE&&!this.TRIDENT,this.WEBKIT=this.isBrowser&&/AppleWebKit/i.test(navigator.userAgent)&&!this.BLINK&&!this.EDGE&&!this.TRIDENT,this.IOS=this.isBrowser&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!(\"MSStream\"in window),this.FIREFOX=this.isBrowser&&/(firefox|minefield)/i.test(navigator.userAgent),this.ANDROID=this.isBrowser&&/android/i.test(navigator.userAgent)&&!this.TRIDENT,this.SAFARI=this.isBrowser&&/safari/i.test(navigator.userAgent)&&this.WEBKIT}}return t.\\u0275fac=function(e){return new(e||t)(ds(rl))},t.\\u0275prov=at({factory:function(){return new t(ds(rl))},token:t,providedIn:\"root\"}),t})(),Yv=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)}}),t})();function Xv(t){return function(){if(null==Kv&&\"undefined\"!=typeof window)try{window.addEventListener(\"test\",null,Object.defineProperty({},\"passive\",{get:()=>Kv=!0}))}finally{Kv=Kv||!1}return Kv}()?t:!!t.capture}class Jv extends class{constructor(t){this._items=t,this._activeItemIndex=-1,this._activeItem=null,this._wrap=!1,this._letterKeyStream=new S,this._typeaheadSubscription=h.EMPTY,this._vertical=!0,this._allowedModifierKeys=[],this._homeAndEnd=!1,this._skipPredicateFn=t=>t.disabled,this._pressedLetters=[],this.tabOut=new S,this.change=new S,t instanceof Na&&t.changes.subscribe(t=>{if(this._activeItem){const e=t.toArray().indexOf(this._activeItem);e>-1&&e!==this._activeItemIndex&&(this._activeItemIndex=e)}})}skipPredicate(t){return this._skipPredicateFn=t,this}withWrap(t=!0){return this._wrap=t,this}withVerticalOrientation(t=!0){return this._vertical=t,this}withHorizontalOrientation(t){return this._horizontal=t,this}withAllowedModifierKeys(t){return this._allowedModifierKeys=t,this}withTypeAhead(t=200){return this._typeaheadSubscription.unsubscribe(),this._typeaheadSubscription=this._letterKeyStream.pipe(tm(t=>this._pressedLetters.push(t)),function(t,e=Vf){return n=>n.lift(new Mf(t,e))}(t),Xl(()=>this._pressedLetters.length>0),k(()=>this._pressedLetters.join(\"\"))).subscribe(t=>{const e=this._getItemsArray();for(let n=1;n<e.length+1;n++){const s=(this._activeItemIndex+n)%e.length,r=e[s];if(!this._skipPredicateFn(r)&&0===r.getLabel().toUpperCase().trim().indexOf(t)){this.setActiveItem(s);break}}this._pressedLetters=[]}),this}withHomeAndEnd(t=!0){return this._homeAndEnd=t,this}setActiveItem(t){const e=this._activeItem;this.updateActiveItem(t),this._activeItem!==e&&this.change.next(this._activeItemIndex)}onKeydown(t){const e=t.keyCode,n=[\"altKey\",\"ctrlKey\",\"metaKey\",\"shiftKey\"].every(e=>!t[e]||this._allowedModifierKeys.indexOf(e)>-1);switch(e){case 9:return void this.tabOut.next();case 40:if(this._vertical&&n){this.setNextItemActive();break}return;case 38:if(this._vertical&&n){this.setPreviousItemActive();break}return;case 39:if(this._horizontal&&n){\"rtl\"===this._horizontal?this.setPreviousItemActive():this.setNextItemActive();break}return;case 37:if(this._horizontal&&n){\"rtl\"===this._horizontal?this.setNextItemActive():this.setPreviousItemActive();break}return;case 36:if(this._homeAndEnd&&n){this.setFirstItemActive();break}return;case 35:if(this._homeAndEnd&&n){this.setLastItemActive();break}return;default:return void((n||function(t,...e){return e.length?e.some(e=>t[e]):t.altKey||t.shiftKey||t.ctrlKey||t.metaKey}(t,\"shiftKey\"))&&(t.key&&1===t.key.length?this._letterKeyStream.next(t.key.toLocaleUpperCase()):(e>=65&&e<=90||e>=48&&e<=57)&&this._letterKeyStream.next(String.fromCharCode(e))))}this._pressedLetters=[],t.preventDefault()}get activeItemIndex(){return this._activeItemIndex}get activeItem(){return this._activeItem}isTyping(){return this._pressedLetters.length>0}setFirstItemActive(){this._setActiveItemByIndex(0,1)}setLastItemActive(){this._setActiveItemByIndex(this._items.length-1,-1)}setNextItemActive(){this._activeItemIndex<0?this.setFirstItemActive():this._setActiveItemByDelta(1)}setPreviousItemActive(){this._activeItemIndex<0&&this._wrap?this.setLastItemActive():this._setActiveItemByDelta(-1)}updateActiveItem(t){const e=this._getItemsArray(),n=\"number\"==typeof t?t:e.indexOf(t),s=e[n];this._activeItem=null==s?null:s,this._activeItemIndex=n}_setActiveItemByDelta(t){this._wrap?this._setActiveInWrapMode(t):this._setActiveInDefaultMode(t)}_setActiveInWrapMode(t){const e=this._getItemsArray();for(let n=1;n<=e.length;n++){const s=(this._activeItemIndex+t*n+e.length)%e.length;if(!this._skipPredicateFn(e[s]))return void this.setActiveItem(s)}}_setActiveInDefaultMode(t){this._setActiveItemByIndex(this._activeItemIndex+t,t)}_setActiveItemByIndex(t,e){const n=this._getItemsArray();if(n[t]){for(;this._skipPredicateFn(n[t]);)if(!n[t+=e])return;this.setActiveItem(t)}}_getItemsArray(){return this._items instanceof Na?this._items.toArray():this._items}}{constructor(){super(...arguments),this._origin=\"program\"}setFocusOrigin(t){return this._origin=t,this}setActiveItem(t){super.setActiveItem(t),this.activeItem&&this.activeItem.focus(this._origin)}}function tb(t){return 0===t.buttons}\"undefined\"!=typeof Element&&Element;const eb=new $n(\"cdk-focus-monitor-default-options\"),nb=Xv({passive:!0,capture:!0});let sb=(()=>{class t{constructor(t,e,n,s){this._ngZone=t,this._platform=e,this._origin=null,this._windowFocused=!1,this._elementInfo=new Map,this._monitoredElementCount=0,this._rootNodeFocusListenerCount=new Map,this._documentKeydownListener=()=>{this._lastTouchTarget=null,this._setOriginForCurrentEventQueue(\"keyboard\")},this._documentMousedownListener=t=>{if(!this._lastTouchTarget){const e=tb(t)?\"keyboard\":\"mouse\";this._setOriginForCurrentEventQueue(e)}},this._documentTouchstartListener=t=>{null!=this._touchTimeoutId&&clearTimeout(this._touchTimeoutId),this._lastTouchTarget=rb(t),this._touchTimeoutId=setTimeout(()=>this._lastTouchTarget=null,650)},this._windowFocusListener=()=>{this._windowFocused=!0,this._windowFocusTimeoutId=setTimeout(()=>this._windowFocused=!1)},this._rootNodeFocusAndBlurListener=t=>{const e=rb(t),n=\"focus\"===t.type?this._onFocus:this._onBlur;for(let s=e;s;s=s.parentElement)n.call(this,t,s)},this._document=n,this._detectionMode=(null==s?void 0:s.detectionMode)||0}monitor(t,e=!1){const n=$m(t);if(!this._platform.isBrowser||1!==n.nodeType)return Zl(null);const s=function(t){if(function(){if(null==Gv){const t=\"undefined\"!=typeof document?document.head:null;Gv=!(!t||!t.createShadowRoot&&!t.attachShadow)}return Gv}()){const e=t.getRootNode?t.getRootNode():null;if(\"undefined\"!=typeof ShadowRoot&&ShadowRoot&&e instanceof ShadowRoot)return e}return null}(n)||this._getDocument(),r=this._elementInfo.get(n);if(r)return e&&(r.checkChildren=!0),r.subject;const i={checkChildren:e,subject:new S,rootNode:s};return this._elementInfo.set(n,i),this._registerGlobalListeners(i),i.subject}stopMonitoring(t){const e=$m(t),n=this._elementInfo.get(e);n&&(n.subject.complete(),this._setClasses(e),this._elementInfo.delete(e),this._removeGlobalListeners(n))}focusVia(t,e,n){const s=$m(t);s===this._getDocument().activeElement&&this._elementInfo.has(s)?this._originChanged(s,e,this._elementInfo.get(s)):(this._setOriginForCurrentEventQueue(e),\"function\"==typeof s.focus&&s.focus(n))}ngOnDestroy(){this._elementInfo.forEach((t,e)=>this.stopMonitoring(e))}_getDocument(){return this._document||document}_getWindow(){return this._getDocument().defaultView||window}_toggleClass(t,e,n){n?t.classList.add(e):t.classList.remove(e)}_getFocusOrigin(t){return this._origin?this._origin:this._windowFocused&&this._lastFocusOrigin?this._lastFocusOrigin:this._wasCausedByTouch(t)?\"touch\":\"program\"}_setClasses(t,e){this._toggleClass(t,\"cdk-focused\",!!e),this._toggleClass(t,\"cdk-touch-focused\",\"touch\"===e),this._toggleClass(t,\"cdk-keyboard-focused\",\"keyboard\"===e),this._toggleClass(t,\"cdk-mouse-focused\",\"mouse\"===e),this._toggleClass(t,\"cdk-program-focused\",\"program\"===e)}_setOriginForCurrentEventQueue(t){this._ngZone.runOutsideAngular(()=>{this._origin=t,0===this._detectionMode&&(this._originTimeoutId=setTimeout(()=>this._origin=null,1))})}_wasCausedByTouch(t){const e=rb(t);return this._lastTouchTarget instanceof Node&&e instanceof Node&&(e===this._lastTouchTarget||e.contains(this._lastTouchTarget))}_onFocus(t,e){const n=this._elementInfo.get(e);n&&(n.checkChildren||e===rb(t))&&this._originChanged(e,this._getFocusOrigin(t),n)}_onBlur(t,e){const n=this._elementInfo.get(e);!n||n.checkChildren&&t.relatedTarget instanceof Node&&e.contains(t.relatedTarget)||(this._setClasses(e),this._emitOrigin(n.subject,null))}_emitOrigin(t,e){this._ngZone.run(()=>t.next(e))}_registerGlobalListeners(t){if(!this._platform.isBrowser)return;const e=t.rootNode,n=this._rootNodeFocusListenerCount.get(e)||0;n||this._ngZone.runOutsideAngular(()=>{e.addEventListener(\"focus\",this._rootNodeFocusAndBlurListener,nb),e.addEventListener(\"blur\",this._rootNodeFocusAndBlurListener,nb)}),this._rootNodeFocusListenerCount.set(e,n+1),1==++this._monitoredElementCount&&this._ngZone.runOutsideAngular(()=>{const t=this._getDocument(),e=this._getWindow();t.addEventListener(\"keydown\",this._documentKeydownListener,nb),t.addEventListener(\"mousedown\",this._documentMousedownListener,nb),t.addEventListener(\"touchstart\",this._documentTouchstartListener,nb),e.addEventListener(\"focus\",this._windowFocusListener)})}_removeGlobalListeners(t){const e=t.rootNode;if(this._rootNodeFocusListenerCount.has(e)){const t=this._rootNodeFocusListenerCount.get(e);t>1?this._rootNodeFocusListenerCount.set(e,t-1):(e.removeEventListener(\"focus\",this._rootNodeFocusAndBlurListener,nb),e.removeEventListener(\"blur\",this._rootNodeFocusAndBlurListener,nb),this._rootNodeFocusListenerCount.delete(e))}if(!--this._monitoredElementCount){const t=this._getDocument(),e=this._getWindow();t.removeEventListener(\"keydown\",this._documentKeydownListener,nb),t.removeEventListener(\"mousedown\",this._documentMousedownListener,nb),t.removeEventListener(\"touchstart\",this._documentTouchstartListener,nb),e.removeEventListener(\"focus\",this._windowFocusListener),clearTimeout(this._windowFocusTimeoutId),clearTimeout(this._touchTimeoutId),clearTimeout(this._originTimeoutId)}}_originChanged(t,e,n){this._setClasses(t,e),this._emitOrigin(n.subject,e),this._lastFocusOrigin=e}}return t.\\u0275fac=function(e){return new(e||t)(ds(vl),ds(Zv),ds(sc,8),ds(eb,8))},t.\\u0275prov=at({factory:function(){return new t(ds(vl),ds(Zv),ds(sc,8),ds(eb,8))},token:t,providedIn:\"root\"}),t})();function rb(t){return t.composedPath?t.composedPath()[0]:t.target}const ib=\"cdk-high-contrast-black-on-white\",ob=\"cdk-high-contrast-white-on-black\",ab=\"cdk-high-contrast-active\";let lb=(()=>{class t{constructor(t,e){this._platform=t,this._document=e}getHighContrastMode(){if(!this._platform.isBrowser)return 0;const t=this._document.createElement(\"div\");t.style.backgroundColor=\"rgb(1,2,3)\",t.style.position=\"absolute\",this._document.body.appendChild(t);const e=this._document.defaultView||window,n=e&&e.getComputedStyle?e.getComputedStyle(t):null,s=(n&&n.backgroundColor||\"\").replace(/ /g,\"\");switch(this._document.body.removeChild(t),s){case\"rgb(0,0,0)\":return 2;case\"rgb(255,255,255)\":return 1}return 0}_applyBodyHighContrastModeCssClasses(){if(this._platform.isBrowser&&this._document.body){const t=this._document.body.classList;t.remove(ab),t.remove(ib),t.remove(ob);const e=this.getHighContrastMode();1===e?(t.add(ab),t.add(ib)):2===e&&(t.add(ab),t.add(ob))}}}return t.\\u0275fac=function(e){return new(e||t)(ds(Zv),ds(sc))},t.\\u0275prov=at({factory:function(){return new t(ds(Zv),ds(sc))},token:t,providedIn:\"root\"}),t})();const cb=new zo(\"11.0.3\"),ub=new zo(\"11.0.3\"),hb=new $n(\"mat-sanity-checks\",{providedIn:\"root\",factory:function(){return!0}});let db,pb=(()=>{class t{constructor(t,e,n){this._hasDoneGlobalChecks=!1,this._document=n,t._applyBodyHighContrastModeCssClasses(),this._sanityChecks=e,this._hasDoneGlobalChecks||(this._checkDoctypeIsDefined(),this._checkThemeIsPresent(),this._checkCdkVersionMatch(),this._hasDoneGlobalChecks=!0)}_getWindow(){const t=this._document.defaultView||window;return\"object\"==typeof t&&t?t:null}_checksAreEnabled(){return Ll()&&!this._isTestEnv()}_isTestEnv(){const t=this._getWindow();return t&&(t.__karma__||t.jasmine)}_checkDoctypeIsDefined(){this._checksAreEnabled()&&(!0===this._sanityChecks||this._sanityChecks.doctype)&&!this._document.doctype&&console.warn(\"Current document does not have a doctype. This may cause some Angular Material components not to behave as expected.\")}_checkThemeIsPresent(){if(!this._checksAreEnabled()||!1===this._sanityChecks||!this._sanityChecks.theme||!this._document.body||\"function\"!=typeof getComputedStyle)return;const t=this._document.createElement(\"div\");t.classList.add(\"mat-theme-loaded-marker\"),this._document.body.appendChild(t);const e=getComputedStyle(t);e&&\"none\"!==e.display&&console.warn(\"Could not find Angular Material core theme. Most Material components may not work as expected. For more info refer to the theming guide: https://material.angular.io/guide/theming\"),this._document.body.removeChild(t)}_checkCdkVersionMatch(){this._checksAreEnabled()&&(!0===this._sanityChecks||this._sanityChecks.version)&&ub.full!==cb.full&&console.warn(\"The Angular Material version (\"+ub.full+\") does not match the Angular CDK version (\"+cb.full+\").\\nPlease ensure the versions of these two packages exactly match.\")}}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)(ds(lb),ds(hb,8),ds(sc))},imports:[[Km],Km]}),t})();function fb(t){return class extends t{constructor(...t){super(...t),this._disabled=!1}get disabled(){return this._disabled}set disabled(t){this._disabled=zm(t)}}}function mb(t,e){return class extends t{constructor(...t){super(...t),this.defaultColor=e,this.color=e}get color(){return this._color}set color(t){const e=t||this.defaultColor;e!==this._color&&(this._color&&this._elementRef.nativeElement.classList.remove(\"mat-\"+this._color),e&&this._elementRef.nativeElement.classList.add(\"mat-\"+e),this._color=e)}}}function gb(t){return class extends t{constructor(...t){super(...t),this._disableRipple=!1}get disableRipple(){return this._disableRipple}set disableRipple(t){this._disableRipple=zm(t)}}}function yb(t,e=0){return class extends t{constructor(...t){super(...t),this._tabIndex=e,this.defaultTabIndex=e}get tabIndex(){return this.disabled?-1:this._tabIndex}set tabIndex(t){this._tabIndex=null!=t?function(t,e=0){return function(t){return!isNaN(parseFloat(t))&&!isNaN(Number(t))}(t)?Number(t):e}(t):this.defaultTabIndex}}}function _b(t){return class extends t{constructor(...t){super(...t),this.errorState=!1,this.stateChanges=new S}updateErrorState(){const t=this.errorState,e=(this.errorStateMatcher||this._defaultErrorStateMatcher).isErrorState(this.ngControl?this.ngControl.control:null,this._parentFormGroup||this._parentForm);e!==t&&(this.errorState=e,this.stateChanges.next())}}}try{db=\"undefined\"!=typeof Intl}catch(Kw){db=!1}let vb=(()=>{class t{isErrorState(t,e){return!!(t&&t.invalid&&(t.touched||e&&e.submitted))}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275prov=at({factory:function(){return new t},token:t,providedIn:\"root\"}),t})();class bb{constructor(t,e,n){this._renderer=t,this.element=e,this.config=n,this.state=3}fadeOut(){this._renderer.fadeOutRipple(this)}}const wb={enterDuration:450,exitDuration:400},xb=Xv({passive:!0}),Sb=[\"mousedown\",\"touchstart\"],Cb=[\"mouseup\",\"mouseleave\",\"touchend\",\"touchcancel\"];class Eb{constructor(t,e,n,s){this._target=t,this._ngZone=e,this._isPointerDown=!1,this._activeRipples=new Set,this._pointerUpEventsRegistered=!1,s.isBrowser&&(this._containerElement=$m(n))}fadeInRipple(t,e,n={}){const s=this._containerRect=this._containerRect||this._containerElement.getBoundingClientRect(),r=Object.assign(Object.assign({},wb),n.animation);n.centered&&(t=s.left+s.width/2,e=s.top+s.height/2);const i=n.radius||function(t,e,n){const s=Math.max(Math.abs(t-n.left),Math.abs(t-n.right)),r=Math.max(Math.abs(e-n.top),Math.abs(e-n.bottom));return Math.sqrt(s*s+r*r)}(t,e,s),o=t-s.left,a=e-s.top,l=r.enterDuration,c=document.createElement(\"div\");c.classList.add(\"mat-ripple-element\"),c.style.left=o-i+\"px\",c.style.top=a-i+\"px\",c.style.height=2*i+\"px\",c.style.width=2*i+\"px\",null!=n.color&&(c.style.backgroundColor=n.color),c.style.transitionDuration=l+\"ms\",this._containerElement.appendChild(c),window.getComputedStyle(c).getPropertyValue(\"opacity\"),c.style.transform=\"scale(1)\";const u=new bb(this,c,n);return u.state=0,this._activeRipples.add(u),n.persistent||(this._mostRecentTransientRipple=u),this._runTimeoutOutsideZone(()=>{const t=u===this._mostRecentTransientRipple;u.state=1,n.persistent||t&&this._isPointerDown||u.fadeOut()},l),u}fadeOutRipple(t){const e=this._activeRipples.delete(t);if(t===this._mostRecentTransientRipple&&(this._mostRecentTransientRipple=null),this._activeRipples.size||(this._containerRect=null),!e)return;const n=t.element,s=Object.assign(Object.assign({},wb),t.config.animation);n.style.transitionDuration=s.exitDuration+\"ms\",n.style.opacity=\"0\",t.state=2,this._runTimeoutOutsideZone(()=>{t.state=3,n.parentNode.removeChild(n)},s.exitDuration)}fadeOutAll(){this._activeRipples.forEach(t=>t.fadeOut())}setupTriggerEvents(t){const e=$m(t);e&&e!==this._triggerElement&&(this._removeTriggerEvents(),this._triggerElement=e,this._registerEvents(Sb))}handleEvent(t){\"mousedown\"===t.type?this._onMousedown(t):\"touchstart\"===t.type?this._onTouchStart(t):this._onPointerUp(),this._pointerUpEventsRegistered||(this._registerEvents(Cb),this._pointerUpEventsRegistered=!0)}_onMousedown(t){const e=tb(t),n=this._lastTouchStartEvent&&Date.now()<this._lastTouchStartEvent+800;this._target.rippleDisabled||e||n||(this._isPointerDown=!0,this.fadeInRipple(t.clientX,t.clientY,this._target.rippleConfig))}_onTouchStart(t){if(!this._target.rippleDisabled){this._lastTouchStartEvent=Date.now(),this._isPointerDown=!0;const e=t.changedTouches;for(let t=0;t<e.length;t++)this.fadeInRipple(e[t].clientX,e[t].clientY,this._target.rippleConfig)}}_onPointerUp(){this._isPointerDown&&(this._isPointerDown=!1,this._activeRipples.forEach(t=>{!t.config.persistent&&(1===t.state||t.config.terminateOnPointerUp&&0===t.state)&&t.fadeOut()}))}_runTimeoutOutsideZone(t,e=0){this._ngZone.runOutsideAngular(()=>setTimeout(t,e))}_registerEvents(t){this._ngZone.runOutsideAngular(()=>{t.forEach(t=>{this._triggerElement.addEventListener(t,this,xb)})})}_removeTriggerEvents(){this._triggerElement&&(Sb.forEach(t=>{this._triggerElement.removeEventListener(t,this,xb)}),this._pointerUpEventsRegistered&&Cb.forEach(t=>{this._triggerElement.removeEventListener(t,this,xb)}))}}const kb=new $n(\"mat-ripple-global-options\");let Tb=(()=>{class t{constructor(t,e,n,s,r){this._elementRef=t,this._animationMode=r,this.radius=0,this._disabled=!1,this._isInitialized=!1,this._globalOptions=s||{},this._rippleRenderer=new Eb(this,e,t,n)}get disabled(){return this._disabled}set disabled(t){this._disabled=t,this._setupTriggerEventsIfEnabled()}get trigger(){return this._trigger||this._elementRef.nativeElement}set trigger(t){this._trigger=t,this._setupTriggerEventsIfEnabled()}ngOnInit(){this._isInitialized=!0,this._setupTriggerEventsIfEnabled()}ngOnDestroy(){this._rippleRenderer._removeTriggerEvents()}fadeOutAll(){this._rippleRenderer.fadeOutAll()}get rippleConfig(){return{centered:this.centered,radius:this.radius,color:this.color,animation:Object.assign(Object.assign(Object.assign({},this._globalOptions.animation),\"NoopAnimations\"===this._animationMode?{enterDuration:0,exitDuration:0}:{}),this.animation),terminateOnPointerUp:this._globalOptions.terminateOnPointerUp}}get rippleDisabled(){return this.disabled||!!this._globalOptions.disabled}_setupTriggerEventsIfEnabled(){!this.disabled&&this._isInitialized&&this._rippleRenderer.setupTriggerEvents(this.trigger)}launch(t,e=0,n){return\"number\"==typeof t?this._rippleRenderer.fadeInRipple(t,e,Object.assign(Object.assign({},this.rippleConfig),n)):this._rippleRenderer.fadeInRipple(0,0,Object.assign(Object.assign({},this.rippleConfig),t))}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Mo),Ui(vl),Ui(Zv),Ui(kb,8),Ui(Tp,8))},t.\\u0275dir=$t({type:t,selectors:[[\"\",\"mat-ripple\",\"\"],[\"\",\"matRipple\",\"\"]],hostAttrs:[1,\"mat-ripple\"],hostVars:2,hostBindings:function(t,e){2&t&&ro(\"mat-ripple-unbounded\",e.unbounded)},inputs:{radius:[\"matRippleRadius\",\"radius\"],disabled:[\"matRippleDisabled\",\"disabled\"],trigger:[\"matRippleTrigger\",\"trigger\"],color:[\"matRippleColor\",\"color\"],unbounded:[\"matRippleUnbounded\",\"unbounded\"],centered:[\"matRippleCentered\",\"centered\"],animation:[\"matRippleAnimation\",\"animation\"]},exportAs:[\"matRipple\"]}),t})(),Ab=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},imports:[[pb,Yv],pb]}),t})();const Ib=[\"*\",[[\"mat-card-footer\"]]],Ob=[\"*\",\"mat-card-footer\"],Rb=[[[\"\",\"mat-card-avatar\",\"\"],[\"\",\"matCardAvatar\",\"\"]],[[\"mat-card-title\"],[\"mat-card-subtitle\"],[\"\",\"mat-card-title\",\"\"],[\"\",\"mat-card-subtitle\",\"\"],[\"\",\"matCardTitle\",\"\"],[\"\",\"matCardSubtitle\",\"\"]],\"*\"],Pb=[\"[mat-card-avatar], [matCardAvatar]\",\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\",\"*\"];let Lb=(()=>{class t{}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275dir=$t({type:t,selectors:[[\"mat-card-content\"],[\"\",\"mat-card-content\",\"\"],[\"\",\"matCardContent\",\"\"]],hostAttrs:[1,\"mat-card-content\"]}),t})(),Db=(()=>{class t{}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275dir=$t({type:t,selectors:[[\"mat-card-title\"],[\"\",\"mat-card-title\",\"\"],[\"\",\"matCardTitle\",\"\"]],hostAttrs:[1,\"mat-card-title\"]}),t})(),Fb=(()=>{class t{constructor(){this.align=\"start\"}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275dir=$t({type:t,selectors:[[\"mat-card-actions\"]],hostAttrs:[1,\"mat-card-actions\"],hostVars:2,hostBindings:function(t,e){2&t&&ro(\"mat-card-actions-align-end\",\"end\"===e.align)},inputs:{align:\"align\"},exportAs:[\"matCardActions\"]}),t})(),Nb=(()=>{class t{constructor(t){this._animationMode=t}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Tp,8))},t.\\u0275cmp=Mt({type:t,selectors:[[\"mat-card\"]],hostAttrs:[1,\"mat-card\",\"mat-focus-indicator\"],hostVars:2,hostBindings:function(t,e){2&t&&ro(\"_mat-animation-noopable\",\"NoopAnimations\"===e._animationMode)},exportAs:[\"matCard\"],ngContentSelectors:Ob,decls:2,vars:0,template:function(t,e){1&t&&(Ji(Ib),to(0),to(1,1))},styles:[\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"],encapsulation:2,changeDetection:0}),t})(),Vb=(()=>{class t{}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275cmp=Mt({type:t,selectors:[[\"mat-card-header\"]],hostAttrs:[1,\"mat-card-header\"],ngContentSelectors:Pb,decls:4,vars:0,consts:[[1,\"mat-card-header-text\"]],template:function(t,e){1&t&&(Ji(Rb),to(0),zi(1,\"div\",0),to(2,1),$i(),to(3,2))},encapsulation:2,changeDetection:0}),t})(),Mb=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},imports:[[pb],pb]}),t})();const jb=[\"mat-button\",\"\"],Ub=[\"*\"],Bb=\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}.cdk-high-contrast-active .mat-button-base.cdk-keyboard-focused,.cdk-high-contrast-active .mat-button-base.cdk-program-focused{outline:solid 3px}\\n\",Hb=[\"mat-button\",\"mat-flat-button\",\"mat-icon-button\",\"mat-raised-button\",\"mat-stroked-button\",\"mat-mini-fab\",\"mat-fab\"];class zb{constructor(t){this._elementRef=t}}const $b=mb(fb(gb(zb)));let qb=(()=>{class t extends $b{constructor(t,e,n){super(t),this._focusMonitor=e,this._animationMode=n,this.isRoundButton=this._hasHostAttributes(\"mat-fab\",\"mat-mini-fab\"),this.isIconButton=this._hasHostAttributes(\"mat-icon-button\");for(const s of Hb)this._hasHostAttributes(s)&&this._getHostElement().classList.add(s);t.nativeElement.classList.add(\"mat-button-base\"),this.isRoundButton&&(this.color=\"accent\")}ngAfterViewInit(){this._focusMonitor.monitor(this._elementRef,!0)}ngOnDestroy(){this._focusMonitor.stopMonitoring(this._elementRef)}focus(t=\"program\",e){this._focusMonitor.focusVia(this._getHostElement(),t,e)}_getHostElement(){return this._elementRef.nativeElement}_isRippleDisabled(){return this.disableRipple||this.disabled}_hasHostAttributes(...t){return t.some(t=>this._getHostElement().hasAttribute(t))}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Mo),Ui(sb),Ui(Tp,8))},t.\\u0275cmp=Mt({type:t,selectors:[[\"button\",\"mat-button\",\"\"],[\"button\",\"mat-raised-button\",\"\"],[\"button\",\"mat-icon-button\",\"\"],[\"button\",\"mat-fab\",\"\"],[\"button\",\"mat-mini-fab\",\"\"],[\"button\",\"mat-stroked-button\",\"\"],[\"button\",\"mat-flat-button\",\"\"]],viewQuery:function(t,e){if(1&t&&(n=Tb,s=!0,function(t,e,n,s,r,i){t.firstCreatePass&&Za(t,new ja(n,s,!1,r),-1),Ga(t,e)}(Oe(),Ie(),n,s,r)),2&t){let t;Qa(t=Ka())&&(e.ripple=t.first)}var n,s,r},hostAttrs:[1,\"mat-focus-indicator\"],hostVars:5,hostBindings:function(t,e){2&t&&(Mi(\"disabled\",e.disabled||null),ro(\"_mat-animation-noopable\",\"NoopAnimations\"===e._animationMode)(\"mat-button-disabled\",e.disabled))},inputs:{disabled:\"disabled\",disableRipple:\"disableRipple\",color:\"color\"},exportAs:[\"matButton\"],features:[Ti],attrs:jb,ngContentSelectors:Ub,decls:4,vars:5,consts:[[1,\"mat-button-wrapper\"],[\"matRipple\",\"\",1,\"mat-button-ripple\",3,\"matRippleDisabled\",\"matRippleCentered\",\"matRippleTrigger\"],[1,\"mat-button-focus-overlay\"]],template:function(t,e){1&t&&(Ji(),zi(0,\"span\",0),to(1),$i(),qi(2,\"span\",1),qi(3,\"span\",2)),2&t&&(fr(2),ro(\"mat-button-ripple-round\",e.isRoundButton||e.isIconButton),Bi(\"matRippleDisabled\",e._isRippleDisabled())(\"matRippleCentered\",e.isIconButton)(\"matRippleTrigger\",e._getHostElement()))},directives:[Tb],styles:[Bb],encapsulation:2,changeDetection:0}),t})(),Qb=(()=>{class t extends qb{constructor(t,e,n){super(e,t,n)}_haltDisabledEvents(t){this.disabled&&(t.preventDefault(),t.stopImmediatePropagation())}}return t.\\u0275fac=function(e){return new(e||t)(Ui(sb),Ui(Mo),Ui(Tp,8))},t.\\u0275cmp=Mt({type:t,selectors:[[\"a\",\"mat-button\",\"\"],[\"a\",\"mat-raised-button\",\"\"],[\"a\",\"mat-icon-button\",\"\"],[\"a\",\"mat-fab\",\"\"],[\"a\",\"mat-mini-fab\",\"\"],[\"a\",\"mat-stroked-button\",\"\"],[\"a\",\"mat-flat-button\",\"\"]],hostAttrs:[1,\"mat-focus-indicator\"],hostVars:7,hostBindings:function(t,e){1&t&&Ki(\"click\",function(t){return e._haltDisabledEvents(t)}),2&t&&(Mi(\"tabindex\",e.disabled?-1:e.tabIndex||0)(\"disabled\",e.disabled||null)(\"aria-disabled\",e.disabled.toString()),ro(\"_mat-animation-noopable\",\"NoopAnimations\"===e._animationMode)(\"mat-button-disabled\",e.disabled))},inputs:{disabled:\"disabled\",disableRipple:\"disableRipple\",color:\"color\",tabIndex:\"tabIndex\"},exportAs:[\"matButton\",\"matAnchor\"],features:[Ti],attrs:jb,ngContentSelectors:Ub,decls:4,vars:5,consts:[[1,\"mat-button-wrapper\"],[\"matRipple\",\"\",1,\"mat-button-ripple\",3,\"matRippleDisabled\",\"matRippleCentered\",\"matRippleTrigger\"],[1,\"mat-button-focus-overlay\"]],template:function(t,e){1&t&&(Ji(),zi(0,\"span\",0),to(1),$i(),qi(2,\"span\",1),qi(3,\"span\",2)),2&t&&(fr(2),ro(\"mat-button-ripple-round\",e.isRoundButton||e.isIconButton),Bi(\"matRippleDisabled\",e._isRippleDisabled())(\"matRippleCentered\",e.isIconButton)(\"matRippleTrigger\",e._getHostElement()))},directives:[Tb],styles:[Bb],encapsulation:2,changeDetection:0}),t})(),Wb=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},imports:[[Ab,pb],pb]}),t})(),Kb=(()=>{class t{constructor(t){this.router=t}ngOnInit(){}goMatch(){this.router.navigate([\"/match\"])}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Sv))},t.\\u0275cmp=Mt({type:t,selectors:[[\"app-log-in\"]],decls:6,vars:0,consts:[[\"fxLayout\",\"row\",\"fxLayoutAlign\",\"center center\",1,\"login-wrapper\"],[1,\"box\"],[1,\"example-form\"],[\"mat-flat-button\",\"\",\"color\",\"accent\",1,\"btn-block\",3,\"click\"]],template:function(t,e){1&t&&(zi(0,\"div\",0),zi(1,\"mat-card\",1),zi(2,\"form\",2),qi(3,\"mat-card-content\"),zi(4,\"button\",3),Ki(\"click\",function(){return e.goMatch()}),co(5,\" Log in \"),$i(),$i(),$i(),$i())},directives:[rg,hg,Nb,Cf,Yp,Sf,Lb,qb],styles:[\"\"]}),t})();function Gb(t,e,n,s){return Xu(Wu(\"{{ timing }}s {{ delay }}s cubic-bezier(0.215, 0.610, 0.355, 1.000)\",Zu([Gu({opacity:0,transform:\"translate3d(0, {{ a }}, 0)\",offset:0}),Gu({opacity:1,transform:\"translate3d(0, {{ b }}, 0)\",offset:.6}),Gu({transform:\"translate3d(0, {{ c }}, 0)\",offset:.75}),Gu({transform:\"translate3d(0, {{ d }}, 0)\",offset:.9}),Gu({opacity:1,transform:\"none\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e,c:n,d:s}})}function Zb(t,e,n,s){return Xu(Wu(\"{{ timing }}s {{ delay }}s cubic-bezier(0.215, 0.610, 0.355, 1.000)\",Zu([Gu({opacity:0,transform:\"translate3d({{ a }}, 0, 0)\",offset:0}),Gu({opacity:1,transform:\"translate3d({{ b }}, 0, 0)\",offset:.6}),Gu({transform:\"translate3d({{ c }}, 0, 0)\",offset:.75}),Gu({transform:\"translate3d({{ d }}, 0, 0)\",offset:.9}),Gu({opacity:1,transform:\"none\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e,c:n,d:s}})}function Yb(t,e,n,s){return Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"translate3d(0, {{ a }}, 0)\",offset:.2}),Gu({opacity:1,transform:\"translate3d(0, {{ b }}, 0)\",offset:.4}),Gu({opacity:1,transform:\"translate3d(0, {{ c }}, 0)\",offset:.45}),Gu({opacity:0,transform:\"translate3d(0, {{ d }}, 0)\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e,c:n,d:s}})}function Xb(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:1,transform:\"translate3d({{ a }}, 0, 0)\",offset:.2}),Gu({opacity:0,transform:\"translate3d({{ b }}, 0, 0)\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e}})}function Jb(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:0,transform:\"translate3d({{ a }}, 0, 0)\",offset:0}),Gu({opacity:1,transform:\"translate3d({{ b }}, 0, 0)\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e}})}function tw(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:0,transform:\"translate3d(0, {{ a }}, 0)\",offset:0}),Gu({opacity:1,transform:\"translate3d(0, {{ b }}, 0)\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e}})}function ew(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:1,transform:\"translate3d({{ a }}, 0, 0)\",offset:0}),Gu({opacity:0,transform:\"translate3d({{ b }}, 0, 0)\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e}})}function nw(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:1,transform:\"translate3d(0, {{ a }}, 0)\",offset:0}),Gu({opacity:0,transform:\"translate3d(0, {{ b }}, 0)\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e}})}function sw(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"translate3d({{ a }}, 0, 0)\",offset:0}),Gu({transform:\"translate3d({{ b }}, 0, 0)\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e}})}function rw(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"translate3d(0, {{ a }}, 0)\",offset:0}),Gu({transform:\"translate3d(0, {{ b }}, 0)\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e}})}function iw(t,e){return Xu([Gu({\"backface-visibility\":\"visible\"}),Wu(\"{{ timing }}s {{ delay }}s ease-in\",Zu([Gu({opacity:0,transform:\"perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)\",offset:0}),Gu({opacity:1,transform:\"perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)\",offset:.4}),Gu({transform:\"perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)\",offset:.6}),Gu({transform:\"perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)\",offset:.8}),Gu({transform:\"perspective(400px) rotate3d(0, 0, 0, 0)\",offset:1})]))],{params:{timing:1,delay:0,rotateX:t,rotateY:e}})}function ow(t,e){return Xu([Gu({\"backface-visibility\":\"visible\"}),Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"perspective(400px)\",offset:0}),Gu({opacity:1,transform:\"perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)\",offset:.3}),Gu({opacity:0,transform:\"perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)\",offset:1})]))],{params:{timing:1,delay:0,rotateX:t,rotateY:e}})}function aw(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({\"transform-origin\":\"{{ origin }}\",opacity:0,transform:\"rotate3d(0, 0, 1, {{ degrees }})\",offset:0}),Gu({\"transform-origin\":\"{{ origin }}\",opacity:1,transform:\"none\",offset:1})])),{params:{timing:1,delay:0,origin:t,degrees:e}})}function lw(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({\"transform-origin\":\"{{ origin }}\",opacity:1,transform:\"none\",offset:0}),Gu({\"transform-origin\":\"{{ origin }}\",opacity:0,transform:\"rotate3d(0, 0, 1, {{ degrees }})\",offset:1})])),{params:{timing:1,delay:0,origin:t,degrees:e}})}Xu([Gu({transform:\"translate3d(0, 0, 0)\"}),Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"translate3d(0, 0, 0)\",offset:.2}),Gu({transform:\"translate3d(0, -30px, 0)\",offset:.4}),Gu({transform:\"translate3d(0, 0, 0)\",offset:.53}),Gu({transform:\"translate3d(0, -15px, 0)\",offset:.7}),Gu({transform:\"translate3d(0, -4px, 0)\",offset:.9}),Gu({transform:\"translate3d(0, 0, 0)\",offset:1})]))],{params:{timing:1,delay:0}}),Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:1}),Gu({opacity:0}),Gu({opacity:1}),Gu({opacity:0}),Gu({opacity:1})])),{params:{timing:1,delay:0}}),Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"scale3d(1, 1, 1)\"}),Gu({transform:\"scale3d({{ scale }}, {{ scale }}, {{ scale }})\"}),Gu({transform:\"scale3d(1, 1, 1)\"})])),{params:{scale:1.25,timing:1,delay:0}}),Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"scale3d(1, 1, 1)\",offset:0}),Gu({transform:\"scale3d(1.25, 0.75, 1)\",offset:.3}),Gu({transform:\"scale3d(0.75, 1.25, 1)\",offset:.4}),Gu({transform:\"scale3d(1.15, 0.85, 1)\",offset:.5}),Gu({transform:\"scale3d(.95, 1.05, 1)\",offset:.65}),Gu({transform:\"scale3d(1.05, .95, 1)\",offset:.75}),Gu({transform:\"scale3d(1, 1, 1)\",offset:1})])),{params:{timing:1,delay:0}}),Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"translate3d(0, 0, 0)\",offset:0}),Gu({transform:\"translate3d(-10px, 0, 0)\",offset:.1}),Gu({transform:\"translate3d(10px, 0, 0)\",offset:.2}),Gu({transform:\"translate3d(-10px, 0, 0)\",offset:.3}),Gu({transform:\"translate3d(10px, 0, 0)\",offset:.4}),Gu({transform:\"translate3d(-10px, 0, 0)\",offset:.5}),Gu({transform:\"translate3d(10px, 0, 0)\",offset:.6}),Gu({transform:\"translate3d(-10px, 0, 0)\",offset:.7}),Gu({transform:\"translate3d(10px, 0, 0)\",offset:.8}),Gu({transform:\"translate3d(-10px, 0, 0)\",offset:.9}),Gu({transform:\"translate3d(0, 0, 0)\",offset:1})])),{params:{timing:1,delay:0}}),Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"rotate3d(0, 0, 1, 15deg)\",offset:.2}),Gu({transform:\"rotate3d(0, 0, 1, -10deg)\",offset:.4}),Gu({transform:\"rotate3d(0, 0, 1, 5deg)\",offset:.6}),Gu({transform:\"rotate3d(0, 0, 1, -5deg)\",offset:.8}),Gu({transform:\"rotate3d(0, 0, 1, 0deg)\",offset:1})])),{params:{timing:1,delay:0}}),Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"scale3d(1, 1, 1)\",offset:0}),Gu({transform:\"scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg)\",offset:.1}),Gu({transform:\"scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg)\",offset:.2}),Gu({transform:\"scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)\",offset:.3}),Gu({transform:\"scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)\",offset:.4}),Gu({transform:\"scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)\",offset:.5}),Gu({transform:\"scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)\",offset:.6}),Gu({transform:\"scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)\",offset:.7}),Gu({transform:\"scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)\",offset:.8}),Gu({transform:\"scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)\",offset:.9}),Gu({transform:\"scale3d(1, 1, 1)\",offset:1})])),{params:{timing:1,delay:0}}),Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"none\",offset:0}),Gu({transform:\"translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg)\",offset:.15}),Gu({transform:\"translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg)\",offset:.3}),Gu({transform:\"translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg)\",offset:.45}),Gu({transform:\"translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg)\",offset:.6}),Gu({transform:\"translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg)\",offset:.75}),Gu({transform:\"none\",offset:1})])),{params:{timing:1,delay:0}}),Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"none\",offset:0}),Gu({transform:\"none\",offset:.11}),Gu({transform:\"skewX(-12.5deg) skewY(-12.5deg)\",offset:.22}),Gu({transform:\"skewX(6.25deg) skewY(6.25deg)\",offset:.33}),Gu({transform:\"skewX(-3.125deg) skewY(-3.125deg)\",offset:.44}),Gu({transform:\"skewX(1.5625deg) skewY(1.5625deg)\",offset:.55}),Gu({transform:\"skewX(-0.78125deg) skewY(-0.78125deg)\",offset:.66}),Gu({transform:\"skewX(0.390625deg) skewY(0.390625deg)\",offset:.77}),Gu({transform:\"skewX(-0.1953125deg) skewY(-0.1953125deg)\",offset:.88}),Gu({transform:\"none\",offset:1})])),{params:{timing:1,delay:0}}),Xu(Wu(\"{{ timing }}s {{ delay }}s cubic-bezier(0.215, 0.610, 0.355, 1.000)\",Zu([Gu({opacity:0,transform:\"scale3d(.3, .3, .3)\",offset:0}),Gu({transform:\"scale3d(1.1, 1.1, 1.1)\",offset:.2}),Gu({transform:\"scale3d(.9, .9, .9)\",offset:.4}),Gu({opacity:1,transform:\"scale3d(1.03, 1.03, 1.03)\",offset:.6}),Gu({transform:\"scale3d(.97, .97, .97)\",offset:.8}),Gu({opacity:1,transform:\"scale3d(1, 1, 1)\",offset:1})])),{params:{timing:1,delay:0}}),Gb(\"-3000px\",\"25px\",\"-10px\",\"5px\"),Gb(\"3000px\",\"-25px\",\"10px\",\"-5px\"),Zb(\"-3000px\",\"25px\",\"-10px\",\"5px\"),Zb(\"3000px\",\"-25px\",\"10px\",\"-5px\"),Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({transform:\"scale3d(.9, .9, .9)\",offset:.2}),Gu({opacity:1,transform:\"scale3d({{ scale }}, {{ scale }}, {{ scale }})\",offset:.5}),Gu({opacity:1,transform:\"scale3d({{ scale }}, {{ scale }}, {{ scale }})\",offset:.55}),Gu({opacity:0,transform:\"scale3d(.3, .3, .3)\",offset:1})])),{params:{timing:1,delay:0,scale:1.1}}),Yb(\"10px\",\"-20px\",\"-20px\",\"2000px\"),Yb(\"-10px\",\"20px\",\"20px\",\"-2000px\"),Xb(\"20px\",\"-2000px\"),Xb(\"-20px\",\"2000px\"),Jb(0,0),tw(\"-100%\",0),tw(\"100%\",0),Jb(\"-100%\",0),Jb(\"100%\",0),ew(0,0),nw(\"-100%\",0),nw(\"100%\",0),ew(\"-100%\",0),ew(\"100%\",0),rw(\"-100%\",0),rw(\"100%\",0),sw(\"-100%\",0),sw(\"100%\",0),rw(0,\"-100%\"),rw(0,\"100%\"),sw(0,\"-100%\"),sw(0,\"100%\"),Xu([Gu({\"backface-visibility\":\"visible\"}),Wu(\"{{ timing }}s {{ delay }}s ease-out\",Zu([Gu({transform:\"perspective(400px) rotate3d(0, 1, 0, -360deg)\",offset:0}),Gu({transform:\"perspective(400px) scale3d(1.5, 1.5, 1.5) rotate3d(0, 1, 0, -190deg)\",offset:.4}),Gu({transform:\"perspective(400px) scale3d(1.5, 1.5, 1.5) rotate3d(0, 1, 0, -170deg)\",offset:.5}),Gu({transform:\"perspective(400px) scale3d(.95, .95, .95)\",offset:.8}),Gu({transform:\"perspective(400px)\",offset:1})]))],{params:{timing:1,delay:0}}),iw(1,0),iw(0,1),ow(1,0),ow(0,1),Xu(Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:0,transform:\"translate3d(100%, 0, 0) skewX(-30deg)\",offset:0}),Gu({opacity:1,transform:\"translate3d(0, 0, 0) skewX(0)\",offset:1})])),{params:{timing:1,delay:0}}),Xu(Wu(\"{{ timing }}s {{ delay }}s ease-out\",Zu([Gu({opacity:1,offset:0}),Gu({opacity:0,transform:\"translate3d(100%, 0, 0) skewX(30deg)\",offset:1})])),{params:{timing:1,delay:0}}),aw(\"center\",\"-200deg\"),aw(\"left bottom\",\"-45deg\"),aw(\"right bottom\",\"45deg\"),aw(\"left bottom\",\"45deg\"),aw(\"right bottom\",\"-90deg\"),lw(\"center\",\"200deg\"),lw(\"left bottom\",\"45deg\"),lw(\"right bottom\",\"-45deg\"),lw(\"left bottom\",\"-45deg\"),lw(\"right bottom\",\"90deg\"),Xu([Gu({\"transform-origin\":\"top left\"}),Wu(\"{{ timing }}s {{ delay }}s ease-in-out\",Zu([Gu({transform:\"rotate3d(0, 0, 1, 80deg)\",offset:.2}),Gu({transform:\"rotate3d(0, 0, 1, 60deg)\",offset:.4}),Gu({transform:\"rotate3d(0, 0, 1, 80deg)\",offset:.6}),Gu({opacity:1,transform:\"rotate3d(0, 0, 1, 60deg)\",offset:.8}),Gu({opacity:0,transform:\"translate3d(0, 700px, 0)\",offset:1})]))],{params:{timing:1,delay:0}}),Xu([Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:0,transform:\"scale(0.1) rotate(30deg)\",\"transform-origin\":\"center bottom\",offset:0}),Gu({opacity:.5,transform:\"rotate(-10deg)\",offset:.5}),Gu({opacity:.7,transform:\"rotate(3deg)\",offset:.7}),Gu({opacity:1,transform:\"scale(1)\",offset:1})]))],{params:{timing:1,delay:0}}),Xu([Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:0,transform:\"translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg)\",offset:0}),Gu({opacity:1,transform:\"none\",offset:1})]))],{params:{timing:1,delay:0}}),Xu([Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:1,offset:0}),Gu({opacity:0,transform:\"translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg)\",offset:1})]))],{params:{timing:1,delay:0}});const cw=Xu([Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:0,transform:\"scale3d(.3, .3, .3)\",offset:0}),Gu({opacity:1,transform:\"scale3d(1, 1, 1)\",offset:.5})]))],{params:{timing:1,delay:0}});function uw(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)\",Zu([Gu({opacity:0,transform:\"scale3d(.1, .1, .1) translate3d(0, {{ a }}, 0)\",offset:0}),Gu({opacity:1,transform:\"scale3d(.475, .475, .475) translate3d(0, {{ b }}, 0)\",offset:.6})])),{params:{timing:1,delay:0,a:t,b:e}})}function hw(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)\",Zu([Gu({opacity:0,transform:\"scale3d(.1, .1, .1) translate3d({{ a }}, 0, 0)\",offset:0}),Gu({opacity:1,transform:\"scale3d(.475, .475, .475) translate3d({{ b }}, 0, 0)\",offset:.6})])),{params:{timing:1,delay:0,a:t,b:e}})}function dw(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)\",Zu([Gu({opacity:1,transform:\"scale3d(.475, .475, .475) translate3d(0, {{ a }}, 0)\",offset:.4}),Gu({opacity:0,transform:\"scale3d(.1, .1, .1) translate3d(0, {{ b }}, 0)\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e}})}function pw(t,e){return Xu(Wu(\"{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)\",Zu([Gu({opacity:1,transform:\"scale3d(.475, .475, .475) translate3d({{ a }}, 0, 0)\",offset:.4}),Gu({opacity:0,transform:\"scale3d(.1, .1, .1) translate3d({{ b }}, 0, 0)\",offset:1})])),{params:{timing:1,delay:0,a:t,b:e}})}uw(\"-1000px\",\"10px\"),uw(\"1000px\",\"-10px\"),hw(\"-1000px\",\"10px\"),hw(\"1000px\",\"-10px\"),Xu([Wu(\"{{ timing }}s {{ delay }}s\",Zu([Gu({opacity:1,offset:0}),Gu({opacity:0,transform:\"scale3d(.3, .3, .3)\",offset:.5}),Gu({opacity:0,offset:1})]))],{params:{timing:1,delay:0}}),dw(\"-60px\",\"2000px\"),dw(\"60px\",\"-2000px\"),pw(\"42px\",\"-2000px\"),pw(\"-42px\",\"2000px\");let fw=(()=>{class t{constructor(){this.zoomIn=!1,this.zoomInDown=!1,this.zoomInLeft=!1,this.zoomOut=!1,this.zoomOutUp=!1,this.zoomOutRight=!1,this.zooming=[\"zoomIn\",\"zoomInDown\",\"zoomInLeft\",\"zoomOut\",\"zoomOutUp\",\"zoomOutRight\"]}ngOnInit(){this.candidate=history.state}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275cmp=Mt({type:t,selectors:[[\"app-match-made\"]],decls:19,vars:8,consts:[[\"fxLayout\",\"row\",\"fxLayoutAlign\",\"center center\",1,\"login-wrapper\"],[1,\"box\",\"matchmade\"],[\"src\",\"/assets/juliet-profile.png\",1,\"mat-card-avatar\"],[\"viewBox\",\"0 0 32 29.6\",1,\"heart\"],[\"d\",\"M23.6,0c-3.4,0-6.3,2.7-7.6,5.6C14.7,2.7,11.8,0,8.4,0C3.8,0,0,3.8,0,8.4c0,9.4,9.5,11.9,16,21.2\\n        c6.1-9.3,16-12.1,16-21.2C32,3.8,28.2,0,23.6,0z\"],[1,\"mat-card-avatar\",3,\"src\"]],template:function(t,e){1&t&&(zi(0,\"div\",0),zi(1,\"mat-card\",1),qi(2,\"mat-card-header\"),zi(3,\"mat-card-content\"),qi(4,\"img\",2),Te.lFrame.currentNamespace=de,zi(5,\"svg\",3),qi(6,\"path\",4),$i(),Te.lFrame.currentNamespace=null,qi(7,\"img\",5),zi(8,\"P\"),co(9),qi(10,\"br\"),qi(11,\"br\"),co(12,\" Deny thy father and refuse thy name. Or if thou wilt not, be but sworn my love And I\\u2019ll no longer be a Capulet.\"),qi(13,\"br\"),qi(14,\"br\"),co(15),qi(16,\"br\"),qi(17,\"br\"),co(18),$i(),$i(),$i(),$i()),2&t&&(fr(1),Bi(\"@zoomIn\",e.zoomIn),fr(6),Bi(\"src\",null==e.candidate?null:e.candidate.avatar,bs),fr(2),fo(\" O \",null==e.candidate?null:e.candidate.name,\", \",null==e.candidate?null:e.candidate.name,\", wherefore art thou \",null==e.candidate?null:e.candidate.name,\"? \"),fr(6),po(\"That which we call a rose By any other name would smell as sweet; So \",null==e.candidate?null:e.candidate.name,\" would, were he not \",null==e.candidate?null:e.candidate.name,\" call\\u2019d, Retain that dear perfection which he owes Without that title. \"),fr(3),ho(\" \",null==e.candidate?null:e.candidate.name,\", doff thy name, And for that name, which is no part of thee, Take all myself. \"))},directives:[rg,hg,Nb,Vb,Lb],styles:[\"\"],encapsulation:2,data:{animation:[Qu(\"zoomIn\",[Yu(\"* => *\",Ju(cw))])]}}),t})(),mw=(()=>{class t{constructor(t){this.http=t,this.apiURL=mu.settings.endPointApiUrl,this.httpOptions={headers:new jc({\"Content-Type\":\"application/json\"})}}getNext(){return this.http.get(this.apiURL+\"/candidates/match\")}}return t.\\u0275fac=function(e){return new(e||t)(ds(Jc))},t.\\u0275prov=at({token:t,factory:t.\\u0275fac,providedIn:\"root\"}),t})();class gw{constructor(t=!1,e,n=!0){this._multiple=t,this._emitChanges=n,this._selection=new Set,this._deselectedToEmit=[],this._selectedToEmit=[],this.changed=new S,e&&e.length&&(t?e.forEach(t=>this._markSelected(t)):this._markSelected(e[0]),this._selectedToEmit.length=0)}get selected(){return this._selected||(this._selected=Array.from(this._selection.values())),this._selected}select(...t){this._verifyValueAssignment(t),t.forEach(t=>this._markSelected(t)),this._emitChangeEvent()}deselect(...t){this._verifyValueAssignment(t),t.forEach(t=>this._unmarkSelected(t)),this._emitChangeEvent()}toggle(t){this.isSelected(t)?this.deselect(t):this.select(t)}clear(){this._unmarkAll(),this._emitChangeEvent()}isSelected(t){return this._selection.has(t)}isEmpty(){return 0===this._selection.size}hasValue(){return!this.isEmpty()}sort(t){this._multiple&&this.selected&&this._selected.sort(t)}isMultipleSelection(){return this._multiple}_emitChangeEvent(){this._selected=null,(this._selectedToEmit.length||this._deselectedToEmit.length)&&(this.changed.next({source:this,added:this._selectedToEmit,removed:this._deselectedToEmit}),this._deselectedToEmit=[],this._selectedToEmit=[])}_markSelected(t){this.isSelected(t)||(this._multiple||this._unmarkAll(),this._selection.add(t),this._emitChanges&&this._selectedToEmit.push(t))}_unmarkSelected(t){this.isSelected(t)&&(this._selection.delete(t),this._emitChanges&&this._deselectedToEmit.push(t))}_unmarkAll(){this.isEmpty()||this._selection.forEach(t=>this._unmarkSelected(t))}_verifyValueAssignment(t){}}let yw=(()=>{class t{}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275dir=$t({type:t}),t})();const _w=[\"*\"],vw=new $n(\"MatChipRemove\"),bw=new $n(\"MatChipAvatar\"),ww=new $n(\"MatChipTrailingIcon\");class xw{constructor(t){this._elementRef=t}}const Sw=yb(mb(gb(xw),\"primary\"),-1);let Cw=(()=>{class t extends Sw{constructor(t,e,n,s,r,i,o,a){super(t),this._elementRef=t,this._ngZone=e,this._changeDetectorRef=r,this._hasFocus=!1,this.chipListSelectable=!0,this._chipListMultiple=!1,this._chipListDisabled=!1,this._selected=!1,this._selectable=!0,this._disabled=!1,this._removable=!0,this._onFocus=new S,this._onBlur=new S,this.selectionChange=new Da,this.destroyed=new Da,this.removed=new Da,this._addHostClassName(),this._chipRippleTarget=i.createElement(\"div\"),this._chipRippleTarget.classList.add(\"mat-chip-ripple\"),this._elementRef.nativeElement.appendChild(this._chipRippleTarget),this._chipRipple=new Eb(this,e,this._chipRippleTarget,n),this._chipRipple.setupTriggerEvents(t),this.rippleConfig=s||{},this._animationsDisabled=\"NoopAnimations\"===o,this.tabIndex=null!=a&&parseInt(a)||-1}get rippleDisabled(){return this.disabled||this.disableRipple||this._animationsDisabled||!!this.rippleConfig.disabled}get selected(){return this._selected}set selected(t){const e=zm(t);e!==this._selected&&(this._selected=e,this._dispatchSelectionChange())}get value(){return void 0!==this._value?this._value:this._elementRef.nativeElement.textContent}set value(t){this._value=t}get selectable(){return this._selectable&&this.chipListSelectable}set selectable(t){this._selectable=zm(t)}get disabled(){return this._chipListDisabled||this._disabled}set disabled(t){this._disabled=zm(t)}get removable(){return this._removable}set removable(t){this._removable=zm(t)}get ariaSelected(){return this.selectable&&(this._chipListMultiple||this.selected)?this.selected.toString():null}_addHostClassName(){const t=\"mat-basic-chip\",e=this._elementRef.nativeElement;e.hasAttribute(t)||e.tagName.toLowerCase()===t?e.classList.add(t):e.classList.add(\"mat-standard-chip\")}ngOnDestroy(){this.destroyed.emit({chip:this}),this._chipRipple._removeTriggerEvents()}select(){this._selected||(this._selected=!0,this._dispatchSelectionChange(),this._changeDetectorRef.markForCheck())}deselect(){this._selected&&(this._selected=!1,this._dispatchSelectionChange(),this._changeDetectorRef.markForCheck())}selectViaInteraction(){this._selected||(this._selected=!0,this._dispatchSelectionChange(!0),this._changeDetectorRef.markForCheck())}toggleSelected(t=!1){return this._selected=!this.selected,this._dispatchSelectionChange(t),this._changeDetectorRef.markForCheck(),this.selected}focus(){this._hasFocus||(this._elementRef.nativeElement.focus(),this._onFocus.next({chip:this})),this._hasFocus=!0}remove(){this.removable&&this.removed.emit({chip:this})}_handleClick(t){this.disabled?t.preventDefault():t.stopPropagation()}_handleKeydown(t){if(!this.disabled)switch(t.keyCode){case 46:case 8:this.remove(),t.preventDefault();break;case 32:this.selectable&&this.toggleSelected(!0),t.preventDefault()}}_blur(){this._ngZone.onStable.pipe(Zf(1)).subscribe(()=>{this._ngZone.run(()=>{this._hasFocus=!1,this._onBlur.next({chip:this})})})}_dispatchSelectionChange(t=!1){this.selectionChange.emit({source:this,isUserInput:t,selected:this._selected})}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Mo),Ui(vl),Ui(Zv),Ui(kb,8),Ui(aa),Ui(sc),Ui(Tp,8),Bn(\"tabindex\"))},t.\\u0275dir=$t({type:t,selectors:[[\"mat-basic-chip\"],[\"\",\"mat-basic-chip\",\"\"],[\"mat-chip\"],[\"\",\"mat-chip\",\"\"]],contentQueries:function(t,e,n){if(1&t&&(Wa(n,bw,!0),Wa(n,ww,!0),Wa(n,vw,!0)),2&t){let t;Qa(t=Ka())&&(e.avatar=t.first),Qa(t=Ka())&&(e.trailingIcon=t.first),Qa(t=Ka())&&(e.removeIcon=t.first)}},hostAttrs:[\"role\",\"option\",1,\"mat-chip\",\"mat-focus-indicator\"],hostVars:14,hostBindings:function(t,e){1&t&&Ki(\"click\",function(t){return e._handleClick(t)})(\"keydown\",function(t){return e._handleKeydown(t)})(\"focus\",function(){return e.focus()})(\"blur\",function(){return e._blur()}),2&t&&(Mi(\"tabindex\",e.disabled?null:e.tabIndex)(\"disabled\",e.disabled||null)(\"aria-disabled\",e.disabled.toString())(\"aria-selected\",e.ariaSelected),ro(\"mat-chip-selected\",e.selected)(\"mat-chip-with-avatar\",e.avatar)(\"mat-chip-with-trailing-icon\",e.trailingIcon||e.removeIcon)(\"mat-chip-disabled\",e.disabled)(\"_mat-animation-noopable\",e._animationsDisabled))},inputs:{color:\"color\",disableRipple:\"disableRipple\",tabIndex:\"tabIndex\",selected:\"selected\",value:\"value\",selectable:\"selectable\",disabled:\"disabled\",removable:\"removable\"},outputs:{selectionChange:\"selectionChange\",destroyed:\"destroyed\",removed:\"removed\"},exportAs:[\"matChip\"],features:[Ti]}),t})();const Ew=new $n(\"mat-chips-default-options\");class kw{constructor(t,e,n,s){this._defaultErrorStateMatcher=t,this._parentForm=e,this._parentFormGroup=n,this.ngControl=s}}const Tw=_b(kw);let Aw=0;class Iw{constructor(t,e){this.source=t,this.value=e}}let Ow=(()=>{class t extends Tw{constructor(t,e,n,s,r,i,o){super(i,s,r,o),this._elementRef=t,this._changeDetectorRef=e,this._dir=n,this.ngControl=o,this.controlType=\"mat-chip-list\",this._lastDestroyedChipIndex=null,this._destroyed=new S,this._uid=\"mat-chip-list-\"+Aw++,this._tabIndex=0,this._userTabIndex=null,this._onTouched=()=>{},this._onChange=()=>{},this._multiple=!1,this._compareWith=(t,e)=>t===e,this._required=!1,this._disabled=!1,this.ariaOrientation=\"horizontal\",this._selectable=!0,this.change=new Da,this.valueChange=new Da,this.ngControl&&(this.ngControl.valueAccessor=this)}get selected(){return this.multiple?this._selectionModel.selected:this._selectionModel.selected[0]}get role(){return this.empty?null:\"listbox\"}get multiple(){return this._multiple}set multiple(t){this._multiple=zm(t),this._syncChipsState()}get compareWith(){return this._compareWith}set compareWith(t){this._compareWith=t,this._selectionModel&&this._initializeSelection()}get value(){return this._value}set value(t){this.writeValue(t),this._value=t}get id(){return this._chipInput?this._chipInput.id:this._uid}get required(){return this._required}set required(t){this._required=zm(t),this.stateChanges.next()}get placeholder(){return this._chipInput?this._chipInput.placeholder:this._placeholder}set placeholder(t){this._placeholder=t,this.stateChanges.next()}get focused(){return this._chipInput&&this._chipInput.focused||this._hasFocusedChip()}get empty(){return(!this._chipInput||this._chipInput.empty)&&(!this.chips||0===this.chips.length)}get shouldLabelFloat(){return!this.empty||this.focused}get disabled(){return this.ngControl?!!this.ngControl.disabled:this._disabled}set disabled(t){this._disabled=zm(t),this._syncChipsState()}get selectable(){return this._selectable}set selectable(t){this._selectable=zm(t),this.chips&&this.chips.forEach(t=>t.chipListSelectable=this._selectable)}set tabIndex(t){this._userTabIndex=t,this._tabIndex=t}get chipSelectionChanges(){return q(...this.chips.map(t=>t.selectionChange))}get chipFocusChanges(){return q(...this.chips.map(t=>t._onFocus))}get chipBlurChanges(){return q(...this.chips.map(t=>t._onBlur))}get chipRemoveChanges(){return q(...this.chips.map(t=>t.destroyed))}ngAfterContentInit(){this._keyManager=new Jv(this.chips).withWrap().withVerticalOrientation().withHomeAndEnd().withHorizontalOrientation(this._dir?this._dir.value:\"ltr\"),this._dir&&this._dir.change.pipe($f(this._destroyed)).subscribe(t=>this._keyManager.withHorizontalOrientation(t)),this._keyManager.tabOut.pipe($f(this._destroyed)).subscribe(()=>{this._allowFocusEscape()}),this.chips.changes.pipe($g(null),$f(this._destroyed)).subscribe(()=>{this.disabled&&Promise.resolve().then(()=>{this._syncChipsState()}),this._resetChips(),this._initializeSelection(),this._updateTabIndex(),this._updateFocusForDestroyedChips(),this.stateChanges.next()})}ngOnInit(){this._selectionModel=new gw(this.multiple,void 0,!1),this.stateChanges.next()}ngDoCheck(){this.ngControl&&(this.updateErrorState(),this.ngControl.disabled!==this._disabled&&(this.disabled=!!this.ngControl.disabled))}ngOnDestroy(){this._destroyed.next(),this._destroyed.complete(),this.stateChanges.complete(),this._dropSubscriptions()}registerInput(t){this._chipInput=t,this._elementRef.nativeElement.setAttribute(\"data-mat-chip-input\",t.id)}setDescribedByIds(t){this._ariaDescribedby=t.join(\" \")}writeValue(t){this.chips&&this._setSelectionByValue(t,!1)}registerOnChange(t){this._onChange=t}registerOnTouched(t){this._onTouched=t}setDisabledState(t){this.disabled=t,this.stateChanges.next()}onContainerClick(t){this._originatesFromChip(t)||this.focus()}focus(t){this.disabled||this._chipInput&&this._chipInput.focused||(this.chips.length>0?(this._keyManager.setFirstItemActive(),this.stateChanges.next()):(this._focusInput(t),this.stateChanges.next()))}_focusInput(t){this._chipInput&&this._chipInput.focus(t)}_keydown(t){const e=t.target;8===t.keyCode&&this._isInputEmpty(e)?(this._keyManager.setLastItemActive(),t.preventDefault()):e&&e.classList.contains(\"mat-chip\")&&(this._keyManager.onKeydown(t),this.stateChanges.next())}_updateTabIndex(){this._tabIndex=this._userTabIndex||(0===this.chips.length?-1:0)}_updateFocusForDestroyedChips(){if(null!=this._lastDestroyedChipIndex)if(this.chips.length){const t=Math.min(this._lastDestroyedChipIndex,this.chips.length-1);this._keyManager.setActiveItem(t)}else this.focus();this._lastDestroyedChipIndex=null}_isValidIndex(t){return t>=0&&t<this.chips.length}_isInputEmpty(t){return!(!t||\"input\"!==t.nodeName.toLowerCase()||t.value)}_setSelectionByValue(t,e=!0){if(this._clearSelection(),this.chips.forEach(t=>t.deselect()),Array.isArray(t))t.forEach(t=>this._selectValue(t,e)),this._sortValues();else{const n=this._selectValue(t,e);n&&e&&this._keyManager.setActiveItem(n)}}_selectValue(t,e=!0){const n=this.chips.find(e=>null!=e.value&&this._compareWith(e.value,t));return n&&(e?n.selectViaInteraction():n.select(),this._selectionModel.select(n)),n}_initializeSelection(){Promise.resolve().then(()=>{(this.ngControl||this._value)&&(this._setSelectionByValue(this.ngControl?this.ngControl.value:this._value,!1),this.stateChanges.next())})}_clearSelection(t){this._selectionModel.clear(),this.chips.forEach(e=>{e!==t&&e.deselect()}),this.stateChanges.next()}_sortValues(){this._multiple&&(this._selectionModel.clear(),this.chips.forEach(t=>{t.selected&&this._selectionModel.select(t)}),this.stateChanges.next())}_propagateChanges(t){let e=null;e=Array.isArray(this.selected)?this.selected.map(t=>t.value):this.selected?this.selected.value:t,this._value=e,this.change.emit(new Iw(this,e)),this.valueChange.emit(e),this._onChange(e),this._changeDetectorRef.markForCheck()}_blur(){this._hasFocusedChip()||this._keyManager.setActiveItem(-1),this.disabled||(this._chipInput?setTimeout(()=>{this.focused||this._markAsTouched()}):this._markAsTouched())}_markAsTouched(){this._onTouched(),this._changeDetectorRef.markForCheck(),this.stateChanges.next()}_allowFocusEscape(){-1!==this._tabIndex&&(this._tabIndex=-1,setTimeout(()=>{this._tabIndex=this._userTabIndex||0,this._changeDetectorRef.markForCheck()}))}_resetChips(){this._dropSubscriptions(),this._listenToChipsFocus(),this._listenToChipsSelection(),this._listenToChipsRemoved()}_dropSubscriptions(){this._chipFocusSubscription&&(this._chipFocusSubscription.unsubscribe(),this._chipFocusSubscription=null),this._chipBlurSubscription&&(this._chipBlurSubscription.unsubscribe(),this._chipBlurSubscription=null),this._chipSelectionSubscription&&(this._chipSelectionSubscription.unsubscribe(),this._chipSelectionSubscription=null),this._chipRemoveSubscription&&(this._chipRemoveSubscription.unsubscribe(),this._chipRemoveSubscription=null)}_listenToChipsSelection(){this._chipSelectionSubscription=this.chipSelectionChanges.subscribe(t=>{t.source.selected?this._selectionModel.select(t.source):this._selectionModel.deselect(t.source),this.multiple||this.chips.forEach(t=>{!this._selectionModel.isSelected(t)&&t.selected&&t.deselect()}),t.isUserInput&&this._propagateChanges()})}_listenToChipsFocus(){this._chipFocusSubscription=this.chipFocusChanges.subscribe(t=>{let e=this.chips.toArray().indexOf(t.chip);this._isValidIndex(e)&&this._keyManager.updateActiveItem(e),this.stateChanges.next()}),this._chipBlurSubscription=this.chipBlurChanges.subscribe(()=>{this._blur(),this.stateChanges.next()})}_listenToChipsRemoved(){this._chipRemoveSubscription=this.chipRemoveChanges.subscribe(t=>{const e=t.chip,n=this.chips.toArray().indexOf(t.chip);this._isValidIndex(n)&&e._hasFocus&&(this._lastDestroyedChipIndex=n)})}_originatesFromChip(t){let e=t.target;for(;e&&e!==this._elementRef.nativeElement;){if(e.classList.contains(\"mat-chip\"))return!0;e=e.parentElement}return!1}_hasFocusedChip(){return this.chips&&this.chips.some(t=>t._hasFocus)}_syncChipsState(){this.chips&&this.chips.forEach(t=>{t._chipListDisabled=this._disabled,t._chipListMultiple=this.multiple})}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Mo),Ui(aa),Ui(Wm,8),Ui(Sf,8),Ui(Tf,8),Ui(vb),Ui(Zp,10))},t.\\u0275cmp=Mt({type:t,selectors:[[\"mat-chip-list\"]],contentQueries:function(t,e,n){if(1&t&&Wa(n,Cw,!0),2&t){let t;Qa(t=Ka())&&(e.chips=t)}},hostAttrs:[1,\"mat-chip-list\"],hostVars:15,hostBindings:function(t,e){1&t&&Ki(\"focus\",function(){return e.focus()})(\"blur\",function(){return e._blur()})(\"keydown\",function(t){return e._keydown(t)}),2&t&&(mo(\"id\",e._uid),Mi(\"tabindex\",e.disabled?null:e._tabIndex)(\"aria-describedby\",e._ariaDescribedby||null)(\"aria-required\",e.role?e.required:null)(\"aria-disabled\",e.disabled.toString())(\"aria-invalid\",e.errorState)(\"aria-multiselectable\",e.multiple)(\"role\",e.role)(\"aria-orientation\",e.ariaOrientation),ro(\"mat-chip-list-disabled\",e.disabled)(\"mat-chip-list-invalid\",e.errorState)(\"mat-chip-list-required\",e.required))},inputs:{ariaOrientation:[\"aria-orientation\",\"ariaOrientation\"],multiple:\"multiple\",compareWith:\"compareWith\",value:\"value\",required:\"required\",placeholder:\"placeholder\",disabled:\"disabled\",selectable:\"selectable\",tabIndex:\"tabIndex\",errorStateMatcher:\"errorStateMatcher\"},outputs:{change:\"change\",valueChange:\"valueChange\"},exportAs:[\"matChipList\"],features:[Ro([{provide:yw,useExisting:t}]),Ti],ngContentSelectors:_w,decls:2,vars:0,consts:[[1,\"mat-chip-list-wrapper\"]],template:function(t,e){1&t&&(Ji(),zi(0,\"div\",0),to(1),$i())},styles:['.mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\"\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n'],encapsulation:2,changeDetection:0}),t})();const Rw={separatorKeyCodes:[13]};let Pw=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},providers:[vb,{provide:Ew,useValue:Rw}],imports:[[pb]]}),t})();function Lw(t,e){if(1&t&&(zi(0,\"mat-chip\"),zi(1,\"b\"),co(2),$i(),$i()),2&t){const t=e.$implicit;fr(2),uo(t)}}function Dw(t,e){if(1&t){const t=Ie();zi(0,\"mat-card\",1),zi(1,\"mat-card-header\"),zi(2,\"mat-card-title\"),zi(3,\"b\"),co(4),$i(),$i(),$i(),zi(5,\"mat-card-content\"),zi(6,\"p\"),qi(7,\"img\",2),zi(8,\"mat-chip-list\"),ji(9,Lw,3,1,\"mat-chip\",3),$i(),$i(),$i(),zi(10,\"mat-card-actions\",4),zi(11,\"button\",5),Ki(\"click\",function(){Re(t);const e=Yi();return e.clear(e.zooming[0])}),zi(12,\"mat-icon\"),co(13,\"clear\"),$i(),$i(),zi(14,\"button\",6),Ki(\"click\",function(){Re(t);const e=Yi();return e.favorite(e.candidate.id)}),zi(15,\"mat-icon\"),co(16,\"favorite\"),$i(),$i(),$i(),$i()}if(2&t){const t=Yi();Bi(\"@zoomIn\",t.zoomIn),fr(4),uo(t.candidate.name),fr(3),Bi(\"src\",t.candidate.avatar,bs),fr(2),Bi(\"ngForOf\",null==t.candidate?null:t.candidate.props)}}let Fw=(()=>{class t{constructor(t,e){this.matchService=t,this.router=e,this.zoomIn=!1,this.zoomInDown=!1,this.zoomInLeft=!1,this.zoomOut=!1,this.zoomOutUp=!1,this.zoomOutRight=!1,this.zooming=[\"zoomIn\",\"zoomInDown\",\"zoomInLeft\",\"zoomOut\",\"zoomOutUp\",\"zoomOutRight\"]}ngOnInit(){this.getNext()}getNext(){this.matchService.getNext().subscribe(t=>{this.candidate=t})}clear(t){this[t]=!this[t],this.getNext()}favorite(t){this.router.navigate([\"/matchmade\"],{state:this.candidate})}}return t.\\u0275fac=function(e){return new(e||t)(Ui(mw),Ui(Sv))},t.\\u0275cmp=Mt({type:t,selectors:[[\"app-match-candidate\"]],decls:1,vars:1,consts:[[\"class\",\"box\",4,\"ngIf\"],[1,\"box\"],[1,\"\",3,\"src\"],[4,\"ngFor\",\"ngForOf\"],[1,\"actions\"],[\"color\",\"warn\",\"mat-fab\",\"\",3,\"click\"],[\"color\",\"primary\",\"mat-fab\",\"\",3,\"click\"]],template:function(t,e){1&t&&ji(0,Dw,17,4,\"mat-card\",0),2&t&&Bi(\"ngIf\",e.candidate)},directives:[Ac,Nb,Vb,Db,Lb,Ow,kc,Fb,qb,Cw],styles:[\"\"],encapsulation:2,data:{animation:[Qu(\"zoomIn\",[Yu(\"* => *\",Ju(cw))])]}}),t})();const Nw=[{path:\"\",pathMatch:\"full\",redirectTo:\"login\"},{path:\"login\",component:Kb},{path:\"match\",component:(()=>{class t{ngOnInit(){}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275cmp=Mt({type:t,selectors:[[\"app-match\"]],decls:11,vars:0,consts:[[\"fxLayout\",\"row\",\"fxLayoutAlign\",\"center center\",1,\"login-wrapper\"],[1,\"box\"],[\"src\",\"/assets/profile.png\",1,\"mat-card-avatar\"]],template:function(t,e){1&t&&(zi(0,\"div\",0),zi(1,\"mat-card\",1),zi(2,\"mat-card-header\"),qi(3,\"img\",2),zi(4,\"mat-card-title\"),zi(5,\"b\"),co(6,\"YouthFulLoveChild1577\"),$i(),$i(),$i(),zi(7,\"mat-card-content\"),zi(8,\"p\"),co(9,\" Come, night, come, darling, come, thou day in night, For thou wilt lie upon the wings of night Whiter than new snow on a raven's back. Come, gentle night, come, loving, black-browed night, Give me my love, and, when he shall die, Take him and cut him out in little stars. \"),$i(),$i(),$i(),qi(10,\"app-match-candidate\"),$i())},directives:[rg,hg,Nb,Vb,Db,Lb,Fw],styles:[\"\"]}),t})()},{path:\"matchmade\",component:fw}];let Vw=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},imports:[[Mv.forRoot(Nw)],Mv]}),t})();const Mw=[\"*\",[[\"mat-toolbar-row\"]]],jw=[\"*\",\"mat-toolbar-row\"];class Uw{constructor(t){this._elementRef=t}}const Bw=mb(Uw);let Hw=(()=>{class t{}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275dir=$t({type:t,selectors:[[\"mat-toolbar-row\"]],hostAttrs:[1,\"mat-toolbar-row\"],exportAs:[\"matToolbarRow\"]}),t})(),zw=(()=>{class t extends Bw{constructor(t,e,n){super(t),this._platform=e,this._document=n}ngAfterViewInit(){this._platform.isBrowser&&(this._checkToolbarMixedModes(),this._toolbarRows.changes.subscribe(()=>this._checkToolbarMixedModes()))}_checkToolbarMixedModes(){}}return t.\\u0275fac=function(e){return new(e||t)(Ui(Mo),Ui(Zv),Ui(sc))},t.\\u0275cmp=Mt({type:t,selectors:[[\"mat-toolbar\"]],contentQueries:function(t,e,n){if(1&t&&Wa(n,Hw,!0),2&t){let t;Qa(t=Ka())&&(e._toolbarRows=t)}},hostAttrs:[1,\"mat-toolbar\"],hostVars:4,hostBindings:function(t,e){2&t&&ro(\"mat-toolbar-multiple-rows\",e._toolbarRows.length>0)(\"mat-toolbar-single-row\",0===e._toolbarRows.length)},inputs:{color:\"color\"},exportAs:[\"matToolbar\"],features:[Ti],ngContentSelectors:jw,decls:2,vars:0,template:function(t,e){1&t&&(Ji(Mw),to(0),to(1,1))},styles:[\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"],encapsulation:2,changeDetection:0}),t})(),$w=(()=>{class t{}return t.\\u0275mod=Ht({type:t}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},imports:[[pb],pb]}),t})(),qw=(()=>{class t{constructor(){this.title=\"Darling wherefore art thou my love\"}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275cmp=Mt({type:t,selectors:[[\"app-root\"]],decls:7,vars:0,consts:[[\"color\",\"primary\",1,\"app-header\"],[1,\"nav-tool-items\"],[\"mat-raised-button\",\"\",\"routerLink\",\"login\",\"routerLinkActive\",\"active\"]],template:function(t,e){1&t&&(zi(0,\"mat-toolbar\",0),zi(1,\"div\"),co(2,\" Darling wherefore art thou my love \"),$i(),zi(3,\"span\",1),zi(4,\"a\",2),co(5,\"Log in\"),$i(),$i(),$i(),qi(6,\"router-outlet\"))},directives:[zw,Qb,Ev,Tv,Av],styles:[\"\"]}),t})(),Qw=(()=>{class t{}return t.\\u0275mod=Ht({type:t,bootstrap:[qw]}),t.\\u0275inj=lt({factory:function(e){return new(e||t)},providers:[mu,{provide:Xa,useFactory:Ww,deps:[mu],multi:!0}],imports:[[zu,fu,Vw,Ip,Rf,Of,Sg,$w,Wb,Mb,Pw]]}),t})();function Ww(t){return()=>t.load()}(function(){if(Pl)throw new Error(\"Cannot enable prod mode after platform setup.\");Rl=!1})(),Bu().bootstrapModule(Qw).catch(t=>console.error(t))},zn8P:function(t,e){function n(t){return Promise.resolve().then(function(){var e=new Error(\"Cannot find module '\"+t+\"'\");throw e.code=\"MODULE_NOT_FOUND\",e})}n.keys=function(){return[]},n.resolve=n,t.exports=n,n.id=\"zn8P\"}},[[0,0]]]);"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 440280,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:21:36.595Z",
        "time": 348.4859999989567,
        "timings": {
          "blocked": 7.688999996882863,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.2330000000000001,
          "wait": 83.57899999844982,
          "receive": 256.985000003624,
          "_blocked_queueing": 6.502999996882863
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/styles.ee04d1000c72ad3f51f4.css"
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/assets/background.jpg",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/assets/background.jpg"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "no-cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "image"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/styles.ee04d1000c72ad3f51f4.css"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:21:37 GMT"
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "content-length",
              "value": "287261"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:52 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db8-4621d\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 287261,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 288076,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:21:36.694Z",
        "time": 340.67700000014156,
        "timings": {
          "blocked": 3.0680000012165403,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.46299999999999997,
          "wait": 97.53400000134693,
          "receive": 239.6119999975781,
          "_blocked_queueing": 2.40000000121654
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/"
        },
        "_priority": "VeryHigh",
        "_resourceType": "font",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2",
          "httpVersion": "h3-29",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "fonts.gstatic.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/s/roboto/v20/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "origin",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "x-client-data",
              "value": "CJa2yQEIo7bJAQjEtskBCKmdygEI+MfKAQiymssBCOScywEIjZ3LAQipncsB"
            },
            {
              "name": "sec-fetch-site",
              "value": "cross-site"
            },
            {
              "name": "sec-fetch-mode",
              "value": "cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "font"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3-29",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-type",
              "value": "font/woff2"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "content-length",
              "value": "11016"
            },
            {
              "name": "date",
              "value": "Thu, 25 Mar 2021 08:24:24 GMT"
            },
            {
              "name": "expires",
              "value": "Fri, 25 Mar 2022 08:24:24 GMT"
            },
            {
              "name": "last-modified",
              "value": "Wed, 24 Jul 2019 01:18:50 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "sffe"
            },
            {
              "name": "x-xss-protection",
              "value": "0"
            },
            {
              "name": "age",
              "value": "359833"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "alt-svc",
              "value": "h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\""
            }
          ],
          "cookies": [],
          "content": {
            "size": 11016,
            "mimeType": "font/woff2",
            "text": "d09GMgABAAAAACsIAA4AAAAAVHAAACqxAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGmQbmWQcg3wGYACHbBEMCvAE2SYLg3IAATYCJAOHYAQgBYJ0ByAbL0azoqzvUpziv07gxlB4DbUXLomlMJ2KzM681XQRJRADNl/GTXHdO/QLHl1szuTaToSWEZLMEjzfn7xzlXyzfbWxlrGnkXNAc7tfMaIGYhSgYBQtLSlRLdGjQnLQo0toGfSGSpSiEmXRYtBmHOm0ZmTJMKO1Hohqbu+qB1rtKnYuQE6iAxZMs0o6KWkfoWjv+++olO3AP9Pz7LzqbyIwEBpQr8EBzu2bVJtA58gmjph8C7KhpijuvXb/c1pwSYSuq6zR3aY/jEh4VHt+Ts0ogjsehf3/15W2uvNXtuRV4JtY5oS36MKdzxn7pExRpaikJ2kV6c/fwYDG5nFAHtPMrmPAnQlMACsgrgi5ShdXoZLLlARFly51lxahKJvoqGaE0YqmlGWpfk+OtbSOoukdc1hrEEZCYJRRPGi7j8/+6JKgsACwMRQGfGQhlFlDhAiBiBYNESsWgoQEkSQJIkUaRK0GKP2+QCBQwAhgDARIECEQYBgBsjBrrq1pCMf2CCF6wLF9iE7ucOxAO38vOAYDiP8QSAfsRfQCPJCABAMFZAz1JkQRDLBuulrFqlgSSTfLSJkt22UtaWYWFGfZzsfy2SyZNbNXjpoPOysFezG378XCVi+WixTZolkFyi0MDa9iJc8eU7bLSEaocg26bosPGDUBAgmxHyAQqjBwGDHhwOec8y646BoBwkSIEiNOkhQZsm5Qo06TDj36DBgzZc6CFRv5ChQp1m/AoCHDRowaM+6hRyZMmzFrzrwX1m14bdOWbTt27dn32RdfffMdQjyew5DESQqBDC4vcEFwBDcBbMGFEFz4wtjVwQ8Qx0k5VqjEDlWCGjRgAKMrNo63zGKbebxnJUFaEBcGlxKgzBzI2CCGMIwRjJovW/EKS1jGClbNtXasYwOvsYlt7GAXe9g3D9r2AR/xyfwc730pIyxi8PBAa6CYYhEd5bDEY4FkbJKKXTKx7AUCTARKsOdj+omdhoeJ54yji0WM8xz0Co/zokMLKdIlRSUMZpzksWfLG+xwAFjBhB3BYsOib+BcjX0ShAUs4hmer/UwHDaMLmIlgUq8pwqoQQNGZCBIM3E+NgWKIhQHa0GwDmzgNTbNr9h8w/e1MlKJXapQgwaMkIY1rGMDr7F5w2jqWJkSYoEdjgGCbWAHu9jD/lqx2CIOAYUoQRk5il0LWMAinuH5Whlp4qYD3Ss2iCgmkcECo20n2AF2sYf9O452JoaZxgGLWIXGHG/Jxxd2foyiHvthvA0RnSmzYIgN+iawxBSFgXoiNo7nTA1RV+kZd4XH02c+chVIMSgpBpTGHERBUCDUMUNYYIRqujCgPdfndMIRVfM4w+N1m7assbaNnXzSmxYOvbbb2qZorAbiryC+MMFaJzvodlVyhAwST78PRIOh9Me6/AAi2PgeU40bBQqxd9miA0C83b8mYO79x+Z9f1+p4au6T/G+/Zjt/efmvf8k52PWxxOjS+TWhP2+7ea8b1tvqzfk5Pv2ubwYyOP+Xvec79qLqupptwrsCDHWRh8wy8Vb2ONKEDxJVEKUtll2aV9ZW+R6N8u5bJHayDjHHViDPygfiQ0cvMuxZEDs9PbC3cMM4o3T4p2S2IHNtn5ERsUszr5/baRh93IsIZb6quN/joAxhxTxrPDyXUVgX7GC65LRWz64jxHi+x1vV0P053wexzmFNXH3gh20wT1a+Bqhl4tRF/SGpyQ2iZSg1OEnWerZW95rodVsk0dxEb9vRuw+vDc9apPva2KeoHi2zbr2++Yr0oV6GsQr1ThhLM444RoHwzmCjaMQHgganwswLhNBT5wsAmUqjlITfoJmy5P0GDrFmPMyb3mGJWtnJbc8J1+J88ru6lX9Nl2zZZ+Rz76zgCJmATvMDrPjOG6Bo/Dzo85xduc54gLHusoZXOOMBDgXYY4Q4ZzEOTMJzkCSHyPFj5DmbGQ4E1nOSpnj3OR0VMJDDjbDAxPrwzAARzMM6ZxtxgF6C5zAitOz5iySBV36Fx1WCHE8DYwOKwE/rowf198SMWAUytgdYzduAta0eYgFzzF4IS2ZvLQKZ63lIes24W21x9i2D50kcnpf04fJZOyMPeLEriEXpc04BS6LUC4pR7nKDxPmKKIc5XrIQmAzBkbPDjEOxsoYGRtRF6tBaKhASGNohonQjMARJpyJWYglMAkew0fMYsFRUjlKWntErjxclDJ2xsnYGWfE6QEEFzCcQJHJUIyeMYJuwiaERoa2MPzAJ1iGl+y/dLZciX9dLyY6WThcAd1q2ytzg/ka+oa85tr68n2lN9LR7Ke5sbwx31xHK9pSXyPjqDM/wAxqYsEkNOxB9TsBUOdMt+fB3p5w+b/lWQKEDnR1tgPpS6Zw09oHejt4gPHBAZ5EsAQSOgowlAMlas1t8MDuCSAzN4HNWaqISChm2yck+INATlOyYFqEXAbUBBb1iWmspRaKV5Lc6AnWwHXVCV3MvaqbYem9OOACtA4nQNyKQYO6oLIM7tClIsHIXZPG4K4WzVpRtGnXoTNvLXHs6e4Wyo+/Hr2oaPrcg4LgdBIolfQyYEG7rMIgzVqbUV52y2ut1dBjwDy0Deid52ydTXRUQA7E3xf+gb37RQFuyNWAunyj4MYNDV7EDAfd2rc3BpBugUmpwLrkYOGBkSJVaNai35gpbx34jwgmg3wvY/llXupQ3EO5h3NP4D7GfYqbl5ufW5hbkluJ25+7mYeXl/Dv////+w8wErcKlVrcNWDctHc+JMGkjzd8PPcR7hPjF+KWuGGMb206GUPYYxDE/4KfN2Se5JX6+/D/rv87PyKvJfUPO2bttkhhgg2v3WLl6ur31eNWspEmdyHgKVgeWBMHb2E6/64+ZbR+U7+pP/wYsRYseua5F+LEe+mVJctWrCJJ+K19pxMlOfDBR598luwLJkC2Dja6CJIceYGCDkehqtfgflyLO7CHeicewF14EIfgIfl4TT4BOBZPyhcb5UuAB/GyfEMCb+ItHIe38T5exwf4ECfgI3yOd+QXgJPwJX7ER+pPOBk/4w98jT/xF07B3/J/RTkAnKaG8puRFtOcrqfNlS00Zxj5PkIt5CdAc5aR39GcbeT3NOcYXdaca3RDNecZ3XDNBXo3XpmguVDvpijTNBfr3QxlFs1lRje75kqjm1tzld4triyh+V3vllOW11xtdGtqrjW6IzXXGd0dmuuN2WbX3GDMPk5zozEIzW1G/M27fXmdjYeK/ylt4q9C+okQbeRH2sQ19PKTOAW6NpFPWx+BhYY0ompAhWhDlvrNBBLdVAdU1GZFgPIv3XotlM2GAFXDHoGyUMXUVpJROQCk9ZKhGxGXvBzhgqfcgDS2WuCryWZVDdI6V4RLLd+hTNfH/FAAd90W33ALHNi68TiNIYig5UOxnzktRZZOAK345+0vG+9MTI6GsmHKOJTnnvxoE5oYS0Mj4CCp+9J5m691DHZx7MdlpaXxmI/IrWSF1RJ8Pm9zAfwX8zZzK8OsOcPUsHhgopLksZL6syVz8OejbR8QmTcuxdJO1lg0YeMVE0S4esMciydeWAFYUMhDsZ0aTVUmVjEKXJAol+3dfroY7WI6nFDJefXVfLj3+lMSGvPqefZa2GJCNQ57N056MFCWlqLrl4rMjLBiiwxTBHIrqQZw+O+scKCBcNVdY4fcsFTMDQI4oJowbskgPmbXUlHxYXvjgXDwdlkxEo8zoe2LtJDuSG/O+42EmEwLVDerTd561XCH0kU75+7Og7z0y5Wf2riVRO/tTKOepZMLJ0fazH2MlZ0YO9VjWbOrI07W45UFPUqMKAg96oSoOrxgHi5ykN0NrY9CKK4/JmHZE6pthPvOjaadnvPas/9abUSDFbzEd96GqU0loKo9xucbkXAk9oXvluOzwkHjL1K8o4aEgTzqDFE4V8FLy8sRDJOnFJ1fqCbD0w7XQXV4S4Ba0DILDYj74/pivdAGejOSt9JteLv06Q3Eyt4N88FwFEQ5iJaxHySKndtI/615sNetEPKc1xq2ONrV6QUoUeAY+kYWuooF5DiZb9OWgOY5zw26nSSBVm6F6mSmaOd+WzFebCm8gtMhrP+PdKv/esV349/H+apOxqf+Pzf1cd7SXLx3/Ovbax8mJFzQTbXEovw5jXZ9NWfsV2uKpisJpf2ng6GDlbYr7WOaEdUC4BSTdDzA+jgGJ//oss+NI1ZmZOhHcJvcDkMvciSVufbfqqEG90fVMaaTqpYEbbEPOyFGQoFCFftRwIotBe4TnmKGFDPtyVRkfL2g9a/YubBwpCJYzqk89/x0obLv2uwBixODju0V9TGYfWtMR27TZ+aPmhrcPzmrmAvKiV7Va62yeeg2CxNqV6B3gG6+hNl420/Vnsp0L947hcYOYUF0M3indNtOn6kH0+Mu06b2Lgm3RUqexFa4uKamnNHfXL6kvL1Du9uU7nK2v7Lcp6Dk9dvhDmTP4iBUMISi/DGmqCJEluqEUt6hglkdaItv/ywF7uSW+Siqohx7LkJgZulg5sRlofZ1aX6n3vy0Konw0oCHLe8oHBwEFwBXhsuVcxMDLqi/lC1Fudwpgwv/Kn8qiOHku0kbt9c16AhnxD1CnkoTNvUtnTMYqHuQlgMFYyMb4TdYsYTMy8Mdn4J7uQ7dJWFFAx5NlOr+XlVv4Y8agkGU4kJMAql91054Y4eYNjWelw15OllF11adHro0kOlsKj9YdqjUAzifeHHXFa4X4ZPu1reE7z0YhezKNCWCgtwy6HTNLKWm/4vaNRjlxhU3glWJx0C+rtwaWttjQMgdIW1qwL5Dh9zjPq1zS8gVvShFLh2zqtso0SZypUfFywbPNmxtyXPrTqAM8Xa4MiPEqsBmivNxu4oZuDCdwHHcfMhpe1jldVe6n+wUY3Al1JOZISR32SG0I9XTs083jMshSqNAg+QxylnlyoZY+SrYiVUfYBq7EOk7kH9ii4aQR6QUFxS4OzVpY1GqsrEjaXGoF0sL5dLhtFlDqAjbWbSzghA2qADpmnd5ocfdHgUsLkzXDJnGrMD1mQx4s7uhFgSZ6cVUqv1KvNZfmwRf2/q1S8fe4HCmwMSVXnT672F7ipX9R1F7/sr/P6yPIXJNzL5azNkEk0gZXfbWrsqLdAfhzRZ3MLcva8hZF/9Xwi+vetRTWwgN1dWsgL66PTZLhrfX2SRDjJILR7TF4XwQh9s5RZNp2RAna+TnAiIOt6W5Wgk3bf6m7GH6QGK+DRJ/itwMzRAu5pFEAdUNyVNUsbxPyKvHUEKjfhWvxqYUaFznu62/14l01p4L+qGWArcE0joajrWGqL8st42GyVp05xYiGJ6LSrU0nmzZzUm8sam3NtYMCiqFwvmR3hWeuZO7KBtelS6qlE9Xj4x4B5czHUOPZMFX5WRFAwooNLxjz9fzL05AuR4+5aw4SO0gN1Ah4ljZBHp+w3pD6sMhz6EsmsS2Yx3PwKUX+TibC9YMprOYP/Ezqsc12iLSV72b7tZpGfPcFLOj8/jxnovpr9vyhSpt/6LFj2mb6FO8zclttsw8MZ3KC2eTXw6GfpQ3eZDUOea8x+uCIl6o6sRQ/0GXAjKacMzzyOpWFSs3u4K+6/A4u1XU794rPExtFvGiYvlCdp9ToIUk1L/uEtdIqO9TuklbOGHZhA2abFkjsYT25obROmVT5nTUXNRC6JiysCQ08ijgBRR92tpzFgmV5/2VjTr5EEaes++6QpAk5odzUtBGuPdKy0WkXti9kwas4GnzTHhdlpMiL4vqXiqR7qv5+y/lY9HQAsQEvHgMStoX0fROqcmXurYNpzBMQ7M1ZsHp/jCZ/ffsGgMBYWhS3uDOc+OxglB3cnbjviDR+M8N1rZvxTZpes6qS2bblIYYZa638OBTvinakght6Zqj+r3qo/mqPieZZ721P6fjM9iwaZ5D3jQbgh1stExeS1jbvpxujPMjgKWMoJ0sAUvHHqMceMAY9LoSjVglIlZoMC+qg/lDQ0y5Blc8PMLNQz3cgN0o+KSTN+ylMieU88KfQrxOIfnq8g6S6JXsUCkn9crJouCVjB2epLxb2GE96feaqRmlvPj2KsWDaHSQZVREgdC83NB0Zc2DmVqOV7lLdVy0nae9afF3iEERoV634oIF7BsDdUvdGiaedhP6c/qpbLNvx6gpmbmk2NwIwOUUxNY2xMbXNCaqxNXWRsc01KYk4bRNHNVVjO2M1LSNnHKMnPTPdFyLra3H1dWlqJgQI6ljdX4AqRrZG6nrGDuoqZjaG/745CJ/2Z/oIg+OJFf/1hp/2wB5skrtcF993vDdeFPTHC89N23FGMXo8rr/Zd3UjxVbopr8mJLzArK+qJ4d4m1fT1cbGhNYkIY688Y2gBygr3hN0FhW0cFUU9/GC1gXMjm9o2ElF+K0N4LLDwyilPlCMr1pj/EnwDAm9bhhg78Nn0+cWnDLjgGIKa36F3wwi1Xl9ykMoH1ArnLPmriUnLTT4feJVd03CiwGzupnV8yu5F3xxpsU0lue97ySL2Q+yhJmRT3dcSTcHC68Zs5rzXtCe7L/D7qBBvE8LipWMejkuq5MJ/tHwHTqff57INsKkImtAldbiGlACS/nx10pA7kqT+Vlqd2tVRG00Hf55et7O8uXURK9TDuxi+T06AVk+fxu4lpKUtwc6jW8oM34J9azj50EYVr892vekYZlRsSkTL/kgpJU6iPU9xePd+bbnrGfj699BUcchFJikNx4IvzP0xN9qS1/Nocnt14M2YS2uV4K4otpvT3yvy+C5W6aX25SJCktJfZ2cUIWkgLidlsT+RP6NP18z/PDH0fPfR4fnTCBpy/UFrabtC6luskmjm/h1tY/oV4Ofl5gu9fKFk6ODIzOai3OKqPEhSiJ0IHI17ZS3mfo/98na8TY8QcbjPPrX5gnZ9Byf1WyjOv1MTNkm3LfU0ZKnZWvQiLSe3LzMnpBwUiVr0t1iC/3CGfBc5AdEfEkNthd8xWI6wu6/291evbP2r3AqPu+ArbXvBs8eneeDQ7sPqP3swktKvyVl/8jKy02Jjud3fGYJ4nk7x2XuBKXuJKUAsIbURJKFQa2kbQwp7XELK+tx2GJz38oHBZr0CHpY86WnNtEf33L/tOqxPeMgXp36euQ0GxaYW76ANDF+v4ZEeYJyxLmCR0BmeqrCpUKcgoVCiDYnpyDeiBqF5olahc2AI6FSKBgkqZBDMnA2tPVM9D1Vpi7BRWp3Bjrvj870dZa2eDhrqpbMCA9i3/yeFR+Y/z47HBXn0idqGGyvnp65jvCE5aaYNSDbFe92xd1ZIUvEN5m+6asYjsIcTfztR9dH+sIYvjK+J3swT8wY955qf0scfGJoOsv57X2WsZjjITl7rD9g58Oqy135NZ9mNN0802lvZzOWOOvfAuXCyjYA+mZcPvEsDHeUUo97wJltP3owfd6aAAsZWlvf3jgll+Jw8UA7sTeqJG/q+/F65lkSEXJoXSnbhTyRuZFeASneJBPgFb05LG3p37to8R8xVIfZwjT17S+P4zi2hw80lJbnNc7zfo7bW/0cHtFY8bxjh4up/jBmboyUXhoNamrEv+dYYRZlBAwsfKN47/Rj/eEBQRkUZVBmOXSUsBSssvm5oNAeijWIXYAsBRS2dgnB9Aa6FdzxbtQ2jlq84SRidtqQq5cm4fen1oYEOXmHRxjAQj6usrd71F5TVVFr4QNdKNgsHKlUk/7AeIKcRCCvniIINBFGaSb+bUz8+Lj8sOBiMSUmKCsXCDBsZq23t0bb3CaNPVeOoa/+spbcC1pL/ULFhmEY4coJ0dqrsKf2ZVfZ3c4uVmcfXK+gGB7vavT68wr8/b2gyov6pUvzs79oJvVsEiWpaujNNPXZ4kjT11nM+UZGptbGerJcgsPEPQUZ1/3NCfqq/vv2VNU2mMW1B9wkZDE/Ng4esDy+dE8fvO7cYlZUXVGUkx1cTrKEXQJDXPxAsFG6McxwUKfVdh19e9AYWgoSyz0A/KE60EXlH5Nn/YX0x9oGmvZ90Nm4xt+dTEx61GMoJEr02Tm1jlyfXZ4QgU5H/jBKPHbzbXJgmbC2lLetl/U45DBuLq8wvSycG+zvFA3pyeh9tXebRzz7/LQxNTx24NxQwXVBZVhi7n+oBZAmAcsoR+whLmyW6B+h7ICTwH7ipXn4DiCrK89eFnWcreyurml7BUk/zuGaZvlGaU08nRRZmBj4nj/+WYC+kcVe/aPc62nhlnObA5yHaK0Ekb4uLy4vDj8+Vq5sJQBOK8YY3ll4/HM4vKm03Xn66+fLT+ZWQfH+bCXL087ZJ4eOM1P6BKIl8iXns0Q3IxhL/ueBtxd7/sBl9hfEAJ0vSGAiqdQ+HFXKAB5UaF+FFowmPkTaxCO1fTdX2++uHj7wmITSETl5+TnwMmal+UI3yqc/0+vFxXfUfGkM6UBaFudRnZ+RF+HeAcVmh4xb8QksG+Ohq7+lMtnwvYl1aTYjFdlJdNw3MTPDhRQ7D9eXx546p2BD28EHFBlvJOT1y6gezH3M58m9eg0zBs2dMZnPwWZGIfsIDqzVoxlQN2Ig9cyhh9Ol/l9fZ6Q0/3hBV1LK51LOsk1rWhi4Exf4SOw5vu5c7X/gVe0CBVw0Ij380oYu7cr/KMX15s/RaLoln7UL2hOzJ8BTY4lDu5PvJWhf5bSo+e2DqG1ltHl7SPJ9gk6QvI+JgnTBL8Jn/wq9qxTLHSpCUXwrqmJ3OR9l3q/UW6NPve9qLmdiz3xHfldE9jw/d26ODjmlYIPauCe/fFxNmDVQdLYxiswqzkhLz/Zyuv2wINtQeqnntzphFa9sn3DosaE/BngNOgJzRs1QcU8pj4Bfxdvb/MEGz4tNBVwQAUjqiR1/NQVT48I8zAPd+DslOwRPy4jmPNdRFZOwaCPcOqyl6hY2d4CqF/8gsNVr7rSPlDXYb1meCHgBRjl3wjAUSOJCQpMmXit1yKq1WwT6IgNXqBO+LsSI5wTQhmcJ2mju++6FYq4qJLA0SmJTQgrfmjXf7CSYM5fHv53JYm8zCb4j7ks+NdaStYSm+AfKr6z9kVq2p2l8fb6pdSkuhcgv8H+ff3K4KhPOD0VsC8b8EE+KY+GN/hwveie4rnEeoMcrH52U3zJLFjz/d86PzrgFUXn0QjYl1SMdxBt5L3An146Wslc/B3jTIJJehWpdB4u+OXkCXbLFQFVshMVbp5RJ3YfBHhOa/joH5GqMdD2041f62nt3byfQ9OM8rR38jVRUXRV5JRpMtIPNsl8d5caM27hU2NLxVgmexBdIw3hSIAcboI8US4vKifPHZanyqEcHpGbXD5KHsWBUJS7e+RMS+dDGBmg9n17OK9cykGVpMCHX2zDN+4fUZJMOxIneR+UKv4rtBSVo1Myj81PhA0tksdRI9nLbHCRdfhiLny7e5D83I7Lg3fxZ87PnGcevHZci7DHwjp8aey4yLoj8xKvElMeh7WLBo/jec8jZ69OgEReSL5FIp/BUc1CkVgI8qQItm/eG/88nzn/aRrpvrvWLsRHnFY4NvG61rTW7M0kivBUHhSZcwH3IBcIvybkcPRL7zoNOvW2Hh+bVuAjUgTb1qB39mA+c/7zxL3O9buCoP2Zvoz2PEn1tkh9ttqZi9oGbtYVSEXP0xTNlButFT8HNa39bKChqR7mOYeYcjXD76OhFuOYHUxn2oqNGH1IPrpF3W7nGT++dGb+0QkK9wZ1NZerfw6bOxGVolfbgCfdqyIZ82UowZdqBQvGIDZ4uqU7pRV49PiXvYcPlufa+t0jw7xdowsj8OgbpaD0wacsdmaqLDo+IZqUnOpcPDHpXZWVF52QlVsaNDxSFpyTH5uYV+hZ9XjEqSydHJsgiQoLI84Nh2wMh/rMhtE8I8E+vsNBC/cDeDqOCucteE1hI5TuKIUrKQwqyIbL3pGNoJNV/DlkMR+mHX5I+0YDlczW+1RDJQGVBMd69Nimz8PryuLJPk+pSExHXkniHX9bszSXaZmua/1elkXetC4TeYGbCY61DOMr79HrT6kRdUUp6RVEe+XrOiS5Uzr1Kj62ElGnGs0Oqx/TIag7Kt8U1YmTP65H0eIwcFQ2TfYAnJHFjob8un3LRQ//T0H5k1Fhc0VZ6b3Zbi/Kg9niiqbq3CwHa0MLa/ekMN9g9yRrS0sDp3+xzeVnCXfk2O+Un21uLOUh1FZWcNSUnSE2TNDM1Mei1MZoZhOjHSbq02Oj6pNdJuA60GakYRQVFB3m7F0b1OwhkhCurC0qXMHo3BSdFF+YTpK2O6prEXrJ5Bwt3UcfTGWFrUFqPYiGj6+8AWbPsfPEMVuuqaKSo76Ep7mphJuj+BHU/0U/TY+zsD4mIuy2XIggFMoYY9ky56jcrDZEdOvtEhXERF5MTUvaMRmE3nBVkCsAf3bAJafYzSWryNUtK9fFNTf33yExtZsSkmrqYtfVtT3U1eB8trFHvkdZXVl0fnRpHSfnZ8UCRWgsMvG4dNTDSVnwj7TGTQ2JUmJtNr4w0svFzc1AuzWDDGw5twzVVaQFrmzdlFAXulBqXxUanlQc7HJd2Vz+SM55sltDeGLcnQj3sivaUoo3VaWEfYsRU+AYgzVGvlw4JCIZAlW3iv3HZfK5aZJ1eKIlqTFbV3Uhmt0VIOEN3+L/Li7Q/3vLDFgKZD3/ZbKqXrtLTIeTHQXHsuzKfcg4Nx1j4WuXf9rhT8fDflGp2TPxKHt/AtDVOJT1DRUV9w3UqpfTBkXuD96pwjra+hoaWBOdtB1sfQ30bDwRW9CoA9fzkTYBPQMM9pyefkRPx3AfCypSsfa4Z2ThYUdL+V0PH3mtrAHpQMpduVw8gQE+4MdiK/LEduM6ltJT0MGxqJ2veogwaMQe/PDUEpiqqumoaAeGqmqrsmUtz9KMuu5lpfTrapti9GyL0slv7/e7GOyV7vJidvitmrSyf4k0hE9GzuGLXeoZxUQnr9p07GoFdZm7r8fwGvia3wjZl/3c5MJS+A5nv3IJHIwconv7miBBAyyFeo/3UHp5XnBYeV4CgBLVZHpym9Y50l4ecXtCWVjduo9slKBZPtHWrdd5yeJiESvpkqi7j5W+iJrNvSzjJD2z5ElDa2c305d8oL3GiU3okDNat0qr62vOL91oWV41cvcMdXFN8dTrIZA/dvb5teoL6stqtxi7zr6DLb/nuNaWB7k5wRr7NxJKg2/45KmWqh3a2/RHUjwNtFwtRdEifjmNbMnHTsfFZ4Gw8qEfdIVWZf5/npFJCa+igldJ2d7vJ6Ojq4N9rw2lpr7IVrXvj4k17xYQL9sXvZt8L0rVARfLfJgpWdUys/JBXWrtcFREwXovKMyavu19ayMRHKUWYhqqHlz9mdAa+qUO/bOWTPayuqCaHe70ZKhQrizs72pihosRr1pOuMPEk5xesSFbL+OuVdXkuhdOnd3GXgatLgoptS+poEBcV88/XQVVzCd2SDxII5okDXwyQLeNk1j1NzeFBRpFm5PZ/uZVhTdw3PzZ8EuuNAizrCJ33NeJOd2DxaNlcBOZlJgb2gZb/orgvy8T05Me+ks7yDkNE32mtv7u+E/iGqpHSPeC3NUiEmO/JjzxlnWQsR/zIS3RXfvXi+8pf5aSVL442V3xPDmhckFhetEht+pQEsuxiMRcEHDcZyjMbchpKGT6yuoDvAFRJmH+FpahAc2hIb2hIepG1xQUBQUU5e0VlASF5JVB+M2SR2i85YUOW5nmExfKBMNw7sEpVmf8bCR4Tl8SV7wCbG85XFUsI1FZib3+t2zHgT6Hy0XFMhpFzuiJAQfbMUg95qJqHonKDKQ6Otk/gtTLLirmiagCKrXGw3526UbT40ircbedBnw1xsTL29LC18OKz8TT09rKy8sUTvIhqWn8sRz8cWnA4td1Y28WT0fSkHSo8nT+p4vi/AoWJZyMQg91zNzxd+LhKA86GfzjxFksY3t4e1J7RDs99sSpz26kUxyVHrxeNZQJbN/tiKikKJB5w5OSJJKSmGR+1IecTk73OWr+ZTz7ocXDHL0YkG1PUcxXhIkE885adk0+uu/TKH2qOFzQN8jFzd16mbzcpDa4iwtjHcI4NB/OuiedIbXLWyMQmvt72pwuSgP2OTVB3UuGXoVY4ephvUJeeckZymjKokp2raG/k3HqXg3yJH2pz1Nnj+/wlNyHj5IvrqvxW5DUo2rzcjPKk5HIx4TsSxK3RWwspczlrlpoPjKfaJxQ78D0IlwsO+6XpliePlg6P58uUarKb0lLKW6C8vTqopaUtPwmpKQEN5Acj+7oGEqJQ3cCfiLufw/pXHSPcW8obQjCOgVjK8O2VnkYwTtGMHMlzupQg9wJ9aj0xJDw8gxSSG0E1rGY3j5aXkVdSVZLU12tEXhjT8WyMyJcL1U0iYGkjCD/ssK4lNo7+cLTy6+fYCIyhTUvsfIa6hvekNHSDr+pATU0S1qtZdZojDskKwQGiiVLxrqVB7OVB0eQm4Ka7a/AX6BzXkBEJF1P4qiIloTsDXUJEVENicj6dZtycH1T4Oo7n1kevq6iJOcUmJoUGVJVHp1UXIPK/ktSOWxv58XahZZaX7gpbaCtIy2lYaAor6YF499A/sDtfycMPX/pn7+PSuzwY6fiDq19/AdgboQ/APoI8f34OWewOh2HbYQEL//nX1yelOKfxytGQlyR3EA+bolXu6DElekIfMgpedF2NbuOFBYt7dlcTjWnfJNShMCNtRLMxW668zZoPi9XfeYJcGtvOeM8fwiY+UkR8IIRUCpIN1idq2DthERl/SLFFOQ+UDi4fOAuLlEpapvarnaonayL44B9wtz4kOcqJYEk1pQckPqT0z0anWF0SR7SzU8Jk5x0kzw7Z4ak2fjOLsxV8jspQHJASk5Ol9PDzQi7kqwUdckBRJPTQ66HW/hIIWvZbynsJNdP4qpw43qWnG5nZIZ3S9pGPh2XkBJYUy4lsTw5INGS0430cPNFysizxJRyNt0CyDxIO8IxetIPLntk7I9xURvLFE2yrxilCtnshqrGR4GqJg2bHBNi53cPl6UjZW6P0pn/wQiY7tKc56/JA2EMKX0rE7tJA9NsSjVg1k0Gct8GUmR7enawAmmGw8ZVM2bcZCZ2zT1VliGtpNlxZqW5bWUxZwQMpxQMQIGrrVhBb/EO0P9U3RA4Kb4uz6rkwmAlGZm13pJfHEvHDRWU4NLFCLRz20JX8DS8L//71qc6p2za8MoUvY+eKJcqmPuOg3TlyqQDuCC+zqQZYrk4faXQzWkpba+LAt7CIqgDjOOmdpMMcQc6QXk6VsuZydW3C18+nZlR3U6ANrMv9tTEu23vN7x9MgUNlPC8jWgAde2+AlTS/V8D6Vh3FwrIm0GPLayNheLOfbr8LdOG0PEKjN2Hnk4cms72xf2VuhWm8RNb5H5jBfXeoniegLPdA1it7crR/IosWA6U/narNivB5/pgPXU9MQbSPu0/fATyMtD/v4gFce/lr9lGpILyYdtlgRMwIj2AVqm+bVSifpbqgw2Ta6DxR3HAdk3nyuNvfEol5DMwF61cSeX5T0CeY9zbivsFNqzSv+OPDgHAYz/7VQBeX/q//Tr+d2GowBA/YCgUQAL9AwdMAEPXy2j/1Km5c7Wev0oqR4X078sLmkdDRSZLrHuCaiSvtsS1/uSUnDjne+LzQ/yF6ERNop2ynMyi+PJxGUUT4anAD2iEFawhiiLEQQs+T7Rj+oCU2lyo7FSro4J6FamM0+hf49bEnai/NTRRQe2GhpoqgYc71E9o67yCfEVPdSPaMKGi3bf3R4Ot5SiBjan2xHrWPfW1n24dI9gEpLbDTvSPkmkYkKiTWOsE43xaVlF1Xp4Y+mJKrpTA5BAS1ZxnjZBaBVjWWDZVhlUeJx3ckG11kZo+Sktb0T8sWPSjkj4aUqrbUxMyWCjHqWxyl4L7jpair64SyxqeHhoule8ulEe4JDBNxnLps1bEHM1XrHNFKdWWa61l0TrxwIWxph3Z9T3zYsqpp8aiZMsug25VL7d76uENNUrPf8XUm+zyAQW6Y7I5RlhNVFS2KGYu2ek3f0ShpRoPZsCttsSoJ0q3J8G7PKLUD41Po8SMxBew0tTWISm9QdqVIrJmUqmJLGqJ3PRLcb+SS1+JXRnRkFuElDFhlROk66CAK2yrqurdkJEK2coNCaR8Z/M8l/yKdB50rqhdcjOXk2/xwMM1K9Wk8gGxGsmmIeBcs9RXL6drCune/NMygCFLsXQ0CAV0IQsxWMAYktCB2r7SlSCmE3OnNyt0jKt7QQx02OdnBJlYg4aix1Z6gXk1YRwBqcQ6YlbdjJhGLOuU9U2/GtPk6U2l+xhWE8ZxlUjsIqDZSrOYRmBeCPAXbzgXQ9hHyiiQoeaEgwBD3IKGVHoAO4NyJIKJ9UgUFm6N6NZGDIzE4hc8EueEsgfKwhCNIm8+QhC5cubCHzchAgQvJjcV3pZyD05rVePFwdVA3odHWl9V+DUFTiZ2QhTYI0dX/cibPcGfZCqdBfBgl4OxSeTHVXgZxtW5wq6TsmOv11H27sqBTFf68yHp2oUFBVfjwIcqHbhwcrUExI5rkSuHDi+y9Kav0aRGkTJtBpRdsaJNILE4vXDjqAIA",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 11039,
          "_error": null
        },
        "serverIPAddress": "172.217.168.227",
        "startedDateTime": "2021-03-29T12:21:36.717Z",
        "time": 98.7400000013609,
        "timings": {
          "blocked": 10.1600000005716,
          "dns": 22.685,
          "ssl": 25.128999999999998,
          "connect": 48.12,
          "send": 0.7150000000000034,
          "wait": 16.34000000078813,
          "receive": 0.7200000000011642,
          "_blocked_queueing": 9.7700000005716
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "m",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 35283
              },
              {
                "functionName": "scheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 7004
              },
              {
                "functionName": "onScheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 4229
              },
              {
                "functionName": "scheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 6902
              },
              {
                "functionName": "scheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 3204
              },
              {
                "functionName": "scheduleMacroTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 3513
              },
              {
                "functionName": "f",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 15798
              },
              {
                "functionName": "",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 35694
              },
              {
                "functionName": "s.<computed>",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 18630
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 141202
              },
              {
                "functionName": "_trySubscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6292
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6102
              },
              {
                "functionName": "j",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 12560
              },
              {
                "functionName": "_innerSub",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 13365
              },
              {
                "functionName": "_tryNext",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 13283
              },
              {
                "functionName": "_next",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 13122
              },
              {
                "functionName": "next",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 3330
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 9767
              },
              {
                "functionName": "_trySubscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6292
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6102
              },
              {
                "functionName": "call",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 12863
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 5982
              },
              {
                "functionName": "call",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 116617
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 5982
              },
              {
                "functionName": "call",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 9425
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 5982
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 143903
              },
              {
                "functionName": "O",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 14037
              },
              {
                "functionName": "load",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 143823
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 438739
              },
              {
                "functionName": "runInitializers",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 100985
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 110670
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 110481
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 110624
              },
              {
                "functionName": "invoke",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 6623
              },
              {
                "functionName": "onInvoke",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 104282
              },
              {
                "functionName": "invoke",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 6563
              },
              {
                "functionName": "run",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 2035
              },
              {
                "functionName": "run",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 104935
              },
              {
                "functionName": "bootstrapModuleFactory",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 110093
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 110906
              },
              {
                "functionName": "invoke",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 6623
              },
              {
                "functionName": "run",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 2035
              },
              {
                "functionName": "",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 12973
              },
              {
                "functionName": "invokeTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 7241
              },
              {
                "functionName": "runTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 2650
              },
              {
                "functionName": "m",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 9235
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "k",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 9090
                },
                {
                  "functionName": "scheduleTask",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 7083
                },
                {
                  "functionName": "scheduleTask",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 3204
                },
                {
                  "functionName": "scheduleMicroTask",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 3434
                },
                {
                  "functionName": "P",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 12873
                },
                {
                  "functionName": "then",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 14314
                },
                {
                  "functionName": "bootstrapModule",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 110893
                },
                {
                  "functionName": "zUnb",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 438844
                },
                {
                  "functionName": "l",
                  "scriptId": "5",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/runtime.0e49e2b53282f40c8925.js",
                  "lineNumber": 0,
                  "columnNumber": 551
                },
                {
                  "functionName": "0",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 85
                },
                {
                  "functionName": "l",
                  "scriptId": "5",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/runtime.0e49e2b53282f40c8925.js",
                  "lineNumber": 0,
                  "columnNumber": 551
                },
                {
                  "functionName": "t",
                  "scriptId": "5",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/runtime.0e49e2b53282f40c8925.js",
                  "lineNumber": 0,
                  "columnNumber": 420
                },
                {
                  "functionName": "r",
                  "scriptId": "5",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/runtime.0e49e2b53282f40c8925.js",
                  "lineNumber": 0,
                  "columnNumber": 292
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 46
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/assets/config/config.production.json",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/assets/config/config.production.json"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "empty"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:21:38 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "content-length",
              "value": "124"
            },
            {
              "name": "last-modified",
              "value": "Sun, 28 Mar 2021 20:19:22 GMT"
            },
            {
              "name": "etag",
              "value": "\"6060e4ca-7c\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 124,
            "mimeType": "application/json",
            "text": "{\n  \"environmentName\": \"production\",\n  \"endPointApiUrl\": \"https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/api\"\n}\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 306,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:21:37.064Z",
        "time": 20.477999998547602,
        "timings": {
          "blocked": 1.6699999988700729,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.19699999999999995,
          "wait": 18.069000001728067,
          "receive": 0.5419999979494605,
          "_blocked_queueing": 1.1679999988700729
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/"
        },
        "_priority": "VeryHigh",
        "_resourceType": "font",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fBBc4AMP6lQ.woff2",
          "httpVersion": "h3-29",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "fonts.gstatic.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/s/roboto/v20/KFOlCnqEu92Fr1MmEU9fBBc4AMP6lQ.woff2"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "origin",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "x-client-data",
              "value": "CJa2yQEIo7bJAQjEtskBCKmdygEI+MfKAQiymssBCOScywEIjZ3LAQipncsB"
            },
            {
              "name": "sec-fetch-site",
              "value": "cross-site"
            },
            {
              "name": "sec-fetch-mode",
              "value": "cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "font"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3-29",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-type",
              "value": "font/woff2"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "content-length",
              "value": "11056"
            },
            {
              "name": "date",
              "value": "Thu, 25 Mar 2021 23:01:54 GMT"
            },
            {
              "name": "expires",
              "value": "Fri, 25 Mar 2022 23:01:54 GMT"
            },
            {
              "name": "last-modified",
              "value": "Wed, 24 Jul 2019 01:18:48 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "sffe"
            },
            {
              "name": "x-xss-protection",
              "value": "0"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "age",
              "value": "307184"
            },
            {
              "name": "alt-svc",
              "value": "h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\""
            }
          ],
          "cookies": [],
          "content": {
            "size": 11056,
            "mimeType": "font/woff2",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 11079,
          "_error": null
        },
        "serverIPAddress": "172.217.168.227",
        "startedDateTime": "2021-03-29T12:21:37.195Z",
        "time": 51.081000001431676,
        "timings": {
          "blocked": 23.061000001072184,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.2290000000000001,
          "wait": 26.54199999953387,
          "receive": 1.2490000008256175,
          "_blocked_queueing": 22.495000001072185
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/"
        },
        "_priority": "VeryHigh",
        "_resourceType": "font",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://fonts.gstatic.com/s/alegreya/v19/4UacrEBBsBhlBjvfkQjt71kZfyBzPgNG9hU4-6qlkySFrt19.woff",
          "httpVersion": "h3-29",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "fonts.gstatic.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/s/alegreya/v19/4UacrEBBsBhlBjvfkQjt71kZfyBzPgNG9hU4-6qlkySFrt19.woff"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "origin",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "x-client-data",
              "value": "CJa2yQEIo7bJAQjEtskBCKmdygEI+MfKAQiymssBCOScywEIjZ3LAQipncsB"
            },
            {
              "name": "sec-fetch-site",
              "value": "cross-site"
            },
            {
              "name": "sec-fetch-mode",
              "value": "cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "font"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3-29",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-type",
              "value": "font/woff"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "content-length",
              "value": "24044"
            },
            {
              "name": "date",
              "value": "Thu, 25 Mar 2021 08:29:25 GMT"
            },
            {
              "name": "expires",
              "value": "Fri, 25 Mar 2022 08:29:25 GMT"
            },
            {
              "name": "last-modified",
              "value": "Thu, 11 Feb 2021 20:38:00 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "sffe"
            },
            {
              "name": "x-xss-protection",
              "value": "0"
            },
            {
              "name": "age",
              "value": "359533"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "alt-svc",
              "value": "h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\""
            }
          ],
          "cookies": [],
          "content": {
            "size": 24044,
            "mimeType": "font/woff",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 24069,
          "_error": null
        },
        "serverIPAddress": "172.217.168.227",
        "startedDateTime": "2021-03-29T12:21:37.199Z",
        "time": 47.33000000123866,
        "timings": {
          "blocked": 19.30900000180886,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.15700000000000003,
          "wait": 26.555000000119907,
          "receive": 1.30899999930989,
          "_blocked_queueing": 18.73600000180886
        }
      },
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "High",
        "_resourceType": "other",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/assets/favicon-32x32.png",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/assets/favicon-32x32.png"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "no-cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "image"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/login"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:21:38 GMT"
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "1363"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:52 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db8-553\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1363,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAC31BMVEWPW6GSXaWSXaSVX6iWX6mWYKmWYKqXYKqTXqaOW6CJWJuEVZZ9UI55TYl5TYqAUpKRXaRoRHZDLU00JD0kGisaEyAdFyA+NTlPRUZOREZHPEI8LUBPM1qGVpiGVpc8KUUKCg0BBQQCBgQBBAM+Ojanlovjyrvx1cbw1cXpz7/CrZ9zaGA5Kz14TYmMWp40JDwCBgUDBwYEBwcCBQU6NjPYwLL/4dH73s763c373c394NCcjYI6LD2DVJRVOGEFBwiNfnX/4tF2a2JMMliLWZ0BBQWBdWz+4ND838/WvrA/ND2CU5RrRXkJCgwqKCbRuqz+4dD53c1hWFNhPm+XYKtJMVRFQDvMtaj9389zZ2BWOGOYYas+KkgmJSOEdm7v1MX7386Ke3JKMVUBBAR4bGT428zpz8CThHplW1WzoJTXv7FANj0mHC3hx7n8387x1sapl4xIQj6vnJH/49KIenFELk6UX6eKWJsdFiIDBgYMDg6rmY7t0sPy18fly7xIQEFvR36EVJUWEhsBBAVZUUzy1sf/4tKfj4Q/LUaQXKN7T4sPDhMJCwuqmI383s7r0cLQuqzDr6E+OTdjQHFzSoIKCw4oJyTexrf22crFsKPZwbP328vOuKpUTEcnISg+MEEwJDVMMlcGCAo4NTHs0sPKtKdmXVZUTUhSS0YeHRw9KUePW6KQXKJZOmUWFxW9qZz94M/cw7V+cmo4NDFOSENtZFtGMU9GL1ACBgY0MS6gkIW1pZhHMU+VX6kJDAtdVU/ozb/bwrRvZV0/K0cuIDYABQMGCAhYUEqkk4fbw7TkyryjkohiWVMjGSmMWZ5rRno4JkAODRIDBgUkGipXOGRFL05ANT80Ly8ICgkAAgELCw9xSYB0S4NSNl4tIDQRDhUFCAgFCAl1TIWZYayFVZdoQ3ZTN18yIzoRDxZYOmR8UIxjQXFaO2ZkQXKHV5hePms+KkdSNl2NWp+PW6D///9N5ORcAAACL0lEQVR42pXT91vTQBgH8DTkuLoQBPcM4h60h5LDjVCoGzUqGhH3pu5qFMUtoOCedS9kuPfAvbfiBtxb3P+Al6RpU30s+v0tTz7P+957g6J0tJvoyH8Pt6Ep+r8AAzwhBH8BEOiLFC1WvIRXScppnAB4+5Ty9Stdpmy58hUqVqoMfwegStVqrH/1gBo1a9WuU7de/QbQFTANAw1GFNSocTCHQ7gmuGmz5sAFwBYtEUJBrUKxFGJah7kAJtzPQIApIhIrMbdp2w5oAGzfAUkVOnaKsovOXbryWtCNFJBE9x5mBUT37CVoW/RmkRxTTJ9YDnPRXN9+/aEG6AP9kZIBAwdhbvCQocOGj/CCTkCNNNgrBMRZcMio0WPGjhs/weoAzMRJChAnT4mSpoyMn2qZljAdqgDMmCnKYNbsOZy8RrKOufMSk1QAk+cbZbAgRSqQaiZTLFy0eMlSqIJly5UpV6xMxXjV6jU229p16zds3ETbAe+zWRlhy1aOlN+2PW1HOpuRmZllVcFOpYO4a3coEXv27tt/4OAhzVZ7HrZvw5Gjx2KJsJjjbcdPZDuAcyOR6eSp08EWct5nzp7TnKb3+Qukh9Ll4qXLV65eux5jvHGTcQD9rdt37hpkw+bcu//g4aPHrPFJLtScpi4v/+mz56L4IuflK4/Xb96+e4/YD4L2TkKY9fFTQcHnL2TtAPJ08tdv3/+49rwg8ED9EKw/rIW8rOx/fHqFP16KdpufvwDjLrNw8SdeQQAAAABJRU5ErkJggg==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 1544,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:21:37.217Z",
        "time": 28.183000002172776,
        "timings": {
          "blocked": 2.0140000030389054,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.33099999999999996,
          "wait": 24.580999999237946,
          "receive": 1.2569999998959247,
          "_blocked_queueing": 1.3630000030389056
        }
      },
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "High",
        "_resourceType": "other",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/assets/favicon-32x32.png",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "Referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/login"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:21:38 GMT"
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "1363"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:52 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db8-553\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1363,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAC31BMVEWPW6GSXaWSXaSVX6iWX6mWYKmWYKqXYKqTXqaOW6CJWJuEVZZ9UI55TYl5TYqAUpKRXaRoRHZDLU00JD0kGisaEyAdFyA+NTlPRUZOREZHPEI8LUBPM1qGVpiGVpc8KUUKCg0BBQQCBgQBBAM+Ojanlovjyrvx1cbw1cXpz7/CrZ9zaGA5Kz14TYmMWp40JDwCBgUDBwYEBwcCBQU6NjPYwLL/4dH73s763c373c394NCcjYI6LD2DVJRVOGEFBwiNfnX/4tF2a2JMMliLWZ0BBQWBdWz+4ND838/WvrA/ND2CU5RrRXkJCgwqKCbRuqz+4dD53c1hWFNhPm+XYKtJMVRFQDvMtaj9389zZ2BWOGOYYas+KkgmJSOEdm7v1MX7386Ke3JKMVUBBAR4bGT428zpz8CThHplW1WzoJTXv7FANj0mHC3hx7n8387x1sapl4xIQj6vnJH/49KIenFELk6UX6eKWJsdFiIDBgYMDg6rmY7t0sPy18fly7xIQEFvR36EVJUWEhsBBAVZUUzy1sf/4tKfj4Q/LUaQXKN7T4sPDhMJCwuqmI383s7r0cLQuqzDr6E+OTdjQHFzSoIKCw4oJyTexrf22crFsKPZwbP328vOuKpUTEcnISg+MEEwJDVMMlcGCAo4NTHs0sPKtKdmXVZUTUhSS0YeHRw9KUePW6KQXKJZOmUWFxW9qZz94M/cw7V+cmo4NDFOSENtZFtGMU9GL1ACBgY0MS6gkIW1pZhHMU+VX6kJDAtdVU/ozb/bwrRvZV0/K0cuIDYABQMGCAhYUEqkk4fbw7TkyryjkohiWVMjGSmMWZ5rRno4JkAODRIDBgUkGipXOGRFL05ANT80Ly8ICgkAAgELCw9xSYB0S4NSNl4tIDQRDhUFCAgFCAl1TIWZYayFVZdoQ3ZTN18yIzoRDxZYOmR8UIxjQXFaO2ZkQXKHV5hePms+KkdSNl2NWp+PW6D///9N5ORcAAACL0lEQVR42pXT91vTQBgH8DTkuLoQBPcM4h60h5LDjVCoGzUqGhH3pu5qFMUtoOCedS9kuPfAvbfiBtxb3P+Al6RpU30s+v0tTz7P+957g6J0tJvoyH8Pt6Ep+r8AAzwhBH8BEOiLFC1WvIRXScppnAB4+5Ty9Stdpmy58hUqVqoMfwegStVqrH/1gBo1a9WuU7de/QbQFTANAw1GFNSocTCHQ7gmuGmz5sAFwBYtEUJBrUKxFGJah7kAJtzPQIApIhIrMbdp2w5oAGzfAUkVOnaKsovOXbryWtCNFJBE9x5mBUT37CVoW/RmkRxTTJ9YDnPRXN9+/aEG6AP9kZIBAwdhbvCQocOGj/CCTkCNNNgrBMRZcMio0WPGjhs/weoAzMRJChAnT4mSpoyMn2qZljAdqgDMmCnKYNbsOZy8RrKOufMSk1QAk+cbZbAgRSqQaiZTLFy0eMlSqIJly5UpV6xMxXjV6jU229p16zds3ETbAe+zWRlhy1aOlN+2PW1HOpuRmZllVcFOpYO4a3coEXv27tt/4OAhzVZ7HrZvw5Gjx2KJsJjjbcdPZDuAcyOR6eSp08EWct5nzp7TnKb3+Qukh9Ll4qXLV65eux5jvHGTcQD9rdt37hpkw+bcu//g4aPHrPFJLtScpi4v/+mz56L4IuflK4/Xb96+e4/YD4L2TkKY9fFTQcHnL2TtAPJ08tdv3/+49rwg8ED9EKw/rIW8rOx/fHqFP16KdpufvwDjLrNw8SdeQQAAAABJRU5ErkJggg==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:21:37.218Z",
        "time": 29.583999999886146,
        "timings": {
          "blocked": 1.2929999976069666,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 27.32800000004936,
          "receive": 0.9630000022298191,
          "_blocked_queueing": 1.2179999976069666
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "m",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 35283
              },
              {
                "functionName": "scheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 7004
              },
              {
                "functionName": "onScheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 4229
              },
              {
                "functionName": "scheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 6902
              },
              {
                "functionName": "scheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 3204
              },
              {
                "functionName": "scheduleMacroTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 3513
              },
              {
                "functionName": "f",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 15798
              },
              {
                "functionName": "",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 35694
              },
              {
                "functionName": "s.<computed>",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 18630
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 141202
              },
              {
                "functionName": "_trySubscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6292
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6102
              },
              {
                "functionName": "j",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 12560
              },
              {
                "functionName": "_innerSub",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 13365
              },
              {
                "functionName": "_tryNext",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 13283
              },
              {
                "functionName": "_next",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 13122
              },
              {
                "functionName": "next",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 3330
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 9767
              },
              {
                "functionName": "_trySubscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6292
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6102
              },
              {
                "functionName": "call",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 12863
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 5982
              },
              {
                "functionName": "call",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 116617
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 5982
              },
              {
                "functionName": "call",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 9425
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 5982
              },
              {
                "functionName": "getNext",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 434431
              },
              {
                "functionName": "ngOnInit",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 434383
              },
              {
                "functionName": "cn",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 25458
              },
              {
                "functionName": "ln",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 25299
              },
              {
                "functionName": "on",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 25025
              },
              {
                "functionName": "Tr",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 44877
              },
              {
                "functionName": "Kr",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 51405
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 45605
              },
              {
                "functionName": "Tr",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 45616
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 45170
              },
              {
                "functionName": "Tr",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 45195
              },
              {
                "functionName": "Kr",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 51405
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 45605
              },
              {
                "functionName": "Tr",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 45616
              },
              {
                "functionName": "Ar",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 45977
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 52234
              },
              {
                "functionName": "ti",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 52256
              },
              {
                "functionName": "detectChanges",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 86874
              },
              {
                "functionName": "tick",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 114014
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 112263
              },
              {
                "functionName": "invoke",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 6623
              },
              {
                "functionName": "onInvoke",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 104282
              },
              {
                "functionName": "invoke",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 6563
              },
              {
                "functionName": "run",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 2035
              },
              {
                "functionName": "run",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 104935
              },
              {
                "functionName": "next",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 112249
              },
              {
                "functionName": "s",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 94967
              },
              {
                "functionName": "__tryOrUnsub",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 5116
              },
              {
                "functionName": "next",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 4361
              },
              {
                "functionName": "_next",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 3556
              },
              {
                "functionName": "next",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 3330
              },
              {
                "functionName": "next",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 7991
              },
              {
                "functionName": "emit",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 94838
              },
              {
                "functionName": "wl",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 105309
              },
              {
                "functionName": "onHasTask",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 104426
              },
              {
                "functionName": "hasTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 7514
              },
              {
                "functionName": "_updateTaskCount",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 7750
              },
              {
                "functionName": "_updateTaskCount",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 4105
              },
              {
                "functionName": "runTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 2848
              },
              {
                "functionName": "m",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 9235
              },
              {
                "functionName": "invokeTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 8320
              },
              {
                "functionName": "_",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 20544
              },
              {
                "functionName": "k",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 20789
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/api/candidates/match",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/api/candidates/match"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "empty"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/match"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:24:31 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "name": "vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 117,
            "mimeType": "application/json",
            "text": "{\"id\":\"6060e4fb7831a69d773e5cb7\",\"name\":\"Romeo\",\"avatar\":\"/assets/romeo-profile.png\",\"props\":[\"handsome\",\"romantic\"]}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 296,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:24:30.118Z",
        "time": 59.59599999914644,
        "timings": {
          "blocked": 5.6910000006800985,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.31699999999999995,
          "wait": 53.04500000017835,
          "receive": 0.5429999982879963,
          "_blocked_queueing": 4.999000000680098
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [],
            "parent": {
              "description": "Image",
              "callFrames": [
                {
                  "functionName": "setAttribute",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 150820
                },
                {
                  "functionName": "setAttribute",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 225998
                },
                {
                  "functionName": "dn",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 25851
                },
                {
                  "functionName": "zi",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 61778
                },
                {
                  "functionName": "qi",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 62558
                },
                {
                  "functionName": "template",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 435584
                },
                {
                  "functionName": "Ir",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 46101
                },
                {
                  "functionName": "kr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 44300
                },
                {
                  "functionName": "Zr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 51837
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 44501
                },
                {
                  "functionName": "kr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 44512
                },
                {
                  "functionName": "create",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 93242
                },
                {
                  "functionName": "createComponent",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 88792
                },
                {
                  "functionName": "activateWith",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 353815
                },
                {
                  "functionName": "activateRoutes",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 314302
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 313298
                },
                {
                  "functionName": "activateChildRoutes",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 313281
                },
                {
                  "functionName": "activate",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 312132
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 340235
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9601
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259176
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9767
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9425
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258859
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258712
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259176
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259176
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13540
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13540
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9767
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13365
                },
                {
                  "functionName": "_tryNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13283
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13122
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 291570
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 261096
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13479
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9780
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260361
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 291197
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13365
                },
                {
                  "functionName": "_tryNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13283
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13122
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9767
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260361
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258859
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258712
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9767
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260361
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258492
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260361
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9425
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258859
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258712
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 116896
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13540
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13540
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 292369
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3648
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3648
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13479
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9780
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 116617
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259943
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 292155
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13365
                },
                {
                  "functionName": "_tryNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13283
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13122
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 292369
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3648
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3648
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13479
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9780
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 116617
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259943
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 292155
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9425
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13365
                },
                {
                  "functionName": "_tryNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13283
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13122
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259176
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9767
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9425
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258859
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258712
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259176
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/assets/profile.png",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/assets/profile.png"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "no-cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "image"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/match"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:24:31 GMT"
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "38181"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:52 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db8-9525\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 38181,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 38453,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:24:30.121Z",
        "time": 53.732999997009756,
        "timings": {
          "blocked": 3.334999999575084,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.14,
          "wait": 16.691999999189285,
          "receive": 33.56599999824539,
          "_blocked_queueing": 2.824999999575084
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [],
            "parent": {
              "description": "Image",
              "callFrames": [
                {
                  "functionName": "setProperty",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 151248
                },
                {
                  "functionName": "setProperty",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 226786
                },
                {
                  "functionName": "Nr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 48418
                },
                {
                  "functionName": "Bi",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 61272
                },
                {
                  "functionName": "Dw",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 434006
                },
                {
                  "functionName": "Ir",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 46101
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 44743
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45170
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45195
                },
                {
                  "functionName": "Kr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 51405
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45605
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45616
                },
                {
                  "functionName": "Kr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 51405
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45605
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45616
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45170
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45195
                },
                {
                  "functionName": "Kr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 51405
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45605
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45616
                },
                {
                  "functionName": "Ar",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45977
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 52234
                },
                {
                  "functionName": "ti",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 52256
                },
                {
                  "functionName": "detectChanges",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 86874
                },
                {
                  "functionName": "tick",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 114014
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 112263
                },
                {
                  "functionName": "invoke",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 6623
                },
                {
                  "functionName": "onInvoke",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 104282
                },
                {
                  "functionName": "invoke",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 6563
                },
                {
                  "functionName": "run",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 2035
                },
                {
                  "functionName": "run",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 104935
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 112249
                },
                {
                  "functionName": "s",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 94967
                },
                {
                  "functionName": "__tryOrUnsub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5116
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 4361
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3556
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 7991
                },
                {
                  "functionName": "emit",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 94838
                },
                {
                  "functionName": "wl",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 105309
                },
                {
                  "functionName": "Cl",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 105691
                },
                {
                  "functionName": "onInvokeTask",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 104228
                },
                {
                  "functionName": "invokeTask",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 7162
                },
                {
                  "functionName": "runTask",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 2650
                },
                {
                  "functionName": "invokeTask",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 8291
                },
                {
                  "functionName": "_",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 20544
                },
                {
                  "functionName": "k",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 20868
                }
              ],
              "parent": {
                "description": "load",
                "callFrames": [
                  {
                    "functionName": "O",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 21746
                  },
                  {
                    "functionName": "scheduleTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 7004
                  },
                  {
                    "functionName": "onScheduleTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 4229
                  },
                  {
                    "functionName": "scheduleTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 6902
                  },
                  {
                    "functionName": "scheduleTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 3204
                  },
                  {
                    "functionName": "scheduleEventTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 3587
                  },
                  {
                    "functionName": "",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 23395
                  },
                  {
                    "functionName": "",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 141030
                  },
                  {
                    "functionName": "_trySubscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 6292
                  },
                  {
                    "functionName": "subscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 6102
                  },
                  {
                    "functionName": "j",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 12560
                  },
                  {
                    "functionName": "_innerSub",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 13365
                  },
                  {
                    "functionName": "_tryNext",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 13283
                  },
                  {
                    "functionName": "_next",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 13122
                  },
                  {
                    "functionName": "next",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 3330
                  },
                  {
                    "functionName": "",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 9767
                  },
                  {
                    "functionName": "_trySubscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 6292
                  },
                  {
                    "functionName": "subscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 6102
                  },
                  {
                    "functionName": "call",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 12863
                  },
                  {
                    "functionName": "subscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 5982
                  },
                  {
                    "functionName": "call",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 116617
                  },
                  {
                    "functionName": "subscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 5982
                  },
                  {
                    "functionName": "call",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 9425
                  },
                  {
                    "functionName": "subscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 5982
                  },
                  {
                    "functionName": "getNext",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 434431
                  },
                  {
                    "functionName": "ngOnInit",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 434383
                  },
                  {
                    "functionName": "cn",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 25458
                  },
                  {
                    "functionName": "ln",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 25299
                  },
                  {
                    "functionName": "on",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 25025
                  },
                  {
                    "functionName": "Tr",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 44877
                  },
                  {
                    "functionName": "Kr",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 51405
                  },
                  {
                    "functionName": "",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 45605
                  },
                  {
                    "functionName": "Tr",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 45616
                  },
                  {
                    "functionName": "",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 45170
                  },
                  {
                    "functionName": "Tr",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 45195
                  },
                  {
                    "functionName": "Kr",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 51405
                  },
                  {
                    "functionName": "",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 45605
                  },
                  {
                    "functionName": "Tr",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 45616
                  },
                  {
                    "functionName": "Ar",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 45977
                  },
                  {
                    "functionName": "",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 52234
                  },
                  {
                    "functionName": "ti",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 52256
                  },
                  {
                    "functionName": "detectChanges",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 86874
                  },
                  {
                    "functionName": "tick",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 114014
                  },
                  {
                    "functionName": "",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 112263
                  },
                  {
                    "functionName": "invoke",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 6623
                  },
                  {
                    "functionName": "onInvoke",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 104282
                  },
                  {
                    "functionName": "invoke",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 6563
                  },
                  {
                    "functionName": "run",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 2035
                  },
                  {
                    "functionName": "run",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 104935
                  },
                  {
                    "functionName": "next",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 112249
                  },
                  {
                    "functionName": "s",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 94967
                  },
                  {
                    "functionName": "__tryOrUnsub",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 5116
                  },
                  {
                    "functionName": "next",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 4361
                  },
                  {
                    "functionName": "_next",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 3556
                  },
                  {
                    "functionName": "next",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 3330
                  },
                  {
                    "functionName": "next",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 7991
                  },
                  {
                    "functionName": "emit",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 94838
                  },
                  {
                    "functionName": "wl",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 105309
                  },
                  {
                    "functionName": "onHasTask",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 104426
                  },
                  {
                    "functionName": "hasTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 7514
                  },
                  {
                    "functionName": "_updateTaskCount",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 7750
                  },
                  {
                    "functionName": "_updateTaskCount",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 4105
                  },
                  {
                    "functionName": "runTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 2848
                  },
                  {
                    "functionName": "m",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 9235
                  },
                  {
                    "functionName": "invokeTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 8320
                  },
                  {
                    "functionName": "_",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 20544
                  },
                  {
                    "functionName": "k",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 20789
                  }
                ]
              }
            }
          }
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/assets/romeo-profile.png",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/assets/romeo-profile.png"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "no-cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "image"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/match"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:24:31 GMT"
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "46646"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:52 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db8-b636\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 46646,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 46928,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:24:30.194Z",
        "time": 37.803000002895715,
        "timings": {
          "blocked": 1.8100000017655549,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.245,
          "wait": 18.61499999993527,
          "receive": 17.133000001194887,
          "_blocked_queueing": 1.3270000017655548
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "m",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 35283
              },
              {
                "functionName": "scheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 7004
              },
              {
                "functionName": "onScheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 4229
              },
              {
                "functionName": "scheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 6902
              },
              {
                "functionName": "scheduleTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 3204
              },
              {
                "functionName": "scheduleMacroTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 3513
              },
              {
                "functionName": "f",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 15798
              },
              {
                "functionName": "",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 35694
              },
              {
                "functionName": "s.<computed>",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 18630
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 141202
              },
              {
                "functionName": "_trySubscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6292
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6102
              },
              {
                "functionName": "j",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 12560
              },
              {
                "functionName": "_innerSub",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 13365
              },
              {
                "functionName": "_tryNext",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 13283
              },
              {
                "functionName": "_next",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 13122
              },
              {
                "functionName": "next",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 3330
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 9767
              },
              {
                "functionName": "_trySubscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6292
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 6102
              },
              {
                "functionName": "call",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 12863
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 5982
              },
              {
                "functionName": "call",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 116617
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 5982
              },
              {
                "functionName": "call",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 9425
              },
              {
                "functionName": "subscribe",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 5982
              },
              {
                "functionName": "getNext",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 434431
              },
              {
                "functionName": "clear",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 434495
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 433713
              },
              {
                "functionName": "Gi",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 63704
              },
              {
                "functionName": "r",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 63864
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 149193
              },
              {
                "functionName": "invokeTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 7241
              },
              {
                "functionName": "onInvokeTask",
                "scriptId": "7",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                "lineNumber": 0,
                "columnNumber": 104171
              },
              {
                "functionName": "invokeTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 7162
              },
              {
                "functionName": "runTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 2650
              },
              {
                "functionName": "invokeTask",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 8291
              },
              {
                "functionName": "_",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 20544
              },
              {
                "functionName": "k",
                "scriptId": "6",
                "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                "lineNumber": 0,
                "columnNumber": 20789
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/api/candidates/match",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/api/candidates/match"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "empty"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/match"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:24:59 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "name": "vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 111,
            "mimeType": "application/json",
            "text": "{\"id\":\"6060e4fb7831a69d773e5cb8\",\"name\":\"Mercutio\",\"avatar\":\"/assets/mercutio-profile.png\",\"props\":[\"violent\"]}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 290,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:24:57.848Z",
        "time": 30.557000001863344,
        "timings": {
          "blocked": 2.3199999998304994,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.239,
          "wait": 26.832000000201866,
          "receive": 1.1660000018309802,
          "_blocked_queueing": 1.4179999998304993
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [],
            "parent": {
              "description": "Image",
              "callFrames": [
                {
                  "functionName": "setProperty",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 151248
                },
                {
                  "functionName": "setProperty",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 226786
                },
                {
                  "functionName": "Nr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 48418
                },
                {
                  "functionName": "Bi",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 61272
                },
                {
                  "functionName": "Dw",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 434006
                },
                {
                  "functionName": "Ir",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 46101
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 44743
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45170
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45195
                },
                {
                  "functionName": "Kr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 51405
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45605
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45616
                },
                {
                  "functionName": "Kr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 51405
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45605
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45616
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45170
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45195
                },
                {
                  "functionName": "Kr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 51405
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45605
                },
                {
                  "functionName": "Tr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45616
                },
                {
                  "functionName": "Ar",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 45977
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 52234
                },
                {
                  "functionName": "ti",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 52256
                },
                {
                  "functionName": "detectChanges",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 86874
                },
                {
                  "functionName": "tick",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 114014
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 112263
                },
                {
                  "functionName": "invoke",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 6623
                },
                {
                  "functionName": "onInvoke",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 104282
                },
                {
                  "functionName": "invoke",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 6563
                },
                {
                  "functionName": "run",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 2035
                },
                {
                  "functionName": "run",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 104935
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 112249
                },
                {
                  "functionName": "s",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 94967
                },
                {
                  "functionName": "__tryOrUnsub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5116
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 4361
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3556
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 7991
                },
                {
                  "functionName": "emit",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 94838
                },
                {
                  "functionName": "wl",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 105309
                },
                {
                  "functionName": "Cl",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 105691
                },
                {
                  "functionName": "onInvokeTask",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 104228
                },
                {
                  "functionName": "invokeTask",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 7162
                },
                {
                  "functionName": "runTask",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 2650
                },
                {
                  "functionName": "invokeTask",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 8291
                },
                {
                  "functionName": "_",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 20544
                },
                {
                  "functionName": "k",
                  "scriptId": "6",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                  "lineNumber": 0,
                  "columnNumber": 20868
                }
              ],
              "parent": {
                "description": "load",
                "callFrames": [
                  {
                    "functionName": "O",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 21746
                  },
                  {
                    "functionName": "scheduleTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 7004
                  },
                  {
                    "functionName": "onScheduleTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 4229
                  },
                  {
                    "functionName": "scheduleTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 6902
                  },
                  {
                    "functionName": "scheduleTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 3204
                  },
                  {
                    "functionName": "scheduleEventTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 3587
                  },
                  {
                    "functionName": "",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 23395
                  },
                  {
                    "functionName": "",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 141030
                  },
                  {
                    "functionName": "_trySubscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 6292
                  },
                  {
                    "functionName": "subscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 6102
                  },
                  {
                    "functionName": "j",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 12560
                  },
                  {
                    "functionName": "_innerSub",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 13365
                  },
                  {
                    "functionName": "_tryNext",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 13283
                  },
                  {
                    "functionName": "_next",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 13122
                  },
                  {
                    "functionName": "next",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 3330
                  },
                  {
                    "functionName": "",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 9767
                  },
                  {
                    "functionName": "_trySubscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 6292
                  },
                  {
                    "functionName": "subscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 6102
                  },
                  {
                    "functionName": "call",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 12863
                  },
                  {
                    "functionName": "subscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 5982
                  },
                  {
                    "functionName": "call",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 116617
                  },
                  {
                    "functionName": "subscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 5982
                  },
                  {
                    "functionName": "call",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 9425
                  },
                  {
                    "functionName": "subscribe",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 5982
                  },
                  {
                    "functionName": "getNext",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 434431
                  },
                  {
                    "functionName": "clear",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 434495
                  },
                  {
                    "functionName": "",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 433713
                  },
                  {
                    "functionName": "Gi",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 63704
                  },
                  {
                    "functionName": "r",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 63864
                  },
                  {
                    "functionName": "",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 149193
                  },
                  {
                    "functionName": "invokeTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 7241
                  },
                  {
                    "functionName": "onInvokeTask",
                    "scriptId": "7",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                    "lineNumber": 0,
                    "columnNumber": 104171
                  },
                  {
                    "functionName": "invokeTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 7162
                  },
                  {
                    "functionName": "runTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 2650
                  },
                  {
                    "functionName": "invokeTask",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 8291
                  },
                  {
                    "functionName": "_",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 20544
                  },
                  {
                    "functionName": "k",
                    "scriptId": "6",
                    "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/polyfills.8c151b8375e767ff858f.js",
                    "lineNumber": 0,
                    "columnNumber": 20789
                  }
                ]
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/assets/mercutio-profile.png",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/assets/mercutio-profile.png"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "no-cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "image"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/match"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:24:59 GMT"
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "52185"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:52 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db8-cbd9\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 52185,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 52475,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:24:57.885Z",
        "time": 52.04799999773968,
        "timings": {
          "blocked": 2.2410000004626345,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.266,
          "wait": 17.257000000115017,
          "receive": 32.28399999716203,
          "_blocked_queueing": 1.7530000004626345
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [],
            "parent": {
              "description": "Image",
              "callFrames": [
                {
                  "functionName": "setAttribute",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 150820
                },
                {
                  "functionName": "setAttribute",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 225998
                },
                {
                  "functionName": "dn",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 25851
                },
                {
                  "functionName": "zi",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 61778
                },
                {
                  "functionName": "qi",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 62558
                },
                {
                  "functionName": "template",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 412652
                },
                {
                  "functionName": "Ir",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 46101
                },
                {
                  "functionName": "kr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 44300
                },
                {
                  "functionName": "Zr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 51837
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 44501
                },
                {
                  "functionName": "kr",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 44512
                },
                {
                  "functionName": "create",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 93242
                },
                {
                  "functionName": "createComponent",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 88792
                },
                {
                  "functionName": "activateWith",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 353815
                },
                {
                  "functionName": "activateRoutes",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 314302
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 313298
                },
                {
                  "functionName": "activateChildRoutes",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 313281
                },
                {
                  "functionName": "activate",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 312132
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 340235
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9601
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259176
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9767
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9425
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258859
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258712
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259176
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259176
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13540
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13540
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9767
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13365
                },
                {
                  "functionName": "_tryNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13283
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13122
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 291570
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 261096
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13479
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9780
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260361
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 291197
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13365
                },
                {
                  "functionName": "_tryNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13283
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13122
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9767
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260361
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258859
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258712
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9767
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260361
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258492
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260361
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9425
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258859
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258712
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 116896
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13540
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13540
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 292369
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3648
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3648
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13479
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9780
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 116617
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259943
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 292155
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13365
                },
                {
                  "functionName": "_tryNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13283
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13122
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 292369
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3648
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3648
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "_complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13479
                },
                {
                  "functionName": "complete",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3450
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9780
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 116617
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259943
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 292155
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12863
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9425
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13365
                },
                {
                  "functionName": "_tryNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13283
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 13122
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 260839
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259176
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12232
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9699
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9767
                },
                {
                  "functionName": "_trySubscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6292
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 6102
                },
                {
                  "functionName": "call",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 9425
                },
                {
                  "functionName": "subscribe",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 5982
                },
                {
                  "functionName": "j",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 12560
                },
                {
                  "functionName": "_innerSub",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258859
                },
                {
                  "functionName": "_next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 258712
                },
                {
                  "functionName": "next",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 3330
                },
                {
                  "functionName": "notifyNext",
                  "scriptId": "7",
                  "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/main.cdef7c3db3985a301fc9.js",
                  "lineNumber": 0,
                  "columnNumber": 259176
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "623",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/assets/juliet-profile.png",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":authority",
              "value": "relaxing-meerkat-aks.westeurope.cloudapp.azure.com"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":path",
              "value": "/assets/juliet-profile.png"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "sec-fetch-mode",
              "value": "no-cors"
            },
            {
              "name": "sec-fetch-dest",
              "value": "image"
            },
            {
              "name": "referer",
              "value": "https://relaxing-meerkat-aks.westeurope.cloudapp.azure.com/matchmade"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Mar 2021 12:25:30 GMT"
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "46945"
            },
            {
              "name": "last-modified",
              "value": "Mon, 22 Feb 2021 10:55:52 GMT"
            },
            {
              "name": "etag",
              "value": "\"60338db8-b761\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            }
          ],
          "cookies": [],
          "content": {
            "size": 46945,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 47226,
          "_error": null
        },
        "serverIPAddress": "40.115.61.178",
        "startedDateTime": "2021-03-29T12:25:28.825Z",
        "time": 52.98399999810499,
        "timings": {
          "blocked": 2.336000000431901,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.278,
          "wait": 17.102999998786487,
          "receive": 33.266999998886604,
          "_blocked_queueing": 1.4950000004319008
        }
      }
    ]
  }
}